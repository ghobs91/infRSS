{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"file":"ort-web.min.js","sourceRoot":"","sources":["file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/webpack/universalModuleDefinition","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/wasm/binding/ort-wasm-threaded.min.js","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/wasm/binding/ort-wasm.js","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/node_modules/%40protobufjs/aspromise/index.js","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/node_modules/%40protobufjs/base64/index.js","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/node_modules/%40protobufjs/eventemitter/index.js","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/node_modules/%40protobufjs/float/index.js","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/node_modules/%40protobufjs/inquire/index.js","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/node_modules/%40protobufjs/pool/index.js","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/node_modules/%40protobufjs/utf8/index.js","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/node_modules/guid-typescript/dist/guid.js","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/node_modules/long/src/long.js","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/node_modules/onnx-proto/dist/onnx.js","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/node_modules/protobufjs/minimal.js","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/node_modules/protobufjs/src/index-minimal.js","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/node_modules/protobufjs/src/reader.js","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/node_modules/protobufjs/src/reader_buffer.js","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/node_modules/protobufjs/src/roots.js","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/node_modules/protobufjs/src/rpc.js","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/node_modules/protobufjs/src/rpc/service.js","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/node_modules/protobufjs/src/util/longbits.js","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/node_modules/protobufjs/src/util/minimal.js","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/node_modules/protobufjs/src/writer.js","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/node_modules/protobufjs/src/writer_buffer.js","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/backend-onnxjs.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/backend-wasm.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/index.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/attribute-with-cache-key.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/attribute.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backend.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/backend-webgl.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/glsl-coordinate-lib.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/glsl-definitions.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/glsl-encoding-lib.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/glsl-fragcolor-lib.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/glsl-function-inliner.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/glsl-preprocessor.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/glsl-registered-libs.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/glsl-shape-utils-lib.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/glsl-source.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/glsl-vec-lib.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/inference-handler.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/op-resolve-rules.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/ops/batch-normalization.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/ops/binary-op.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/ops/cast.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/ops/concat-packed.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/ops/concat.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/ops/conv-grouped.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/ops/conv-pack.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/ops/conv-transpose.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/ops/conv.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/ops/depth-to-space.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/ops/dot-product.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/ops/flatten.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/ops/fuse-utils.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/ops/gather.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/ops/gemm.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/ops/im2col-pack.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/ops/im2col.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/ops/image-scaler.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/ops/instance-normalization.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/ops/matmul-pack.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/ops/matmul.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/ops/pack.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/ops/packing-utils.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/ops/pad.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/ops/pool.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/ops/reduce.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/ops/reshape-packed.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/ops/reshape.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/ops/resize-packed.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/ops/shape.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/ops/slice.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/ops/softmax.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/ops/split.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/ops/squeeze.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/ops/sum.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/ops/tile.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/ops/transpose.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/ops/uint8-encode.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/ops/unary-op.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/ops/unpack.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/ops/unsqueeze.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/ops/upsample.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/program-manager.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/session-handler.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/texture-data-encoder.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/texture-layout-strategy.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/texture-layout.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/texture-manager.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/types.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/utils.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/webgl-context-factory.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/backends/webgl/webgl-context.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/execution-plan.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/graph.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/instrument.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/model.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/operators.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/opset.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/ort-schema/ort-generated.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/session-handler.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/session.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/tensor.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/onnxjs/util.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/wasm/options-utils.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/wasm/proxy-wrapper.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/wasm/run-options.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/wasm/session-handler.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/wasm/session-options.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/wasm/string-utils.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/wasm/wasm-core-impl.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/wasm/wasm-factory.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/lib/wasm/proxy-worker/main.ts","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/node_modules/worker-loader/dist/runtime/inline.js","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/external%20umd%20%7B%22commonjs%22%3A%22onnxruntime-common%22%2C%22commonjs2%22%3A%22onnxruntime-common%22%2C%22root%22%3A%22ort%22%7D","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/node_modules/flatbuffers/js/flatbuffers.mjs","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/webpack/bootstrap","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/webpack/runtime/compat%20get%20default%20export","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/webpack/runtime/define%20property%20getters","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/webpack/runtime/global","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/webpack/runtime/hasOwnProperty%20shorthand","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/webpack/runtime/make%20namespace%20object","file:///Users/andrewg/Projects/infrss/node_modules/onnxruntime-web/dist/webpack%3A/onnxruntime-web/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"onnxruntime-common\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"onnxruntime-common\")) : factory(root[\"ort\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, (__WEBPACK_EXTERNAL_MODULE__1670__) => {\nreturn ","var _scriptDir,t=(_scriptDir=\"undefined\"!=typeof document&&document.currentScript?document.currentScript.src:void 0,\"undefined\"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(t){function n(){return E.buffer!=D&&z(E.buffer),j}function e(){return E.buffer!=D&&z(E.buffer),F}function r(){return E.buffer!=D&&z(E.buffer),U}function i(){return E.buffer!=D&&z(E.buffer),Y}function a(){return E.buffer!=D&&z(E.buffer),I}var u,o,c;t=t||{},u||(u=void 0!==t?t:{}),u.ready=new Promise((function(t,n){o=t,c=n}));var f,s,l,p,h,m,d=Object.assign({},u),y=\"./this.program\",b=(t,n)=>{throw n},g=\"object\"==typeof window,_=\"function\"==typeof importScripts,v=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,w=u.ENVIRONMENT_IS_PTHREAD||!1,T=\"\";function O(t){return u.locateFile?u.locateFile(t,T):T+t}if(v){let t;T=_?require(\"path\").dirname(T)+\"/\":__dirname+\"/\",m=()=>{h||(p=require(\"fs\"),h=require(\"path\"))},f=function(t,n){return m(),t=h.normalize(t),p.readFileSync(t,n?void 0:\"utf8\")},l=t=>((t=f(t,!0)).buffer||(t=new Uint8Array(t)),t),s=(t,n,e)=>{m(),t=h.normalize(t),p.readFile(t,(function(t,r){t?e(t):n(r.buffer)}))},1<process.argv.length&&(y=process.argv[1].replace(/\\\\/g,\"/\")),process.argv.slice(2),process.on(\"uncaughtException\",(function(t){if(!(t instanceof ot))throw t})),process.on(\"unhandledRejection\",(function(t){throw t})),b=(t,n)=>{if(J())throw process.exitCode=t,n;n instanceof ot||x(\"exiting due to exception: \"+n),process.exit(t)},u.inspect=function(){return\"[Emscripten Module object]\"};try{t=require(\"worker_threads\")}catch(t){throw console.error('The \"worker_threads\" module is not supported in this node.js build - perhaps a newer version is needed?'),t}global.Worker=t.Worker}else(g||_)&&(_?T=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(T=document.currentScript.src),_scriptDir&&(T=_scriptDir),T=0!==T.indexOf(\"blob:\")?T.substr(0,T.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):\"\",v||(f=t=>{var n=new XMLHttpRequest;return n.open(\"GET\",t,!1),n.send(null),n.responseText},_&&(l=t=>{var n=new XMLHttpRequest;return n.open(\"GET\",t,!1),n.responseType=\"arraybuffer\",n.send(null),new Uint8Array(n.response)}),s=(t,n,e)=>{var r=new XMLHttpRequest;r.open(\"GET\",t,!0),r.responseType=\"arraybuffer\",r.onload=()=>{200==r.status||0==r.status&&r.response?n(r.response):e()},r.onerror=e,r.send(null)}));v&&\"undefined\"==typeof performance&&(global.performance=require(\"perf_hooks\").performance);var S=console.log.bind(console),A=console.warn.bind(console);v&&(m(),S=t=>p.writeSync(1,t+\"\\n\"),A=t=>p.writeSync(2,t+\"\\n\"));var M,C=u.print||S,x=u.printErr||A;Object.assign(u,d),d=null,u.thisProgram&&(y=u.thisProgram),u.quit&&(b=u.quit),u.wasmBinary&&(M=u.wasmBinary);var R=u.noExitRuntime||!1;\"object\"!=typeof WebAssembly&&rt(\"no native wasm support detected\");var E,k,D,j,F,U,Y,I,W=!1,P=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;function H(t,n,e){var r=(n>>>=0)+e;for(e=n;t[e]&&!(e>=r);)++e;if(16<e-n&&t.buffer&&P)return P.decode(t.buffer instanceof SharedArrayBuffer?t.slice(n,e):t.subarray(n,e));for(r=\"\";n<e;){var i=t[n++];if(128&i){var a=63&t[n++];if(192==(224&i))r+=String.fromCharCode((31&i)<<6|a);else{var u=63&t[n++];65536>(i=224==(240&i)?(15&i)<<12|a<<6|u:(7&i)<<18|a<<12|u<<6|63&t[n++])?r+=String.fromCharCode(i):(i-=65536,r+=String.fromCharCode(55296|i>>10,56320|1023&i))}}else r+=String.fromCharCode(i)}return r}function q(t,n){return(t>>>=0)?H(e(),t,n):\"\"}function B(t,n,e,r){if(!(0<r))return 0;var i=e>>>=0;r=e+r-1;for(var a=0;a<t.length;++a){var u=t.charCodeAt(a);if(55296<=u&&57343>=u&&(u=65536+((1023&u)<<10)|1023&t.charCodeAt(++a)),127>=u){if(e>=r)break;n[e++>>>0]=u}else{if(2047>=u){if(e+1>=r)break;n[e++>>>0]=192|u>>6}else{if(65535>=u){if(e+2>=r)break;n[e++>>>0]=224|u>>12}else{if(e+3>=r)break;n[e++>>>0]=240|u>>18,n[e++>>>0]=128|u>>12&63}n[e++>>>0]=128|u>>6&63}n[e++>>>0]=128|63&u}}return n[e>>>0]=0,e-i}function G(t){for(var n=0,e=0;e<t.length;++e){var r=t.charCodeAt(e);127>=r?n++:2047>=r?n+=2:55296<=r&&57343>=r?(n+=4,++e):n+=3}return n}function z(t){D=t,u.HEAP8=j=new Int8Array(t),u.HEAP16=new Int16Array(t),u.HEAP32=U=new Int32Array(t),u.HEAPU8=F=new Uint8Array(t),u.HEAPU16=new Uint16Array(t),u.HEAPU32=Y=new Uint32Array(t),u.HEAPF32=new Float32Array(t),u.HEAPF64=I=new Float64Array(t)}w&&(D=u.buffer);var N=u.INITIAL_MEMORY||16777216;if(w)E=u.wasmMemory,D=u.buffer;else if(u.wasmMemory)E=u.wasmMemory;else if(!((E=new WebAssembly.Memory({initial:N/65536,maximum:65536,shared:!0})).buffer instanceof SharedArrayBuffer))throw x(\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\"),v&&console.log(\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and also use a recent version)\"),Error(\"bad memory\");E&&(D=E.buffer),N=D.byteLength,z(D);var V,L=[],X=[],Z=[],$=[];function J(){return R||!1}function Q(){var t=u.preRun.shift();L.unshift(t)}var K,tt=0,nt=null,et=null;function rt(t){throw w?postMessage({cmd:\"onAbort\",arg:t}):u.onAbort&&u.onAbort(t),x(t=\"Aborted(\"+t+\")\"),W=!0,t=new WebAssembly.RuntimeError(t+\". Build with -sASSERTIONS for more info.\"),c(t),t}function it(){return K.startsWith(\"data:application/octet-stream;base64,\")}function at(){var t=K;try{if(t==K&&M)return new Uint8Array(M);if(l)return l(t);throw\"both async and sync fetching of the wasm failed\"}catch(t){rt(t)}}K=\"ort-wasm-threaded.wasm\",it()||(K=O(K));var ut={};function ot(t){this.name=\"ExitStatus\",this.message=\"Program terminated with exit(\"+t+\")\",this.status=t}function ct(t){(t=pt.Vb[t])||rt(),pt.mc(t)}function ft(t){var n=pt.Cc();if(!n)return 6;pt.ac.push(n),pt.Vb[t.Ub]=n,n.Ub=t.Ub;var e={cmd:\"run\",start_routine:t.Ic,arg:t.zc,pthread_ptr:t.Ub};return n.$b=()=>{e.time=performance.now(),n.postMessage(e,t.Nc)},n.loaded&&(n.$b(),delete n.$b),0}function st(t){if(w)return Vt(1,1,t);J()||(pt.oc(),u.onExit&&u.onExit(t),W=!0),b(t,new ot(t))}function lt(t,n){if(!n&&w)throw dt(t),\"unwind\";J()||w||(bn(),ht(Z),yn(0),en[1].length&&rn(1,10),en[2].length&&rn(2,10),pt.oc()),st(t)}var pt={Yb:[],ac:[],qc:[],Vb:{},fc:function(){w&&pt.Ec()},Pc:function(){},Ec:function(){pt.receiveObjectTransfer=pt.Gc,pt.threadInitTLS=pt.pc,pt.setExitStatus=pt.nc,R=!1},nc:function(){},oc:function(){for(var t of Object.values(pt.Vb))pt.mc(t);for(t of pt.Yb)t.terminate();pt.Yb=[]},mc:function(t){var n=t.Ub;delete pt.Vb[n],pt.Yb.push(t),pt.ac.splice(pt.ac.indexOf(t),1),t.Ub=0,Tn(n)},Gc:function(){},pc:function(){pt.qc.forEach((t=>t()))},Fc:function(t,n){t.onmessage=e=>{var r=(e=e.data).cmd;if(t.Ub&&(pt.Bc=t.Ub),e.targetThread&&e.targetThread!=hn()){var i=pt.Vb[e.Qc];i?i.postMessage(e,e.transferList):x('Internal error! Worker sent a message \"'+r+'\" to target pthread '+e.targetThread+\", but that thread no longer exists!\")}else\"processProxyingQueue\"===r?Ht(e.queue):\"spawnThread\"===r?ft(e):\"cleanupThread\"===r?ct(e.thread):\"killThread\"===r?(e=e.thread,r=pt.Vb[e],delete pt.Vb[e],r.terminate(),Tn(e),pt.ac.splice(pt.ac.indexOf(r),1),r.Ub=0):\"cancelThread\"===r?pt.Vb[e.thread].postMessage({cmd:\"cancel\"}):\"loaded\"===r?(t.loaded=!0,n&&n(t),t.$b&&(t.$b(),delete t.$b)):\"print\"===r?C(\"Thread \"+e.threadId+\": \"+e.text):\"printErr\"===r?x(\"Thread \"+e.threadId+\": \"+e.text):\"alert\"===r?alert(\"Thread \"+e.threadId+\": \"+e.text):\"setimmediate\"===e.target?t.postMessage(e):\"onAbort\"===r?u.onAbort&&u.onAbort(e.arg):r&&x(\"worker sent an unknown command \"+r);pt.Bc=void 0},t.onerror=t=>{throw x(\"worker sent an error! \"+t.filename+\":\"+t.lineno+\": \"+t.message),t},v&&(t.on(\"message\",(function(n){t.onmessage({data:n})})),t.on(\"error\",(function(n){t.onerror(n)})),t.on(\"detachedExit\",(function(){}))),t.postMessage({cmd:\"load\",urlOrBlob:u.mainScriptUrlOrBlob||_scriptDir,wasmMemory:E,wasmModule:k})},yc:function(){var t=O(\"ort-wasm-threaded.worker.js\");pt.Yb.push(new Worker(t))},Cc:function(){return 0==pt.Yb.length&&(pt.yc(),pt.Fc(pt.Yb[0])),pt.Yb.pop()}};function ht(t){for(;0<t.length;)t.shift()(u)}function mt(t){var n=Mn();return t=t(),Cn(n),t}function dt(t){if(w)return Vt(2,0,t);try{lt(t)}catch(t){t instanceof ot||\"unwind\"==t||b(1,t)}}u.PThread=pt,u.establishStackSpace=function(){var t=hn(),n=r()[t+44>>2>>>0];t=r()[t+48>>2>>>0],An(n,n-t),Cn(n)};var yt=[];function bt(t){var n=yt[t];return n||(t>=yt.length&&(yt.length=t+1),yt[t]=n=V.get(t)),n}u.invokeEntryPoint=function(t,n){t=bt(t)(n),J()?pt.nc(t):On(t)};var gt,_t,vt=[],wt=0,Tt=0;function Ot(t){this.Zb=t,this.Sb=t-24,this.xc=function(t){i()[this.Sb+4>>2>>>0]=t},this.bc=function(){return i()[this.Sb+4>>2>>>0]},this.wc=function(t){i()[this.Sb+8>>2>>>0]=t},this.Dc=function(){return i()[this.Sb+8>>2>>>0]},this.rc=function(){r()[this.Sb>>2>>>0]=0},this.hc=function(t){t=t?1:0,n()[this.Sb+12>>0>>>0]=t},this.uc=function(){return 0!=n()[this.Sb+12>>0>>>0]},this.ic=function(t){t=t?1:0,n()[this.Sb+13>>0>>>0]=t},this.kc=function(){return 0!=n()[this.Sb+13>>0>>>0]},this.fc=function(t,n){this.cc(0),this.xc(t),this.wc(n),this.rc(),this.hc(!1),this.ic(!1)},this.sc=function(){Atomics.add(r(),this.Sb>>2,1)},this.Hc=function(){return 1===Atomics.sub(r(),this.Sb>>2,1)},this.cc=function(t){i()[this.Sb+16>>2>>>0]=t},this.tc=function(){return i()[this.Sb+16>>2>>>0]},this.vc=function(){if(En(this.bc()))return i()[this.Zb>>2>>>0];var t=this.tc();return 0!==t?t:this.Zb}}function St(t){return dn(new Ot(t).Sb)}function At(t,n,e,r){return w?Vt(3,1,t,n,e,r):Mt(t,n,e,r)}function Mt(t,n,e,r){if(\"undefined\"==typeof SharedArrayBuffer)return x(\"Current environment does not support SharedArrayBuffer, pthreads are not available!\"),6;var i=[];return w&&0===i.length?At(t,n,e,r):(t={Ic:e,Ub:t,zc:r,Nc:i},w?(t.Oc=\"spawnThread\",postMessage(t,i),0):ft(t))}function Ct(t,n,e){return w?Vt(4,1,t,n,e):0}function xt(t,n){if(w)return Vt(5,1,t,n)}function Rt(t,n){if(w)return Vt(6,1,t,n)}function Et(t,n,e){if(w)return Vt(7,1,t,n,e)}function kt(t,n,e){return w?Vt(8,1,t,n,e):0}function Dt(t,n){if(w)return Vt(9,1,t,n)}function jt(t,n,e){if(w)return Vt(10,1,t,n,e)}function Ft(t,n,e,r){if(w)return Vt(11,1,t,n,e,r)}function Ut(t,n,e,r){if(w)return Vt(12,1,t,n,e,r)}function Yt(t,n,e,r){if(w)return Vt(13,1,t,n,e,r)}function It(t){if(w)return Vt(14,1,t)}function Wt(t,n){if(w)return Vt(15,1,t,n)}function Pt(t,n,e){if(w)return Vt(16,1,t,n,e)}function Ht(t){Atomics.store(r(),t>>2,1),hn()&&wn(t),Atomics.compareExchange(r(),t>>2,1,0)}function qt(t){return i()[t>>>2]+4294967296*r()[t+4>>>2]}function Bt(t,n,e,r,i,a){return w?Vt(17,1,t,n,e,r,i,a):-52}function Gt(t,n,e,r,i,a){if(w)return Vt(18,1,t,n,e,r,i,a)}function zt(t){var e=G(t)+1,r=mn(e);return r&&B(t,n(),r,e),r}function Nt(t,n,e){function a(t){return(t=t.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?t[1]:\"GMT\"}if(w)return Vt(19,1,t,n,e);var u=(new Date).getFullYear(),o=new Date(u,0,1),c=new Date(u,6,1);u=o.getTimezoneOffset();var f=c.getTimezoneOffset(),s=Math.max(u,f);r()[t>>2>>>0]=60*s,r()[n>>2>>>0]=Number(u!=f),t=a(o),n=a(c),t=zt(t),n=zt(n),f<u?(i()[e>>2>>>0]=t,i()[e+4>>2>>>0]=n):(i()[e>>2>>>0]=n,i()[e+4>>2>>>0]=t)}function Vt(t,n){var e=arguments.length-2,r=arguments;return mt((()=>{for(var i=xn(8*e),u=i>>3,o=0;o<e;o++){var c=r[2+o];a()[u+o>>>0]=c}return vn(t,e,i,n)}))}u.executeNotifiedProxyingQueue=Ht,_t=v?()=>{var t=process.hrtime();return 1e3*t[0]+t[1]/1e6}:w?()=>performance.now()-u.__performance_now_clock_drift:()=>performance.now();var Lt,Xt=[],Zt={};function $t(){if(!Lt){var t,n={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:y||\"./this.program\"};for(t in Zt)void 0===Zt[t]?delete n[t]:n[t]=Zt[t];var e=[];for(t in n)e.push(t+\"=\"+n[t]);Lt=e}return Lt}function Jt(t,e){if(w)return Vt(20,1,t,e);var r=0;return $t().forEach((function(a,u){var o=e+r;for(u=i()[t+4*u>>2>>>0]=o,o=0;o<a.length;++o)n()[u++>>0>>>0]=a.charCodeAt(o);n()[u>>0>>>0]=0,r+=a.length+1})),0}function Qt(t,n){if(w)return Vt(21,1,t,n);var e=$t();i()[t>>2>>>0]=e.length;var r=0;return e.forEach((function(t){r+=t.length+1})),i()[n>>2>>>0]=r,0}function Kt(t){return w?Vt(22,1,t):52}function tn(t,n,e,r){return w?Vt(23,1,t,n,e,r):52}function nn(t,n,e,r,i){return w?Vt(24,1,t,n,e,r,i):70}var en=[null,[],[]];function rn(t,n){var e=en[t];0===n||10===n?((1===t?C:x)(H(e,0)),e.length=0):e.push(n)}function an(t,n,r,a){if(w)return Vt(25,1,t,n,r,a);for(var u=0,o=0;o<r;o++){var c=i()[n>>2>>>0],f=i()[n+4>>2>>>0];n+=8;for(var s=0;s<f;s++)rn(t,e()[c+s>>>0]);u+=f}return i()[a>>2>>>0]=u,0}var un=0;function on(t){return 0==t%4&&(0!=t%100||0==t%400)}var cn=[31,29,31,30,31,30,31,31,30,31,30,31],fn=[31,28,31,30,31,30,31,31,30,31,30,31];function sn(t,e,i,a){function u(t,n,e){for(t=\"number\"==typeof t?t.toString():t||\"\";t.length<n;)t=e[0]+t;return t}function o(t,n){return u(t,n,\"0\")}function c(t,n){function e(t){return 0>t?-1:0<t?1:0}var r;return 0===(r=e(t.getFullYear()-n.getFullYear()))&&0===(r=e(t.getMonth()-n.getMonth()))&&(r=e(t.getDate()-n.getDate())),r}function f(t){switch(t.getDay()){case 0:return new Date(t.getFullYear()-1,11,29);case 1:return t;case 2:return new Date(t.getFullYear(),0,3);case 3:return new Date(t.getFullYear(),0,2);case 4:return new Date(t.getFullYear(),0,1);case 5:return new Date(t.getFullYear()-1,11,31);case 6:return new Date(t.getFullYear()-1,11,30)}}function s(t){var n=t.Wb;for(t=new Date(new Date(t.Xb+1900,0,1).getTime());0<n;){var e=t.getMonth(),r=(on(t.getFullYear())?cn:fn)[e];if(!(n>r-t.getDate())){t.setDate(t.getDate()+n);break}n-=r-t.getDate()+1,t.setDate(1),11>e?t.setMonth(e+1):(t.setMonth(0),t.setFullYear(t.getFullYear()+1))}return e=new Date(t.getFullYear()+1,0,4),n=f(new Date(t.getFullYear(),0,4)),e=f(e),0>=c(n,t)?0>=c(e,t)?t.getFullYear()+1:t.getFullYear():t.getFullYear()-1}var l=r()[a+40>>2>>>0];for(var p in a={Lc:r()[a>>2>>>0],Kc:r()[a+4>>2>>>0],dc:r()[a+8>>2>>>0],jc:r()[a+12>>2>>>0],ec:r()[a+16>>2>>>0],Xb:r()[a+20>>2>>>0],Tb:r()[a+24>>2>>>0],Wb:r()[a+28>>2>>>0],Rc:r()[a+32>>2>>>0],Jc:r()[a+36>>2>>>0],Mc:l?q(l):\"\"},i=q(i),l={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"})i=i.replace(new RegExp(p,\"g\"),l[p]);var h=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),m=\"January February March April May June July August September October November December\".split(\" \");for(p in l={\"%a\":function(t){return h[t.Tb].substring(0,3)},\"%A\":function(t){return h[t.Tb]},\"%b\":function(t){return m[t.ec].substring(0,3)},\"%B\":function(t){return m[t.ec]},\"%C\":function(t){return o((t.Xb+1900)/100|0,2)},\"%d\":function(t){return o(t.jc,2)},\"%e\":function(t){return u(t.jc,2,\" \")},\"%g\":function(t){return s(t).toString().substring(2)},\"%G\":function(t){return s(t)},\"%H\":function(t){return o(t.dc,2)},\"%I\":function(t){return 0==(t=t.dc)?t=12:12<t&&(t-=12),o(t,2)},\"%j\":function(t){for(var n=0,e=0;e<=t.ec-1;n+=(on(t.Xb+1900)?cn:fn)[e++]);return o(t.jc+n,3)},\"%m\":function(t){return o(t.ec+1,2)},\"%M\":function(t){return o(t.Kc,2)},\"%n\":function(){return\"\\n\"},\"%p\":function(t){return 0<=t.dc&&12>t.dc?\"AM\":\"PM\"},\"%S\":function(t){return o(t.Lc,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(t){return t.Tb||7},\"%U\":function(t){return o(Math.floor((t.Wb+7-t.Tb)/7),2)},\"%V\":function(t){var n=Math.floor((t.Wb+7-(t.Tb+6)%7)/7);if(2>=(t.Tb+371-t.Wb-2)%7&&n++,n)53==n&&(4==(e=(t.Tb+371-t.Wb)%7)||3==e&&on(t.Xb)||(n=1));else{n=52;var e=(t.Tb+7-t.Wb-1)%7;(4==e||5==e&&on(t.Xb%400-1))&&n++}return o(n,2)},\"%w\":function(t){return t.Tb},\"%W\":function(t){return o(Math.floor((t.Wb+7-(t.Tb+6)%7)/7),2)},\"%y\":function(t){return(t.Xb+1900).toString().substring(2)},\"%Y\":function(t){return t.Xb+1900},\"%z\":function(t){var n=0<=(t=t.Jc);return t=Math.abs(t)/60,(n?\"+\":\"-\")+String(\"0000\"+(t/60*100+t%60)).slice(-4)},\"%Z\":function(t){return t.Mc},\"%%\":function(){return\"%\"}},i=i.replace(/%%/g,\"\\0\\0\"),l)i.includes(p)&&(i=i.replace(new RegExp(p,\"g\"),l[p](a)));return p=function(t){var n=Array(G(t)+1);return B(t,n,0,n.length),n}(i=i.replace(/\\0\\0/g,\"%\")),p.length>e?0:(function(t,e){n().set(t,e>>>0)}(p,t),p.length-1)}pt.fc();var ln=[null,st,dt,At,Ct,xt,Rt,Et,kt,Dt,jt,Ft,Ut,Yt,It,Wt,Pt,Bt,Gt,Nt,Jt,Qt,Kt,tn,nn,an],pn={b:function(t){return mn(t+24)+24},n:function(t){return(t=new Ot(t)).uc()||(t.hc(!0),wt--),t.ic(!1),vt.push(t),t.sc(),t.vc()},ma:function(t){throw x(\"Unexpected exception thrown, this is not properly supported - aborting\"),W=!0,t},x:function(){Sn(0);var t=vt.pop();if(t.Hc()&&!t.kc()){var n=t.Dc();n&&bt(n)(t.Zb),St(t.Zb)}Tt=0},e:function(){var t=Tt;if(!t)return un=0;var n=new Ot(t);n.cc(t);var e=n.bc();if(!e)return un=0,t;for(var r=Array.prototype.slice.call(arguments),i=0;i<r.length;i++){var a=r[i];if(0===a||a===e)break;if(Rn(a,e,n.Sb+16))return un=a,t}return un=e,t},l:function(){var t=Tt;if(!t)return un=0;var n=new Ot(t);n.cc(t);var e=n.bc();if(!e)return un=0,t;for(var r=Array.prototype.slice.call(arguments),i=0;i<r.length;i++){var a=r[i];if(0===a||a===e)break;if(Rn(a,e,n.Sb+16))return un=a,t}return un=e,t},h:function(){var t=Tt;if(!t)return un=0;var n=new Ot(t);n.cc(t);var e=n.bc();if(!e)return un=0,t;for(var r=Array.prototype.slice.call(arguments),i=0;i<r.length;i++){var a=r[i];if(0===a||a===e)break;if(Rn(a,e,n.Sb+16))return un=a,t}return un=e,t},t:St,M:function(){var t=vt.pop();t||rt(\"no exception to throw\");var n=t.Zb;throw t.kc()||(vt.push(t),t.ic(!0),t.hc(!1),wt++),Tt=n,n},c:function(t,n,e){throw new Ot(t).fc(n,e),Tt=t,wt++,t},pa:function(){return wt},Fa:function(t){gn(t,!_,1,!g),pt.pc()},T:function(t){w?postMessage({cmd:\"cleanupThread\",thread:t}):ct(t)},xa:Mt,j:function(t){throw Tt||(Tt=t),t},H:Ct,Ma:xt,ua:Rt,wa:Et,oa:kt,Ka:Dt,Ca:jt,Ja:Ft,V:Ut,va:Yt,sa:It,La:Wt,ta:Pt,Ta:function(){},X:function(){rt(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},Ua:function(){rt(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},W:function(){return Date.now()},ya:function(){return 2097152},Oa:function(){return!0},za:function(t,n,e,r){if(t==n)setTimeout((()=>Ht(r)));else if(w)postMessage({targetThread:t,cmd:\"processProxyingQueue\",queue:r});else{if(!(t=pt.Vb[t]))return;t.postMessage({cmd:\"processProxyingQueue\",queue:r})}return 1},Ea:function(){return-1},Pa:function(t,n){t=new Date(1e3*qt(t)),r()[n>>2>>>0]=t.getUTCSeconds(),r()[n+4>>2>>>0]=t.getUTCMinutes(),r()[n+8>>2>>>0]=t.getUTCHours(),r()[n+12>>2>>>0]=t.getUTCDate(),r()[n+16>>2>>>0]=t.getUTCMonth(),r()[n+20>>2>>>0]=t.getUTCFullYear()-1900,r()[n+24>>2>>>0]=t.getUTCDay(),t=(t.getTime()-Date.UTC(t.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,r()[n+28>>2>>>0]=t},Qa:function(t,n){t=new Date(1e3*qt(t)),r()[n>>2>>>0]=t.getSeconds(),r()[n+4>>2>>>0]=t.getMinutes(),r()[n+8>>2>>>0]=t.getHours(),r()[n+12>>2>>>0]=t.getDate(),r()[n+16>>2>>>0]=t.getMonth(),r()[n+20>>2>>>0]=t.getFullYear()-1900,r()[n+24>>2>>>0]=t.getDay();var e=new Date(t.getFullYear(),0,1),i=(t.getTime()-e.getTime())/864e5|0;r()[n+28>>2>>>0]=i,r()[n+36>>2>>>0]=-60*t.getTimezoneOffset(),i=new Date(t.getFullYear(),6,1).getTimezoneOffset(),t=0|(i!=(e=e.getTimezoneOffset())&&t.getTimezoneOffset()==Math.min(e,i)),r()[n+32>>2>>>0]=t},Ra:function(t){var n=new Date(r()[t+20>>2>>>0]+1900,r()[t+16>>2>>>0],r()[t+12>>2>>>0],r()[t+8>>2>>>0],r()[t+4>>2>>>0],r()[t>>2>>>0],0),e=r()[t+32>>2>>>0],i=n.getTimezoneOffset(),a=new Date(n.getFullYear(),0,1),u=new Date(n.getFullYear(),6,1).getTimezoneOffset(),o=a.getTimezoneOffset(),c=Math.min(o,u);return 0>e?r()[t+32>>2>>>0]=Number(u!=o&&c==i):0<e!=(c==i)&&(u=Math.max(o,u),n.setTime(n.getTime()+6e4*((0<e?c:u)-i))),r()[t+24>>2>>>0]=n.getDay(),e=(n.getTime()-a.getTime())/864e5|0,r()[t+28>>2>>>0]=e,r()[t>>2>>>0]=n.getSeconds(),r()[t+4>>2>>>0]=n.getMinutes(),r()[t+8>>2>>>0]=n.getHours(),r()[t+12>>2>>>0]=n.getDate(),r()[t+16>>2>>>0]=n.getMonth(),n.getTime()/1e3|0},Aa:Bt,Ba:Gt,Sa:function t(n,e,r){t.Ac||(t.Ac=!0,Nt(n,e,r))},y:function(){rt(\"\")},U:function(){if(!v&&!_){var t=\"Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread\";gt||(gt={}),gt[t]||(gt[t]=1,v&&(t=\"warning: \"+t),x(t))}},ra:function(){return 4294901760},B:_t,Ia:function(t,n,r){e().copyWithin(t>>>0,n>>>0,n+r>>>0)},F:function(){return v?require(\"os\").cpus().length:navigator.hardwareConcurrency},Da:function(t,n,e){Xt.length=n,e>>=3;for(var r=0;r<n;r++)Xt[r]=a()[e+r>>>0];return(0>t?ut[-t-1]:ln[t]).apply(null,Xt)},qa:function(t){var n=e().length;if((t>>>=0)<=n||4294901760<t)return!1;for(var r=1;4>=r;r*=2){var i=n*(1+.2/r);i=Math.min(i,t+100663296);var a=Math;i=Math.max(t,i),a=a.min.call(a,4294901760,i+(65536-i%65536)%65536);t:{try{E.grow(a-D.byteLength+65535>>>16),z(E.buffer);var u=1;break t}catch(t){}u=void 0}if(u)return!0}return!1},Na:function(){throw\"unwind\"},Ga:Jt,Ha:Qt,J:lt,I:Kt,S:tn,ga:nn,R:an,d:function(){return un},na:function t(e,r){t.lc||(t.lc=function(){if(\"object\"==typeof crypto&&\"function\"==typeof crypto.getRandomValues){var t=new Uint8Array(1);return()=>(crypto.getRandomValues(t),t[0])}if(v)try{var n=require(\"crypto\");return()=>n.randomBytes(1)[0]}catch(t){}return()=>rt(\"randomDevice\")}());for(var i=0;i<r;i++)n()[e+i>>0>>>0]=t.lc();return 0},ia:function(t,n,e){var r=Mn();try{return bt(t)(n,e)}catch(t){if(Cn(r),t!==t+0)throw t;Sn(1,0)}},ja:function(t,n,e){var r=Mn();try{return bt(t)(n,e)}catch(t){if(Cn(r),t!==t+0)throw t;Sn(1,0)}},K:function(t){var n=Mn();try{return bt(t)()}catch(t){if(Cn(n),t!==t+0)throw t;Sn(1,0)}},f:function(t,n){var e=Mn();try{return bt(t)(n)}catch(t){if(Cn(e),t!==t+0)throw t;Sn(1,0)}},P:function(t,n,e){var r=Mn();try{return bt(t)(n,e)}catch(t){if(Cn(r),t!==t+0)throw t;Sn(1,0)}},Q:function(t,n,e){var r=Mn();try{return bt(t)(n,e)}catch(t){if(Cn(r),t!==t+0)throw t;Sn(1,0)}},k:function(t,n,e){var r=Mn();try{return bt(t)(n,e)}catch(t){if(Cn(r),t!==t+0)throw t;Sn(1,0)}},p:function(t,n,e,r){var i=Mn();try{return bt(t)(n,e,r)}catch(t){if(Cn(i),t!==t+0)throw t;Sn(1,0)}},q:function(t,n,e,r,i){var a=Mn();try{return bt(t)(n,e,r,i)}catch(t){if(Cn(a),t!==t+0)throw t;Sn(1,0)}},N:function(t,n,e,r,i,a){var u=Mn();try{return bt(t)(n,e,r,i,a)}catch(t){if(Cn(u),t!==t+0)throw t;Sn(1,0)}},s:function(t,n,e,r,i,a){var u=Mn();try{return bt(t)(n,e,r,i,a)}catch(t){if(Cn(u),t!==t+0)throw t;Sn(1,0)}},w:function(t,n,e,r,i,a,u){var o=Mn();try{return bt(t)(n,e,r,i,a,u)}catch(t){if(Cn(o),t!==t+0)throw t;Sn(1,0)}},L:function(t,n,e,r,i,a,u,o){var c=Mn();try{return bt(t)(n,e,r,i,a,u,o)}catch(t){if(Cn(c),t!==t+0)throw t;Sn(1,0)}},E:function(t,n,e,r,i,a,u,o,c,f,s,l){var p=Mn();try{return bt(t)(n,e,r,i,a,u,o,c,f,s,l)}catch(t){if(Cn(p),t!==t+0)throw t;Sn(1,0)}},aa:function(t,n,e,r,i,a,u,o){var c=Mn();try{return Pn(t,n,e,r,i,a,u,o)}catch(t){if(Cn(c),t!==t+0)throw t;Sn(1,0)}},_:function(t,n,e,r,i,a,u){var o=Mn();try{return Dn(t,n,e,r,i,a,u)}catch(t){if(Cn(o),t!==t+0)throw t;Sn(1,0)}},Z:function(t,n,e,r,i){var a=Mn();try{return Hn(t,n,e,r,i)}catch(t){if(Cn(a),t!==t+0)throw t;Sn(1,0)}},ca:function(t,n,e,r){var i=Mn();try{return In(t,n,e,r)}catch(t){if(Cn(i),t!==t+0)throw t;Sn(1,0)}},$:function(t){var n=Mn();try{return kn(t)}catch(t){if(Cn(n),t!==t+0)throw t;Sn(1,0)}},ba:function(t,n){var e=Mn();try{return Wn(t,n)}catch(t){if(Cn(e),t!==t+0)throw t;Sn(1,0)}},Y:function(t,n,e){var r=Mn();try{return jn(t,n,e)}catch(t){if(Cn(r),t!==t+0)throw t;Sn(1,0)}},g:function(t){var n=Mn();try{bt(t)()}catch(t){if(Cn(n),t!==t+0)throw t;Sn(1,0)}},r:function(t,n){var e=Mn();try{bt(t)(n)}catch(t){if(Cn(e),t!==t+0)throw t;Sn(1,0)}},i:function(t,n,e){var r=Mn();try{bt(t)(n,e)}catch(t){if(Cn(r),t!==t+0)throw t;Sn(1,0)}},ha:function(t,n,e,r){var i=Mn();try{bt(t)(n,e,r)}catch(t){if(Cn(i),t!==t+0)throw t;Sn(1,0)}},m:function(t,n,e,r){var i=Mn();try{bt(t)(n,e,r)}catch(t){if(Cn(i),t!==t+0)throw t;Sn(1,0)}},v:function(t,n,e,r,i){var a=Mn();try{bt(t)(n,e,r,i)}catch(t){if(Cn(a),t!==t+0)throw t;Sn(1,0)}},u:function(t,n,e,r,i,a){var u=Mn();try{bt(t)(n,e,r,i,a)}catch(t){if(Cn(u),t!==t+0)throw t;Sn(1,0)}},O:function(t,n,e,r,i,a,u){var o=Mn();try{bt(t)(n,e,r,i,a,u)}catch(t){if(Cn(o),t!==t+0)throw t;Sn(1,0)}},A:function(t,n,e,r,i,a,u,o){var c=Mn();try{bt(t)(n,e,r,i,a,u,o)}catch(t){if(Cn(c),t!==t+0)throw t;Sn(1,0)}},ka:function(t,n,e,r,i,a,u,o,c){var f=Mn();try{bt(t)(n,e,r,i,a,u,o,c)}catch(t){if(Cn(f),t!==t+0)throw t;Sn(1,0)}},C:function(t,n,e,r,i,a,u,o,c,f,s){var l=Mn();try{bt(t)(n,e,r,i,a,u,o,c,f,s)}catch(t){if(Cn(l),t!==t+0)throw t;Sn(1,0)}},D:function(t,n,e,r,i,a,u,o,c,f,s,l,p,h,m,d){var y=Mn();try{bt(t)(n,e,r,i,a,u,o,c,f,s,l,p,h,m,d)}catch(t){if(Cn(y),t!==t+0)throw t;Sn(1,0)}},fa:function(t,n,e,r,i,a,u,o){var c=Mn();try{Fn(t,n,e,r,i,a,u,o)}catch(t){if(Cn(c),t!==t+0)throw t;Sn(1,0)}},da:function(t,n,e,r,i,a,u,o,c,f,s,l){var p=Mn();try{Yn(t,n,e,r,i,a,u,o,c,f,s,l)}catch(t){if(Cn(p),t!==t+0)throw t;Sn(1,0)}},ea:function(t,n,e,r,i,a){var u=Mn();try{Un(t,n,e,r,i,a)}catch(t){if(Cn(u),t!==t+0)throw t;Sn(1,0)}},o:function(t){return t},a:E||u.wasmMemory,G:function(t){un=t},la:sn,z:function(t,n,e,r){return sn(t,n,e,r)}};!function(){function t(t,n){u.asm=t.exports,pt.qc.push(u.asm.sb),V=u.asm.ub,X.unshift(u.asm.Va),k=n,w||(tt--,u.monitorRunDependencies&&u.monitorRunDependencies(tt),0==tt&&(null!==nt&&(clearInterval(nt),nt=null),et&&(t=et,et=null,t())))}function n(n){t(n.instance,n.module)}function e(t){return function(){if(!M&&(g||_)){if(\"function\"==typeof fetch&&!K.startsWith(\"file://\"))return fetch(K,{credentials:\"same-origin\"}).then((function(t){if(!t.ok)throw\"failed to load wasm binary file at '\"+K+\"'\";return t.arrayBuffer()})).catch((function(){return at()}));if(s)return new Promise((function(t,n){s(K,(function(n){t(new Uint8Array(n))}),n)}))}return Promise.resolve().then((function(){return at()}))}().then((function(t){return WebAssembly.instantiate(t,r)})).then((function(t){return t})).then(t,(function(t){x(\"failed to asynchronously prepare wasm: \"+t),rt(t)}))}var r={a:pn};if(w||(tt++,u.monitorRunDependencies&&u.monitorRunDependencies(tt)),u.instantiateWasm)try{return u.instantiateWasm(r,t)}catch(t){return x(\"Module.instantiateWasm callback failed with error: \"+t),!1}(M||\"function\"!=typeof WebAssembly.instantiateStreaming||it()||K.startsWith(\"file://\")||v||\"function\"!=typeof fetch?e(n):fetch(K,{credentials:\"same-origin\"}).then((function(t){return WebAssembly.instantiateStreaming(t,r).then(n,(function(t){return x(\"wasm streaming compile failed: \"+t),x(\"falling back to ArrayBuffer instantiation\"),e(n)}))}))).catch(c)}(),u.___wasm_call_ctors=function(){return(u.___wasm_call_ctors=u.asm.Va).apply(null,arguments)},u._OrtInit=function(){return(u._OrtInit=u.asm.Wa).apply(null,arguments)},u._OrtCreateSessionOptions=function(){return(u._OrtCreateSessionOptions=u.asm.Xa).apply(null,arguments)},u._OrtAppendExecutionProvider=function(){return(u._OrtAppendExecutionProvider=u.asm.Ya).apply(null,arguments)},u._OrtAddSessionConfigEntry=function(){return(u._OrtAddSessionConfigEntry=u.asm.Za).apply(null,arguments)},u._OrtReleaseSessionOptions=function(){return(u._OrtReleaseSessionOptions=u.asm._a).apply(null,arguments)},u._OrtCreateSession=function(){return(u._OrtCreateSession=u.asm.$a).apply(null,arguments)},u._OrtReleaseSession=function(){return(u._OrtReleaseSession=u.asm.ab).apply(null,arguments)},u._OrtGetInputCount=function(){return(u._OrtGetInputCount=u.asm.bb).apply(null,arguments)},u._OrtGetOutputCount=function(){return(u._OrtGetOutputCount=u.asm.cb).apply(null,arguments)},u._OrtGetInputName=function(){return(u._OrtGetInputName=u.asm.db).apply(null,arguments)},u._OrtGetOutputName=function(){return(u._OrtGetOutputName=u.asm.eb).apply(null,arguments)},u._OrtFree=function(){return(u._OrtFree=u.asm.fb).apply(null,arguments)},u._OrtCreateTensor=function(){return(u._OrtCreateTensor=u.asm.gb).apply(null,arguments)},u._OrtGetTensorData=function(){return(u._OrtGetTensorData=u.asm.hb).apply(null,arguments)},u._OrtReleaseTensor=function(){return(u._OrtReleaseTensor=u.asm.ib).apply(null,arguments)},u._OrtCreateRunOptions=function(){return(u._OrtCreateRunOptions=u.asm.jb).apply(null,arguments)},u._OrtAddRunConfigEntry=function(){return(u._OrtAddRunConfigEntry=u.asm.kb).apply(null,arguments)},u._OrtReleaseRunOptions=function(){return(u._OrtReleaseRunOptions=u.asm.lb).apply(null,arguments)},u._OrtRun=function(){return(u._OrtRun=u.asm.mb).apply(null,arguments)},u._OrtEndProfiling=function(){return(u._OrtEndProfiling=u.asm.nb).apply(null,arguments)};var hn=u._pthread_self=function(){return(hn=u._pthread_self=u.asm.ob).apply(null,arguments)},mn=u._malloc=function(){return(mn=u._malloc=u.asm.pb).apply(null,arguments)},dn=u._free=function(){return(dn=u._free=u.asm.qb).apply(null,arguments)},yn=u._fflush=function(){return(yn=u._fflush=u.asm.rb).apply(null,arguments)};u.__emscripten_tls_init=function(){return(u.__emscripten_tls_init=u.asm.sb).apply(null,arguments)};var bn=u.___funcs_on_exit=function(){return(bn=u.___funcs_on_exit=u.asm.tb).apply(null,arguments)},gn=u.__emscripten_thread_init=function(){return(gn=u.__emscripten_thread_init=u.asm.vb).apply(null,arguments)};u.__emscripten_thread_crashed=function(){return(u.__emscripten_thread_crashed=u.asm.wb).apply(null,arguments)};var _n,vn=u._emscripten_run_in_main_runtime_thread_js=function(){return(vn=u._emscripten_run_in_main_runtime_thread_js=u.asm.xb).apply(null,arguments)},wn=u.__emscripten_proxy_execute_task_queue=function(){return(wn=u.__emscripten_proxy_execute_task_queue=u.asm.yb).apply(null,arguments)},Tn=u.__emscripten_thread_free_data=function(){return(Tn=u.__emscripten_thread_free_data=u.asm.zb).apply(null,arguments)},On=u.__emscripten_thread_exit=function(){return(On=u.__emscripten_thread_exit=u.asm.Ab).apply(null,arguments)},Sn=u._setThrew=function(){return(Sn=u._setThrew=u.asm.Bb).apply(null,arguments)},An=u._emscripten_stack_set_limits=function(){return(An=u._emscripten_stack_set_limits=u.asm.Cb).apply(null,arguments)},Mn=u.stackSave=function(){return(Mn=u.stackSave=u.asm.Db).apply(null,arguments)},Cn=u.stackRestore=function(){return(Cn=u.stackRestore=u.asm.Eb).apply(null,arguments)},xn=u.stackAlloc=function(){return(xn=u.stackAlloc=u.asm.Fb).apply(null,arguments)},Rn=u.___cxa_can_catch=function(){return(Rn=u.___cxa_can_catch=u.asm.Gb).apply(null,arguments)},En=u.___cxa_is_pointer_type=function(){return(En=u.___cxa_is_pointer_type=u.asm.Hb).apply(null,arguments)},kn=u.dynCall_j=function(){return(kn=u.dynCall_j=u.asm.Ib).apply(null,arguments)},Dn=u.dynCall_iiiiij=function(){return(Dn=u.dynCall_iiiiij=u.asm.Jb).apply(null,arguments)},jn=u.dynCall_jii=function(){return(jn=u.dynCall_jii=u.asm.Kb).apply(null,arguments)},Fn=u.dynCall_viiiiij=function(){return(Fn=u.dynCall_viiiiij=u.asm.Lb).apply(null,arguments)},Un=u.dynCall_vjji=function(){return(Un=u.dynCall_vjji=u.asm.Mb).apply(null,arguments)},Yn=u.dynCall_viiijjjii=function(){return(Yn=u.dynCall_viiijjjii=u.asm.Nb).apply(null,arguments)},In=u.dynCall_iij=function(){return(In=u.dynCall_iij=u.asm.Ob).apply(null,arguments)},Wn=u.dynCall_ji=function(){return(Wn=u.dynCall_ji=u.asm.Pb).apply(null,arguments)},Pn=u.dynCall_iiiiiij=function(){return(Pn=u.dynCall_iiiiiij=u.asm.Qb).apply(null,arguments)},Hn=u.dynCall_iiij=function(){return(Hn=u.dynCall_iiij=u.asm.Rb).apply(null,arguments)};function qn(){function t(){if(!_n&&(_n=!0,u.calledRun=!0,!W)&&(w||ht(X),o(u),u.onRuntimeInitialized&&u.onRuntimeInitialized(),!w)){if(u.postRun)for(\"function\"==typeof u.postRun&&(u.postRun=[u.postRun]);u.postRun.length;){var t=u.postRun.shift();$.unshift(t)}ht($)}}if(!(0<tt))if(w)o(u),w||ht(X),postMessage({cmd:\"loaded\"});else{if(u.preRun)for(\"function\"==typeof u.preRun&&(u.preRun=[u.preRun]);u.preRun.length;)Q();ht(L),0<tt||(u.setStatus?(u.setStatus(\"Running...\"),setTimeout((function(){setTimeout((function(){u.setStatus(\"\")}),1),t()}),1)):t())}}if(u.UTF8ToString=q,u.stringToUTF8=function(t,n,r){return B(t,e(),n,r)},u.lengthBytesUTF8=G,u.keepRuntimeAlive=J,u.wasmMemory=E,u.stackSave=Mn,u.stackRestore=Cn,u.stackAlloc=xn,u.ExitStatus=ot,u.PThread=pt,et=function t(){_n||qn(),_n||(et=t)},u.preInit)for(\"function\"==typeof u.preInit&&(u.preInit=[u.preInit]);0<u.preInit.length;)u.preInit.pop()();return qn(),t.ready});\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t:\"function\"==typeof define&&define.amd?define([],(function(){return t})):\"object\"==typeof exports&&(exports.ortWasmThreaded=t);\n","\r\nvar ortWasm = (() => {\r\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\r\n  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;\r\n  return (\r\nfunction(ortWasm) {\r\n  ortWasm = ortWasm || {};\r\n\r\n\r\nvar d;d||(d=typeof ortWasm !== 'undefined' ? ortWasm : {});var aa,ba;d.ready=new Promise(function(a,b){aa=a;ba=b});var ca=Object.assign({},d),da=\"./this.program\",ea=(a,b)=>{throw b;},fa=\"object\"==typeof window,m=\"function\"==typeof importScripts,p=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,q=\"\",ha,r,v,fs,y,ia;\r\nif(p)q=m?require(\"path\").dirname(q)+\"/\":__dirname+\"/\",ia=()=>{y||(fs=require(\"fs\"),y=require(\"path\"))},ha=function(a,b){ia();a=y.normalize(a);return fs.readFileSync(a,b?void 0:\"utf8\")},v=a=>{a=ha(a,!0);a.buffer||(a=new Uint8Array(a));return a},r=(a,b,c)=>{ia();a=y.normalize(a);fs.readFile(a,function(e,f){e?c(e):b(f.buffer)})},1<process.argv.length&&(da=process.argv[1].replace(/\\\\/g,\"/\")),process.argv.slice(2),process.on(\"uncaughtException\",function(a){if(!(a instanceof ja))throw a;}),process.on(\"unhandledRejection\",\r\nfunction(a){throw a;}),ea=(a,b)=>{if(noExitRuntime||0<ka)throw process.exitCode=a,b;b instanceof ja||z(\"exiting due to exception: \"+b);process.exit(a)},d.inspect=function(){return\"[Emscripten Module object]\"};else if(fa||m)m?q=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(q=document.currentScript.src),_scriptDir&&(q=_scriptDir),0!==q.indexOf(\"blob:\")?q=q.substr(0,q.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):q=\"\",ha=a=>{var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.send(null);\r\nreturn b.responseText},m&&(v=a=>{var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.responseType=\"arraybuffer\";b.send(null);return new Uint8Array(b.response)}),r=(a,b,c)=>{var e=new XMLHttpRequest;e.open(\"GET\",a,!0);e.responseType=\"arraybuffer\";e.onload=()=>{200==e.status||0==e.status&&e.response?b(e.response):c()};e.onerror=c;e.send(null)};var la=d.print||console.log.bind(console),z=d.printErr||console.warn.bind(console);Object.assign(d,ca);ca=null;d.thisProgram&&(da=d.thisProgram);d.quit&&(ea=d.quit);\r\nvar A;d.wasmBinary&&(A=d.wasmBinary);var noExitRuntime=d.noExitRuntime||!1;\"object\"!=typeof WebAssembly&&B(\"no native wasm support detected\");var ma,D=!1,na=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;\r\nfunction oa(a,b,c){b>>>=0;var e=b+c;for(c=b;a[c]&&!(c>=e);)++c;if(16<c-b&&a.buffer&&na)return na.decode(a.subarray(b,c));for(e=\"\";b<c;){var f=a[b++];if(f&128){var h=a[b++]&63;if(192==(f&224))e+=String.fromCharCode((f&31)<<6|h);else{var k=a[b++]&63;f=224==(f&240)?(f&15)<<12|h<<6|k:(f&7)<<18|h<<12|k<<6|a[b++]&63;65536>f?e+=String.fromCharCode(f):(f-=65536,e+=String.fromCharCode(55296|f>>10,56320|f&1023))}}else e+=String.fromCharCode(f)}return e}function pa(a,b){return(a>>>=0)?oa(G,a,b):\"\"}\r\nfunction qa(a,b,c,e){c>>>=0;if(!(0<e))return 0;var f=c;e=c+e-1;for(var h=0;h<a.length;++h){var k=a.charCodeAt(h);if(55296<=k&&57343>=k){var l=a.charCodeAt(++h);k=65536+((k&1023)<<10)|l&1023}if(127>=k){if(c>=e)break;b[c++>>>0]=k}else{if(2047>=k){if(c+1>=e)break;b[c++>>>0]=192|k>>6}else{if(65535>=k){if(c+2>=e)break;b[c++>>>0]=224|k>>12}else{if(c+3>=e)break;b[c++>>>0]=240|k>>18;b[c++>>>0]=128|k>>12&63}b[c++>>>0]=128|k>>6&63}b[c++>>>0]=128|k&63}}b[c>>>0]=0;return c-f}\r\nfunction ra(a){for(var b=0,c=0;c<a.length;++c){var e=a.charCodeAt(c);127>=e?b++:2047>=e?b+=2:55296<=e&&57343>=e?(b+=4,++c):b+=3}return b}var sa,H,G,I,J;function ta(){var a=ma.buffer;sa=a;d.HEAP8=H=new Int8Array(a);d.HEAP16=new Int16Array(a);d.HEAP32=I=new Int32Array(a);d.HEAPU8=G=new Uint8Array(a);d.HEAPU16=new Uint16Array(a);d.HEAPU32=J=new Uint32Array(a);d.HEAPF32=new Float32Array(a);d.HEAPF64=new Float64Array(a)}var ua,va=[],wa=[],xa=[],ya=[],ka=0;\r\nfunction za(){var a=d.preRun.shift();va.unshift(a)}var K=0,Aa=null,L=null;function B(a){if(d.onAbort)d.onAbort(a);a=\"Aborted(\"+a+\")\";z(a);D=!0;a=new WebAssembly.RuntimeError(a+\". Build with -sASSERTIONS for more info.\");ba(a);throw a;}function Ba(){return N.startsWith(\"data:application/octet-stream;base64,\")}var N;N=\"ort-wasm.wasm\";if(!Ba()){var Ca=N;N=d.locateFile?d.locateFile(Ca,q):q+Ca}\r\nfunction Da(){var a=N;try{if(a==N&&A)return new Uint8Array(A);if(v)return v(a);throw\"both async and sync fetching of the wasm failed\";}catch(b){B(b)}}\r\nfunction Ea(){if(!A&&(fa||m)){if(\"function\"==typeof fetch&&!N.startsWith(\"file://\"))return fetch(N,{credentials:\"same-origin\"}).then(function(a){if(!a.ok)throw\"failed to load wasm binary file at '\"+N+\"'\";return a.arrayBuffer()}).catch(function(){return Da()});if(r)return new Promise(function(a,b){r(N,function(c){a(new Uint8Array(c))},b)})}return Promise.resolve().then(function(){return Da()})}function ja(a){this.name=\"ExitStatus\";this.message=\"Program terminated with exit(\"+a+\")\";this.status=a}\r\nfunction O(a){for(;0<a.length;)a.shift()(d)}var P=[],Q=0,R=0;\r\nfunction S(a){this.Db=a;this.zb=a-24;this.Ub=function(b){J[this.zb+4>>2>>>0]=b};this.Eb=function(){return J[this.zb+4>>2>>>0]};this.Sb=function(b){J[this.zb+8>>2>>>0]=b};this.Wb=function(){return J[this.zb+8>>2>>>0]};this.Tb=function(){I[this.zb>>2>>>0]=0};this.Ib=function(b){H[this.zb+12>>0>>>0]=b?1:0};this.Pb=function(){return 0!=H[this.zb+12>>0>>>0]};this.Jb=function(b){H[this.zb+13>>0>>>0]=b?1:0};this.Lb=function(){return 0!=H[this.zb+13>>0>>>0]};this.Rb=function(b,c){this.Fb(0);this.Ub(b);this.Sb(c);\r\nthis.Tb();this.Ib(!1);this.Jb(!1)};this.Nb=function(){I[this.zb>>2>>>0]+=1};this.Xb=function(){var b=I[this.zb>>2>>>0];I[this.zb>>2>>>0]=b-1;return 1===b};this.Fb=function(b){J[this.zb+16>>2>>>0]=b};this.Ob=function(){return J[this.zb+16>>2>>>0]};this.Qb=function(){if(Fa(this.Eb()))return J[this.Db>>2>>>0];var b=this.Ob();return 0!==b?b:this.Db}}function Ga(a){return Ha((new S(a)).zb)}var T=[];function U(a){var b=T[a];b||(a>=T.length&&(T.length=a+1),T[a]=b=ua.get(a));return b}\r\nfunction Ia(a){var b=ra(a)+1,c=Ja(b);c&&qa(a,H,c,b);return c}function Ka(a,b,c){function e(n){return(n=n.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?n[1]:\"GMT\"}var f=(new Date).getFullYear(),h=new Date(f,0,1),k=new Date(f,6,1);f=h.getTimezoneOffset();var l=k.getTimezoneOffset();I[a>>2>>>0]=60*Math.max(f,l);I[b>>2>>>0]=Number(f!=l);a=e(h);b=e(k);a=Ia(a);b=Ia(b);l<f?(J[c>>2>>>0]=a,J[c+4>>2>>>0]=b):(J[c>>2>>>0]=b,J[c+4>>2>>>0]=a)}function La(a,b,c){La.Vb||(La.Vb=!0,Ka(a,b,c))}var Ma={};\r\nfunction Na(){if(!Oa){var a={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:da||\"./this.program\"},b;for(b in Ma)void 0===Ma[b]?delete a[b]:a[b]=Ma[b];var c=[];for(b in a)c.push(b+\"=\"+a[b]);Oa=c}return Oa}var Oa,Pa=[null,[],[]];function Qa(a,b){var c=Pa[a];0===b||10===b?((1===a?la:z)(oa(c,0)),c.length=0):c.push(b)}var V=0;\r\nfunction Ra(){if(\"object\"==typeof crypto&&\"function\"==typeof crypto.getRandomValues){var a=new Uint8Array(1);return()=>{crypto.getRandomValues(a);return a[0]}}if(p)try{var b=require(\"crypto\");return()=>b.randomBytes(1)[0]}catch(c){}return()=>B(\"randomDevice\")}function W(a,b){W.Mb||(W.Mb=Ra());for(var c=0;c<b;c++)H[a+c>>0>>>0]=W.Mb();return 0}function Sa(a){return 0===a%4&&(0!==a%100||0===a%400)}var Ta=[31,29,31,30,31,30,31,31,30,31,30,31],Ua=[31,28,31,30,31,30,31,31,30,31,30,31];\r\nfunction Va(a){var b=Array(ra(a)+1);qa(a,b,0,b.length);return b}\r\nfunction Wa(a,b,c,e){function f(g,u,w){for(g=\"number\"==typeof g?g.toString():g||\"\";g.length<u;)g=w[0]+g;return g}function h(g,u){return f(g,u,\"0\")}function k(g,u){function w(M){return 0>M?-1:0<M?1:0}var F;0===(F=w(g.getFullYear()-u.getFullYear()))&&0===(F=w(g.getMonth()-u.getMonth()))&&(F=w(g.getDate()-u.getDate()));return F}function l(g){switch(g.getDay()){case 0:return new Date(g.getFullYear()-1,11,29);case 1:return g;case 2:return new Date(g.getFullYear(),0,3);case 3:return new Date(g.getFullYear(),\r\n0,2);case 4:return new Date(g.getFullYear(),0,1);case 5:return new Date(g.getFullYear()-1,11,31);case 6:return new Date(g.getFullYear()-1,11,30)}}function n(g){var u=g.Bb;for(g=new Date((new Date(g.Cb+1900,0,1)).getTime());0<u;){var w=g.getMonth(),F=(Sa(g.getFullYear())?Ta:Ua)[w];if(u>F-g.getDate())u-=F-g.getDate()+1,g.setDate(1),11>w?g.setMonth(w+1):(g.setMonth(0),g.setFullYear(g.getFullYear()+1));else{g.setDate(g.getDate()+u);break}}w=new Date(g.getFullYear()+1,0,4);u=l(new Date(g.getFullYear(),\r\n0,4));w=l(w);return 0>=k(u,g)?0>=k(w,g)?g.getFullYear()+1:g.getFullYear():g.getFullYear()-1}var t=I[e+40>>2>>>0];e={$b:I[e>>2>>>0],Zb:I[e+4>>2>>>0],Gb:I[e+8>>2>>>0],Kb:I[e+12>>2>>>0],Hb:I[e+16>>2>>>0],Cb:I[e+20>>2>>>0],Ab:I[e+24>>2>>>0],Bb:I[e+28>>2>>>0],bc:I[e+32>>2>>>0],Yb:I[e+36>>2>>>0],ac:t?pa(t):\"\"};c=pa(c);t={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\r\n\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"};for(var x in t)c=c.replace(new RegExp(x,\"g\"),t[x]);var E=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),C=\"January February March April May June July August September October November December\".split(\" \");t={\"%a\":function(g){return E[g.Ab].substring(0,3)},\"%A\":function(g){return E[g.Ab]},\"%b\":function(g){return C[g.Hb].substring(0,\r\n3)},\"%B\":function(g){return C[g.Hb]},\"%C\":function(g){return h((g.Cb+1900)/100|0,2)},\"%d\":function(g){return h(g.Kb,2)},\"%e\":function(g){return f(g.Kb,2,\" \")},\"%g\":function(g){return n(g).toString().substring(2)},\"%G\":function(g){return n(g)},\"%H\":function(g){return h(g.Gb,2)},\"%I\":function(g){g=g.Gb;0==g?g=12:12<g&&(g-=12);return h(g,2)},\"%j\":function(g){for(var u=0,w=0;w<=g.Hb-1;u+=(Sa(g.Cb+1900)?Ta:Ua)[w++]);return h(g.Kb+u,3)},\"%m\":function(g){return h(g.Hb+1,2)},\"%M\":function(g){return h(g.Zb,\r\n2)},\"%n\":function(){return\"\\n\"},\"%p\":function(g){return 0<=g.Gb&&12>g.Gb?\"AM\":\"PM\"},\"%S\":function(g){return h(g.$b,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(g){return g.Ab||7},\"%U\":function(g){return h(Math.floor((g.Bb+7-g.Ab)/7),2)},\"%V\":function(g){var u=Math.floor((g.Bb+7-(g.Ab+6)%7)/7);2>=(g.Ab+371-g.Bb-2)%7&&u++;if(u)53==u&&(w=(g.Ab+371-g.Bb)%7,4==w||3==w&&Sa(g.Cb)||(u=1));else{u=52;var w=(g.Ab+7-g.Bb-1)%7;(4==w||5==w&&Sa(g.Cb%400-1))&&u++}return h(u,2)},\"%w\":function(g){return g.Ab},\"%W\":function(g){return h(Math.floor((g.Bb+\r\n7-(g.Ab+6)%7)/7),2)},\"%y\":function(g){return(g.Cb+1900).toString().substring(2)},\"%Y\":function(g){return g.Cb+1900},\"%z\":function(g){g=g.Yb;var u=0<=g;g=Math.abs(g)/60;return(u?\"+\":\"-\")+String(\"0000\"+(g/60*100+g%60)).slice(-4)},\"%Z\":function(g){return g.ac},\"%%\":function(){return\"%\"}};c=c.replace(/%%/g,\"\\x00\\x00\");for(x in t)c.includes(x)&&(c=c.replace(new RegExp(x,\"g\"),t[x](e)));c=c.replace(/\\0\\0/g,\"%\");x=Va(c);if(x.length>b)return 0;H.set(x,a>>>0);return x.length-1}\r\nvar Jb={a:function(a){return Ja(a+24)+24},m:function(a){a=new S(a);a.Pb()||(a.Ib(!0),Q--);a.Jb(!1);P.push(a);a.Nb();return a.Qb()},ia:function(a){z(\"Unexpected exception thrown, this is not properly supported - aborting\");D=!0;throw a;},w:function(){X(0);var a=P.pop();if(a.Xb()&&!a.Lb()){var b=a.Wb();b&&U(b)(a.Db);Ga(a.Db)}R=0},d:function(){var a=R;if(!a)return V=0;var b=new S(a);b.Fb(a);var c=b.Eb();if(!c)return V=0,a;for(var e=Array.prototype.slice.call(arguments),f=0;f<e.length;f++){var h=e[f];\r\nif(0===h||h===c)break;if(Xa(h,c,b.zb+16))return V=h,a}V=c;return a},k:function(){var a=R;if(!a)return V=0;var b=new S(a);b.Fb(a);var c=b.Eb();if(!c)return V=0,a;for(var e=Array.prototype.slice.call(arguments),f=0;f<e.length;f++){var h=e[f];if(0===h||h===c)break;if(Xa(h,c,b.zb+16))return V=h,a}V=c;return a},g:function(){var a=R;if(!a)return V=0;var b=new S(a);b.Fb(a);var c=b.Eb();if(!c)return V=0,a;for(var e=Array.prototype.slice.call(arguments),f=0;f<e.length;f++){var h=e[f];if(0===h||h===c)break;\r\nif(Xa(h,c,b.zb+16))return V=h,a}V=c;return a},s:Ga,L:function(){var a=P.pop();a||B(\"no exception to throw\");var b=a.Db;a.Lb()||(P.push(a),a.Jb(!0),a.Ib(!1),Q++);R=b;throw b;},b:function(a,b,c){(new S(a)).Rb(b,c);R=a;Q++;throw a;},la:function(){return Q},i:function(a){R||(R=a);throw a;},H:function(){return 0},Ba:function(){},pa:function(){},ra:function(){},ka:function(){return 0},za:function(){},ua:function(){},ya:function(){},R:function(){},qa:function(){},na:function(){},Aa:function(){},oa:function(){},\r\nHa:function(){},Ja:function(){B(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},Ia:function(){B(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},S:function(){return Date.now()},Ca:function(){return!0},Da:function(a,b){a=new Date(1E3*(J[a>>>2]+4294967296*I[a+4>>>2]));I[b>>2>>>0]=a.getUTCSeconds();I[b+4>>2>>>0]=a.getUTCMinutes();I[b+8>>2>>>0]=a.getUTCHours();I[b+12>>2>>>\r\n0]=a.getUTCDate();I[b+16>>2>>>0]=a.getUTCMonth();I[b+20>>2>>>0]=a.getUTCFullYear()-1900;I[b+24>>2>>>0]=a.getUTCDay();I[b+28>>2>>>0]=(a.getTime()-Date.UTC(a.getUTCFullYear(),0,1,0,0,0,0))/864E5|0},Ea:function(a,b){a=new Date(1E3*(J[a>>>2]+4294967296*I[a+4>>>2]));I[b>>2>>>0]=a.getSeconds();I[b+4>>2>>>0]=a.getMinutes();I[b+8>>2>>>0]=a.getHours();I[b+12>>2>>>0]=a.getDate();I[b+16>>2>>>0]=a.getMonth();I[b+20>>2>>>0]=a.getFullYear()-1900;I[b+24>>2>>>0]=a.getDay();var c=new Date(a.getFullYear(),0,1);I[b+\r\n28>>2>>>0]=(a.getTime()-c.getTime())/864E5|0;I[b+36>>2>>>0]=-(60*a.getTimezoneOffset());var e=(new Date(a.getFullYear(),6,1)).getTimezoneOffset();c=c.getTimezoneOffset();I[b+32>>2>>>0]=(e!=c&&a.getTimezoneOffset()==Math.min(c,e))|0},Fa:function(a){var b=new Date(I[a+20>>2>>>0]+1900,I[a+16>>2>>>0],I[a+12>>2>>>0],I[a+8>>2>>>0],I[a+4>>2>>>0],I[a>>2>>>0],0),c=I[a+32>>2>>>0],e=b.getTimezoneOffset(),f=new Date(b.getFullYear(),0,1),h=(new Date(b.getFullYear(),6,1)).getTimezoneOffset(),k=f.getTimezoneOffset(),\r\nl=Math.min(k,h);0>c?I[a+32>>2>>>0]=Number(h!=k&&l==e):0<c!=(l==e)&&(h=Math.max(k,h),b.setTime(b.getTime()+6E4*((0<c?l:h)-e)));I[a+24>>2>>>0]=b.getDay();I[a+28>>2>>>0]=(b.getTime()-f.getTime())/864E5|0;I[a>>2>>>0]=b.getSeconds();I[a+4>>2>>>0]=b.getMinutes();I[a+8>>2>>>0]=b.getHours();I[a+12>>2>>>0]=b.getDate();I[a+16>>2>>>0]=b.getMonth();return b.getTime()/1E3|0},sa:function(){return-52},ta:function(){},Ga:La,B:function(){B(\"\")},ma:function(){return 4294901760},I:p?()=>{var a=process.hrtime();return 1E3*\r\na[0]+a[1]/1E6}:()=>performance.now(),xa:function(a,b,c){G.copyWithin(a>>>0,b>>>0,b+c>>>0)},G:function(a){var b=G.length;a>>>=0;if(4294901760<a)return!1;for(var c=1;4>=c;c*=2){var e=b*(1+.2/c);e=Math.min(e,a+100663296);var f=Math;e=Math.max(a,e);f=f.min.call(f,4294901760,e+(65536-e%65536)%65536);a:{try{ma.grow(f-sa.byteLength+65535>>>16);ta();var h=1;break a}catch(k){}h=void 0}if(h)return!0}return!1},va:function(a,b){var c=0;Na().forEach(function(e,f){var h=b+c;f=J[a+4*f>>2>>>0]=h;for(h=0;h<e.length;++h)H[f++>>\r\n0>>>0]=e.charCodeAt(h);H[f>>0>>>0]=0;c+=e.length+1});return 0},wa:function(a,b){var c=Na();J[a>>2>>>0]=c.length;var e=0;c.forEach(function(f){e+=f.length+1});J[b>>2>>>0]=e;return 0},ba:function(a){noExitRuntime||0<ka||(Ya(),O(xa),Za(0),Pa[1].length&&Qa(1,10),Pa[2].length&&Qa(2,10));if(!(noExitRuntime||0<ka)){if(d.onExit)d.onExit(a);D=!0}ea(a,new ja(a))},E:function(){return 52},Q:function(){return 52},ca:function(){return 70},P:function(a,b,c,e){for(var f=0,h=0;h<c;h++){var k=J[b>>2>>>0],l=J[b+4>>\r\n2>>>0];b+=8;for(var n=0;n<l;n++)Qa(a,G[k+n>>>0]);f+=l}J[e>>2>>>0]=f;return 0},c:function(){return V},ja:W,ea:$a,fa:ab,J:bb,e:cb,N:db,O:eb,j:fb,o:gb,p:hb,M:ib,r:jb,v:kb,K:lb,D:mb,X:nb,V:ob,U:pb,Z:qb,W:rb,Y:sb,T:tb,f:ub,q:vb,h:wb,da:xb,l:yb,t:zb,u:Ab,x:Bb,z:Cb,ga:Db,A:Eb,C:Fb,aa:Gb,_:Hb,$:Ib,n:function(a){return a},F:function(a){V=a},ha:Wa,y:function(a,b,c,e){return Wa(a,b,c,e)}};\r\n(function(){function a(f){d.asm=f.exports;ma=d.asm.Ka;ta();ua=d.asm.ib;wa.unshift(d.asm.La);K--;d.monitorRunDependencies&&d.monitorRunDependencies(K);0==K&&(null!==Aa&&(clearInterval(Aa),Aa=null),L&&(f=L,L=null,f()))}function b(f){a(f.instance)}function c(f){return Ea().then(function(h){return WebAssembly.instantiate(h,e)}).then(function(h){return h}).then(f,function(h){z(\"failed to asynchronously prepare wasm: \"+h);B(h)})}var e={a:Jb};K++;d.monitorRunDependencies&&d.monitorRunDependencies(K);if(d.instantiateWasm)try{return d.instantiateWasm(e,\r\na)}catch(f){return z(\"Module.instantiateWasm callback failed with error: \"+f),!1}(function(){return A||\"function\"!=typeof WebAssembly.instantiateStreaming||Ba()||N.startsWith(\"file://\")||p||\"function\"!=typeof fetch?c(b):fetch(N,{credentials:\"same-origin\"}).then(function(f){return WebAssembly.instantiateStreaming(f,e).then(b,function(h){z(\"wasm streaming compile failed: \"+h);z(\"falling back to ArrayBuffer instantiation\");return c(b)})})})().catch(ba);return{}})();\r\nd.___wasm_call_ctors=function(){return(d.___wasm_call_ctors=d.asm.La).apply(null,arguments)};d._OrtInit=function(){return(d._OrtInit=d.asm.Ma).apply(null,arguments)};d._OrtCreateSessionOptions=function(){return(d._OrtCreateSessionOptions=d.asm.Na).apply(null,arguments)};d._OrtAppendExecutionProvider=function(){return(d._OrtAppendExecutionProvider=d.asm.Oa).apply(null,arguments)};d._OrtAddSessionConfigEntry=function(){return(d._OrtAddSessionConfigEntry=d.asm.Pa).apply(null,arguments)};\r\nd._OrtReleaseSessionOptions=function(){return(d._OrtReleaseSessionOptions=d.asm.Qa).apply(null,arguments)};d._OrtCreateSession=function(){return(d._OrtCreateSession=d.asm.Ra).apply(null,arguments)};d._OrtReleaseSession=function(){return(d._OrtReleaseSession=d.asm.Sa).apply(null,arguments)};d._OrtGetInputCount=function(){return(d._OrtGetInputCount=d.asm.Ta).apply(null,arguments)};d._OrtGetOutputCount=function(){return(d._OrtGetOutputCount=d.asm.Ua).apply(null,arguments)};\r\nd._OrtGetInputName=function(){return(d._OrtGetInputName=d.asm.Va).apply(null,arguments)};d._OrtGetOutputName=function(){return(d._OrtGetOutputName=d.asm.Wa).apply(null,arguments)};d._OrtFree=function(){return(d._OrtFree=d.asm.Xa).apply(null,arguments)};d._OrtCreateTensor=function(){return(d._OrtCreateTensor=d.asm.Ya).apply(null,arguments)};d._OrtGetTensorData=function(){return(d._OrtGetTensorData=d.asm.Za).apply(null,arguments)};\r\nd._OrtReleaseTensor=function(){return(d._OrtReleaseTensor=d.asm._a).apply(null,arguments)};d._OrtCreateRunOptions=function(){return(d._OrtCreateRunOptions=d.asm.$a).apply(null,arguments)};d._OrtAddRunConfigEntry=function(){return(d._OrtAddRunConfigEntry=d.asm.ab).apply(null,arguments)};d._OrtReleaseRunOptions=function(){return(d._OrtReleaseRunOptions=d.asm.bb).apply(null,arguments)};d._OrtRun=function(){return(d._OrtRun=d.asm.cb).apply(null,arguments)};\r\nd._OrtEndProfiling=function(){return(d._OrtEndProfiling=d.asm.db).apply(null,arguments)};\r\nvar Ja=d._malloc=function(){return(Ja=d._malloc=d.asm.eb).apply(null,arguments)},Ha=d._free=function(){return(Ha=d._free=d.asm.fb).apply(null,arguments)},Za=d._fflush=function(){return(Za=d._fflush=d.asm.gb).apply(null,arguments)},Ya=d.___funcs_on_exit=function(){return(Ya=d.___funcs_on_exit=d.asm.hb).apply(null,arguments)},X=d._setThrew=function(){return(X=d._setThrew=d.asm.jb).apply(null,arguments)},Y=d.stackSave=function(){return(Y=d.stackSave=d.asm.kb).apply(null,arguments)},Z=d.stackRestore=\r\nfunction(){return(Z=d.stackRestore=d.asm.lb).apply(null,arguments)},Kb=d.stackAlloc=function(){return(Kb=d.stackAlloc=d.asm.mb).apply(null,arguments)},Xa=d.___cxa_can_catch=function(){return(Xa=d.___cxa_can_catch=d.asm.nb).apply(null,arguments)},Fa=d.___cxa_is_pointer_type=function(){return(Fa=d.___cxa_is_pointer_type=d.asm.ob).apply(null,arguments)},Lb=d.dynCall_j=function(){return(Lb=d.dynCall_j=d.asm.pb).apply(null,arguments)},Mb=d.dynCall_iiiiij=function(){return(Mb=d.dynCall_iiiiij=d.asm.qb).apply(null,\r\narguments)},Nb=d.dynCall_jii=function(){return(Nb=d.dynCall_jii=d.asm.rb).apply(null,arguments)},Ob=d.dynCall_viiiiij=function(){return(Ob=d.dynCall_viiiiij=d.asm.sb).apply(null,arguments)},Pb=d.dynCall_vjji=function(){return(Pb=d.dynCall_vjji=d.asm.tb).apply(null,arguments)},Qb=d.dynCall_viiijjjii=function(){return(Qb=d.dynCall_viiijjjii=d.asm.ub).apply(null,arguments)},Rb=d.dynCall_iij=function(){return(Rb=d.dynCall_iij=d.asm.vb).apply(null,arguments)},Sb=d.dynCall_ji=function(){return(Sb=d.dynCall_ji=\r\nd.asm.wb).apply(null,arguments)},Tb=d.dynCall_iiiiiij=function(){return(Tb=d.dynCall_iiiiiij=d.asm.xb).apply(null,arguments)},Ub=d.dynCall_iiij=function(){return(Ub=d.dynCall_iiij=d.asm.yb).apply(null,arguments)};function cb(a,b){var c=Y();try{return U(a)(b)}catch(e){Z(c);if(e!==e+0)throw e;X(1,0)}}function vb(a,b){var c=Y();try{U(a)(b)}catch(e){Z(c);if(e!==e+0)throw e;X(1,0)}}function wb(a,b,c){var e=Y();try{U(a)(b,c)}catch(f){Z(e);if(f!==f+0)throw f;X(1,0)}}\r\nfunction fb(a,b,c){var e=Y();try{return U(a)(b,c)}catch(f){Z(e);if(f!==f+0)throw f;X(1,0)}}function gb(a,b,c,e){var f=Y();try{return U(a)(b,c,e)}catch(h){Z(f);if(h!==h+0)throw h;X(1,0)}}function kb(a,b,c,e,f,h,k){var l=Y();try{return U(a)(b,c,e,f,h,k)}catch(n){Z(l);if(n!==n+0)throw n;X(1,0)}}function ub(a){var b=Y();try{U(a)()}catch(c){Z(b);if(c!==c+0)throw c;X(1,0)}}function jb(a,b,c,e,f,h){var k=Y();try{return U(a)(b,c,e,f,h)}catch(l){Z(k);if(l!==l+0)throw l;X(1,0)}}\r\nfunction hb(a,b,c,e,f){var h=Y();try{return U(a)(b,c,e,f)}catch(k){Z(h);if(k!==k+0)throw k;X(1,0)}}function yb(a,b,c,e){var f=Y();try{U(a)(b,c,e)}catch(h){Z(f);if(h!==h+0)throw h;X(1,0)}}function Ab(a,b,c,e,f,h){var k=Y();try{U(a)(b,c,e,f,h)}catch(l){Z(k);if(l!==l+0)throw l;X(1,0)}}function zb(a,b,c,e,f){var h=Y();try{U(a)(b,c,e,f)}catch(k){Z(h);if(k!==k+0)throw k;X(1,0)}}function Bb(a,b,c,e,f,h,k){var l=Y();try{U(a)(b,c,e,f,h,k)}catch(n){Z(l);if(n!==n+0)throw n;X(1,0)}}\r\nfunction Cb(a,b,c,e,f,h,k,l){var n=Y();try{U(a)(b,c,e,f,h,k,l)}catch(t){Z(n);if(t!==t+0)throw t;X(1,0)}}function eb(a,b,c){var e=Y();try{return U(a)(b,c)}catch(f){Z(e);if(f!==f+0)throw f;X(1,0)}}function db(a,b,c){var e=Y();try{return U(a)(b,c)}catch(f){Z(e);if(f!==f+0)throw f;X(1,0)}}function Db(a,b,c,e,f,h,k,l,n){var t=Y();try{U(a)(b,c,e,f,h,k,l,n)}catch(x){Z(t);if(x!==x+0)throw x;X(1,0)}}function ib(a,b,c,e,f,h){var k=Y();try{return U(a)(b,c,e,f,h)}catch(l){Z(k);if(l!==l+0)throw l;X(1,0)}}\r\nfunction lb(a,b,c,e,f,h,k,l){var n=Y();try{return U(a)(b,c,e,f,h,k,l)}catch(t){Z(n);if(t!==t+0)throw t;X(1,0)}}function mb(a,b,c,e,f,h,k,l,n,t,x,E){var C=Y();try{return U(a)(b,c,e,f,h,k,l,n,t,x,E)}catch(g){Z(C);if(g!==g+0)throw g;X(1,0)}}function Eb(a,b,c,e,f,h,k,l,n,t,x){var E=Y();try{U(a)(b,c,e,f,h,k,l,n,t,x)}catch(C){Z(E);if(C!==C+0)throw C;X(1,0)}}function Fb(a,b,c,e,f,h,k,l,n,t,x,E,C,g,u,w){var F=Y();try{U(a)(b,c,e,f,h,k,l,n,t,x,E,C,g,u,w)}catch(M){Z(F);if(M!==M+0)throw M;X(1,0)}}\r\nfunction bb(a){var b=Y();try{return U(a)()}catch(c){Z(b);if(c!==c+0)throw c;X(1,0)}}function ab(a,b,c){var e=Y();try{return U(a)(b,c)}catch(f){Z(e);if(f!==f+0)throw f;X(1,0)}}function $a(a,b,c){var e=Y();try{return U(a)(b,c)}catch(f){Z(e);if(f!==f+0)throw f;X(1,0)}}function xb(a,b,c,e){var f=Y();try{U(a)(b,c,e)}catch(h){Z(f);if(h!==h+0)throw h;X(1,0)}}function Gb(a,b,c,e,f,h,k,l){var n=Y();try{Ob(a,b,c,e,f,h,k,l)}catch(t){Z(n);if(t!==t+0)throw t;X(1,0)}}\r\nfunction Ib(a,b,c,e,f,h){var k=Y();try{Pb(a,b,c,e,f,h)}catch(l){Z(k);if(l!==l+0)throw l;X(1,0)}}function Hb(a,b,c,e,f,h,k,l,n,t,x,E){var C=Y();try{Qb(a,b,c,e,f,h,k,l,n,t,x,E)}catch(g){Z(C);if(g!==g+0)throw g;X(1,0)}}function qb(a,b,c,e){var f=Y();try{return Rb(a,b,c,e)}catch(h){Z(f);if(h!==h+0)throw h;X(1,0)}}function sb(a,b){var c=Y();try{return Sb(a,b)}catch(e){Z(c);if(e!==e+0)throw e;X(1,0)}}\r\nfunction nb(a,b,c,e,f,h,k,l){var n=Y();try{return Tb(a,b,c,e,f,h,k,l)}catch(t){Z(n);if(t!==t+0)throw t;X(1,0)}}function rb(a){var b=Y();try{return Lb(a)}catch(c){Z(b);if(c!==c+0)throw c;X(1,0)}}function ob(a,b,c,e,f,h,k){var l=Y();try{return Mb(a,b,c,e,f,h,k)}catch(n){Z(l);if(n!==n+0)throw n;X(1,0)}}function pb(a,b,c,e,f){var h=Y();try{return Ub(a,b,c,e,f)}catch(k){Z(h);if(k!==k+0)throw k;X(1,0)}}function tb(a,b,c){var e=Y();try{return Nb(a,b,c)}catch(f){Z(e);if(f!==f+0)throw f;X(1,0)}}\r\nd.UTF8ToString=pa;d.stringToUTF8=function(a,b,c){return qa(a,G,b,c)};d.lengthBytesUTF8=ra;d.stackSave=Y;d.stackRestore=Z;d.stackAlloc=Kb;var Vb;L=function Wb(){Vb||Xb();Vb||(L=Wb)};\r\nfunction Xb(){function a(){if(!Vb&&(Vb=!0,d.calledRun=!0,!D)){O(wa);aa(d);if(d.onRuntimeInitialized)d.onRuntimeInitialized();if(d.postRun)for(\"function\"==typeof d.postRun&&(d.postRun=[d.postRun]);d.postRun.length;){var b=d.postRun.shift();ya.unshift(b)}O(ya)}}if(!(0<K)){if(d.preRun)for(\"function\"==typeof d.preRun&&(d.preRun=[d.preRun]);d.preRun.length;)za();O(va);0<K||(d.setStatus?(d.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){d.setStatus(\"\")},1);a()},1)):a())}}\r\nif(d.preInit)for(\"function\"==typeof d.preInit&&(d.preInit=[d.preInit]);0<d.preInit.length;)d.preInit.pop()();Xb();\r\n\r\n\r\n  return ortWasm.ready\r\n}\r\n);\r\n})();\r\nif (typeof exports === 'object' && typeof module === 'object')\r\n  module.exports = ortWasm;\r\nelse if (typeof define === 'function' && define['amd'])\r\n  define([], function() { return ortWasm; });\r\nelse if (typeof exports === 'object')\r\n  exports[\"ortWasm\"] = ortWasm;\r\n","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nexports.__esModule = true;\r\nvar Guid = /** @class */ (function () {\r\n    function Guid(guid) {\r\n        if (!guid) {\r\n            throw new TypeError(\"Invalid argument; `value` has no value.\");\r\n        }\r\n        this.value = Guid.EMPTY;\r\n        if (guid && Guid.isGuid(guid)) {\r\n            this.value = guid;\r\n        }\r\n    }\r\n    Guid.isGuid = function (guid) {\r\n        var value = guid.toString();\r\n        return guid && (guid instanceof Guid || Guid.validator.test(value));\r\n    };\r\n    Guid.create = function () {\r\n        return new Guid([Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\"));\r\n    };\r\n    Guid.createEmpty = function () {\r\n        return new Guid(\"emptyguid\");\r\n    };\r\n    Guid.parse = function (guid) {\r\n        return new Guid(guid);\r\n    };\r\n    Guid.raw = function () {\r\n        return [Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\");\r\n    };\r\n    Guid.gen = function (count) {\r\n        var out = \"\";\r\n        for (var i = 0; i < count; i++) {\r\n            // tslint:disable-next-line:no-bitwise\r\n            out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n        }\r\n        return out;\r\n    };\r\n    Guid.prototype.equals = function (other) {\r\n        // Comparing string `value` against provided `guid` will auto-call\r\n        // toString on `guid` for comparison\r\n        return Guid.isGuid(other) && this.value === other.toString();\r\n    };\r\n    Guid.prototype.isEmpty = function () {\r\n        return this.value === Guid.EMPTY;\r\n    };\r\n    Guid.prototype.toString = function () {\r\n        return this.value;\r\n    };\r\n    Guid.prototype.toJSON = function () {\r\n        return {\r\n            value: this.value\r\n        };\r\n    };\r\n    Guid.validator = new RegExp(\"^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$\", \"i\");\r\n    Guid.EMPTY = \"00000000-0000-0000-0000-000000000000\";\r\n    return Guid;\r\n}());\r\nexports.Guid = Guid;\r\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.onnx = (function() {\n\n    /**\n     * Namespace onnx.\n     * @exports onnx\n     * @namespace\n     */\n    var onnx = {};\n\n    /**\n     * Version enum.\n     * @name onnx.Version\n     * @enum {string}\n     * @property {number} _START_VERSION=0 _START_VERSION value\n     * @property {number} IR_VERSION_2017_10_10=1 IR_VERSION_2017_10_10 value\n     * @property {number} IR_VERSION_2017_10_30=2 IR_VERSION_2017_10_30 value\n     * @property {number} IR_VERSION_2017_11_3=3 IR_VERSION_2017_11_3 value\n     * @property {number} IR_VERSION_2019_1_22=4 IR_VERSION_2019_1_22 value\n     * @property {number} IR_VERSION=5 IR_VERSION value\n     */\n    onnx.Version = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"_START_VERSION\"] = 0;\n        values[valuesById[1] = \"IR_VERSION_2017_10_10\"] = 1;\n        values[valuesById[2] = \"IR_VERSION_2017_10_30\"] = 2;\n        values[valuesById[3] = \"IR_VERSION_2017_11_3\"] = 3;\n        values[valuesById[4] = \"IR_VERSION_2019_1_22\"] = 4;\n        values[valuesById[5] = \"IR_VERSION\"] = 5;\n        return values;\n    })();\n\n    onnx.AttributeProto = (function() {\n\n        /**\n         * Properties of an AttributeProto.\n         * @memberof onnx\n         * @interface IAttributeProto\n         * @property {string|null} [name] AttributeProto name\n         * @property {string|null} [refAttrName] AttributeProto refAttrName\n         * @property {string|null} [docString] AttributeProto docString\n         * @property {onnx.AttributeProto.AttributeType|null} [type] AttributeProto type\n         * @property {number|null} [f] AttributeProto f\n         * @property {number|Long|null} [i] AttributeProto i\n         * @property {Uint8Array|null} [s] AttributeProto s\n         * @property {onnx.ITensorProto|null} [t] AttributeProto t\n         * @property {onnx.IGraphProto|null} [g] AttributeProto g\n         * @property {Array.<number>|null} [floats] AttributeProto floats\n         * @property {Array.<number|Long>|null} [ints] AttributeProto ints\n         * @property {Array.<Uint8Array>|null} [strings] AttributeProto strings\n         * @property {Array.<onnx.ITensorProto>|null} [tensors] AttributeProto tensors\n         * @property {Array.<onnx.IGraphProto>|null} [graphs] AttributeProto graphs\n         */\n\n        /**\n         * Constructs a new AttributeProto.\n         * @memberof onnx\n         * @classdesc Represents an AttributeProto.\n         * @implements IAttributeProto\n         * @constructor\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         */\n        function AttributeProto(properties) {\n            this.floats = [];\n            this.ints = [];\n            this.strings = [];\n            this.tensors = [];\n            this.graphs = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * AttributeProto name.\n         * @member {string} name\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.name = \"\";\n\n        /**\n         * AttributeProto refAttrName.\n         * @member {string} refAttrName\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.refAttrName = \"\";\n\n        /**\n         * AttributeProto docString.\n         * @member {string} docString\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.docString = \"\";\n\n        /**\n         * AttributeProto type.\n         * @member {onnx.AttributeProto.AttributeType} type\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.type = 0;\n\n        /**\n         * AttributeProto f.\n         * @member {number} f\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.f = 0;\n\n        /**\n         * AttributeProto i.\n         * @member {number|Long} i\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.i = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * AttributeProto s.\n         * @member {Uint8Array} s\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.s = $util.newBuffer([]);\n\n        /**\n         * AttributeProto t.\n         * @member {onnx.ITensorProto|null|undefined} t\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.t = null;\n\n        /**\n         * AttributeProto g.\n         * @member {onnx.IGraphProto|null|undefined} g\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.g = null;\n\n        /**\n         * AttributeProto floats.\n         * @member {Array.<number>} floats\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.floats = $util.emptyArray;\n\n        /**\n         * AttributeProto ints.\n         * @member {Array.<number|Long>} ints\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.ints = $util.emptyArray;\n\n        /**\n         * AttributeProto strings.\n         * @member {Array.<Uint8Array>} strings\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.strings = $util.emptyArray;\n\n        /**\n         * AttributeProto tensors.\n         * @member {Array.<onnx.ITensorProto>} tensors\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.tensors = $util.emptyArray;\n\n        /**\n         * AttributeProto graphs.\n         * @member {Array.<onnx.IGraphProto>} graphs\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.graphs = $util.emptyArray;\n\n        /**\n         * Creates a new AttributeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         * @returns {onnx.AttributeProto} AttributeProto instance\n         */\n        AttributeProto.create = function create(properties) {\n            return new AttributeProto(properties);\n        };\n\n        /**\n         * Encodes the specified AttributeProto message. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.f);\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.i);\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.s);\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                $root.onnx.TensorProto.encode(message.t, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                $root.onnx.GraphProto.encode(message.g, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            if (message.floats != null && message.floats.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.floats.length; ++i)\n                    writer.float(message.floats[i]);\n                writer.ldelim();\n            }\n            if (message.ints != null && message.ints.length) {\n                writer.uint32(/* id 8, wireType 2 =*/66).fork();\n                for (var i = 0; i < message.ints.length; ++i)\n                    writer.int64(message.ints[i]);\n                writer.ldelim();\n            }\n            if (message.strings != null && message.strings.length)\n                for (var i = 0; i < message.strings.length; ++i)\n                    writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.strings[i]);\n            if (message.tensors != null && message.tensors.length)\n                for (var i = 0; i < message.tensors.length; ++i)\n                    $root.onnx.TensorProto.encode(message.tensors[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n            if (message.graphs != null && message.graphs.length)\n                for (var i = 0; i < message.graphs.length; ++i)\n                    $root.onnx.GraphProto.encode(message.graphs[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 13, wireType 2 =*/106).string(message.docString);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                writer.uint32(/* id 20, wireType 0 =*/160).int32(message.type);\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                writer.uint32(/* id 21, wireType 2 =*/170).string(message.refAttrName);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified AttributeProto message, length delimited. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.AttributeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 21:\n                    message.refAttrName = reader.string();\n                    break;\n                case 13:\n                    message.docString = reader.string();\n                    break;\n                case 20:\n                    message.type = reader.int32();\n                    break;\n                case 2:\n                    message.f = reader.float();\n                    break;\n                case 3:\n                    message.i = reader.int64();\n                    break;\n                case 4:\n                    message.s = reader.bytes();\n                    break;\n                case 5:\n                    message.t = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.g = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    if (!(message.floats && message.floats.length))\n                        message.floats = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floats.push(reader.float());\n                    } else\n                        message.floats.push(reader.float());\n                    break;\n                case 8:\n                    if (!(message.ints && message.ints.length))\n                        message.ints = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.ints.push(reader.int64());\n                    } else\n                        message.ints.push(reader.int64());\n                    break;\n                case 9:\n                    if (!(message.strings && message.strings.length))\n                        message.strings = [];\n                    message.strings.push(reader.bytes());\n                    break;\n                case 10:\n                    if (!(message.tensors && message.tensors.length))\n                        message.tensors = [];\n                    message.tensors.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 11:\n                    if (!(message.graphs && message.graphs.length))\n                        message.graphs = [];\n                    message.graphs.push($root.onnx.GraphProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an AttributeProto message.\n         * @function verify\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        AttributeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                if (!$util.isString(message.refAttrName))\n                    return \"refAttrName: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                switch (message.type) {\n                default:\n                    return \"type: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                    break;\n                }\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                if (typeof message.f !== \"number\")\n                    return \"f: number expected\";\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (!$util.isInteger(message.i) && !(message.i && $util.isInteger(message.i.low) && $util.isInteger(message.i.high)))\n                    return \"i: integer|Long expected\";\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                if (!(message.s && typeof message.s.length === \"number\" || $util.isString(message.s)))\n                    return \"s: buffer expected\";\n            if (message.t != null && message.hasOwnProperty(\"t\")) {\n                var error = $root.onnx.TensorProto.verify(message.t);\n                if (error)\n                    return \"t.\" + error;\n            }\n            if (message.g != null && message.hasOwnProperty(\"g\")) {\n                var error = $root.onnx.GraphProto.verify(message.g);\n                if (error)\n                    return \"g.\" + error;\n            }\n            if (message.floats != null && message.hasOwnProperty(\"floats\")) {\n                if (!Array.isArray(message.floats))\n                    return \"floats: array expected\";\n                for (var i = 0; i < message.floats.length; ++i)\n                    if (typeof message.floats[i] !== \"number\")\n                        return \"floats: number[] expected\";\n            }\n            if (message.ints != null && message.hasOwnProperty(\"ints\")) {\n                if (!Array.isArray(message.ints))\n                    return \"ints: array expected\";\n                for (var i = 0; i < message.ints.length; ++i)\n                    if (!$util.isInteger(message.ints[i]) && !(message.ints[i] && $util.isInteger(message.ints[i].low) && $util.isInteger(message.ints[i].high)))\n                        return \"ints: integer|Long[] expected\";\n            }\n            if (message.strings != null && message.hasOwnProperty(\"strings\")) {\n                if (!Array.isArray(message.strings))\n                    return \"strings: array expected\";\n                for (var i = 0; i < message.strings.length; ++i)\n                    if (!(message.strings[i] && typeof message.strings[i].length === \"number\" || $util.isString(message.strings[i])))\n                        return \"strings: buffer[] expected\";\n            }\n            if (message.tensors != null && message.hasOwnProperty(\"tensors\")) {\n                if (!Array.isArray(message.tensors))\n                    return \"tensors: array expected\";\n                for (var i = 0; i < message.tensors.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.tensors[i]);\n                    if (error)\n                        return \"tensors.\" + error;\n                }\n            }\n            if (message.graphs != null && message.hasOwnProperty(\"graphs\")) {\n                if (!Array.isArray(message.graphs))\n                    return \"graphs: array expected\";\n                for (var i = 0; i < message.graphs.length; ++i) {\n                    var error = $root.onnx.GraphProto.verify(message.graphs[i]);\n                    if (error)\n                        return \"graphs.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates an AttributeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.AttributeProto} AttributeProto\n         */\n        AttributeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.AttributeProto)\n                return object;\n            var message = new $root.onnx.AttributeProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.refAttrName != null)\n                message.refAttrName = String(object.refAttrName);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            switch (object.type) {\n            case \"UNDEFINED\":\n            case 0:\n                message.type = 0;\n                break;\n            case \"FLOAT\":\n            case 1:\n                message.type = 1;\n                break;\n            case \"INT\":\n            case 2:\n                message.type = 2;\n                break;\n            case \"STRING\":\n            case 3:\n                message.type = 3;\n                break;\n            case \"TENSOR\":\n            case 4:\n                message.type = 4;\n                break;\n            case \"GRAPH\":\n            case 5:\n                message.type = 5;\n                break;\n            case \"FLOATS\":\n            case 6:\n                message.type = 6;\n                break;\n            case \"INTS\":\n            case 7:\n                message.type = 7;\n                break;\n            case \"STRINGS\":\n            case 8:\n                message.type = 8;\n                break;\n            case \"TENSORS\":\n            case 9:\n                message.type = 9;\n                break;\n            case \"GRAPHS\":\n            case 10:\n                message.type = 10;\n                break;\n            }\n            if (object.f != null)\n                message.f = Number(object.f);\n            if (object.i != null)\n                if ($util.Long)\n                    (message.i = $util.Long.fromValue(object.i)).unsigned = false;\n                else if (typeof object.i === \"string\")\n                    message.i = parseInt(object.i, 10);\n                else if (typeof object.i === \"number\")\n                    message.i = object.i;\n                else if (typeof object.i === \"object\")\n                    message.i = new $util.LongBits(object.i.low >>> 0, object.i.high >>> 0).toNumber();\n            if (object.s != null)\n                if (typeof object.s === \"string\")\n                    $util.base64.decode(object.s, message.s = $util.newBuffer($util.base64.length(object.s)), 0);\n                else if (object.s.length)\n                    message.s = object.s;\n            if (object.t != null) {\n                if (typeof object.t !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.t: object expected\");\n                message.t = $root.onnx.TensorProto.fromObject(object.t);\n            }\n            if (object.g != null) {\n                if (typeof object.g !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.g: object expected\");\n                message.g = $root.onnx.GraphProto.fromObject(object.g);\n            }\n            if (object.floats) {\n                if (!Array.isArray(object.floats))\n                    throw TypeError(\".onnx.AttributeProto.floats: array expected\");\n                message.floats = [];\n                for (var i = 0; i < object.floats.length; ++i)\n                    message.floats[i] = Number(object.floats[i]);\n            }\n            if (object.ints) {\n                if (!Array.isArray(object.ints))\n                    throw TypeError(\".onnx.AttributeProto.ints: array expected\");\n                message.ints = [];\n                for (var i = 0; i < object.ints.length; ++i)\n                    if ($util.Long)\n                        (message.ints[i] = $util.Long.fromValue(object.ints[i])).unsigned = false;\n                    else if (typeof object.ints[i] === \"string\")\n                        message.ints[i] = parseInt(object.ints[i], 10);\n                    else if (typeof object.ints[i] === \"number\")\n                        message.ints[i] = object.ints[i];\n                    else if (typeof object.ints[i] === \"object\")\n                        message.ints[i] = new $util.LongBits(object.ints[i].low >>> 0, object.ints[i].high >>> 0).toNumber();\n            }\n            if (object.strings) {\n                if (!Array.isArray(object.strings))\n                    throw TypeError(\".onnx.AttributeProto.strings: array expected\");\n                message.strings = [];\n                for (var i = 0; i < object.strings.length; ++i)\n                    if (typeof object.strings[i] === \"string\")\n                        $util.base64.decode(object.strings[i], message.strings[i] = $util.newBuffer($util.base64.length(object.strings[i])), 0);\n                    else if (object.strings[i].length)\n                        message.strings[i] = object.strings[i];\n            }\n            if (object.tensors) {\n                if (!Array.isArray(object.tensors))\n                    throw TypeError(\".onnx.AttributeProto.tensors: array expected\");\n                message.tensors = [];\n                for (var i = 0; i < object.tensors.length; ++i) {\n                    if (typeof object.tensors[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.tensors: object expected\");\n                    message.tensors[i] = $root.onnx.TensorProto.fromObject(object.tensors[i]);\n                }\n            }\n            if (object.graphs) {\n                if (!Array.isArray(object.graphs))\n                    throw TypeError(\".onnx.AttributeProto.graphs: array expected\");\n                message.graphs = [];\n                for (var i = 0; i < object.graphs.length; ++i) {\n                    if (typeof object.graphs[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.graphs: object expected\");\n                    message.graphs[i] = $root.onnx.GraphProto.fromObject(object.graphs[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an AttributeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.AttributeProto} message AttributeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        AttributeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.floats = [];\n                object.ints = [];\n                object.strings = [];\n                object.tensors = [];\n                object.graphs = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.f = 0;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.i = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.i = options.longs === String ? \"0\" : 0;\n                if (options.bytes === String)\n                    object.s = \"\";\n                else {\n                    object.s = [];\n                    if (options.bytes !== Array)\n                        object.s = $util.newBuffer(object.s);\n                }\n                object.t = null;\n                object.g = null;\n                object.docString = \"\";\n                object.type = options.enums === String ? \"UNDEFINED\" : 0;\n                object.refAttrName = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                object.f = options.json && !isFinite(message.f) ? String(message.f) : message.f;\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (typeof message.i === \"number\")\n                    object.i = options.longs === String ? String(message.i) : message.i;\n                else\n                    object.i = options.longs === String ? $util.Long.prototype.toString.call(message.i) : options.longs === Number ? new $util.LongBits(message.i.low >>> 0, message.i.high >>> 0).toNumber() : message.i;\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                object.s = options.bytes === String ? $util.base64.encode(message.s, 0, message.s.length) : options.bytes === Array ? Array.prototype.slice.call(message.s) : message.s;\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                object.t = $root.onnx.TensorProto.toObject(message.t, options);\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                object.g = $root.onnx.GraphProto.toObject(message.g, options);\n            if (message.floats && message.floats.length) {\n                object.floats = [];\n                for (var j = 0; j < message.floats.length; ++j)\n                    object.floats[j] = options.json && !isFinite(message.floats[j]) ? String(message.floats[j]) : message.floats[j];\n            }\n            if (message.ints && message.ints.length) {\n                object.ints = [];\n                for (var j = 0; j < message.ints.length; ++j)\n                    if (typeof message.ints[j] === \"number\")\n                        object.ints[j] = options.longs === String ? String(message.ints[j]) : message.ints[j];\n                    else\n                        object.ints[j] = options.longs === String ? $util.Long.prototype.toString.call(message.ints[j]) : options.longs === Number ? new $util.LongBits(message.ints[j].low >>> 0, message.ints[j].high >>> 0).toNumber() : message.ints[j];\n            }\n            if (message.strings && message.strings.length) {\n                object.strings = [];\n                for (var j = 0; j < message.strings.length; ++j)\n                    object.strings[j] = options.bytes === String ? $util.base64.encode(message.strings[j], 0, message.strings[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.strings[j]) : message.strings[j];\n            }\n            if (message.tensors && message.tensors.length) {\n                object.tensors = [];\n                for (var j = 0; j < message.tensors.length; ++j)\n                    object.tensors[j] = $root.onnx.TensorProto.toObject(message.tensors[j], options);\n            }\n            if (message.graphs && message.graphs.length) {\n                object.graphs = [];\n                for (var j = 0; j < message.graphs.length; ++j)\n                    object.graphs[j] = $root.onnx.GraphProto.toObject(message.graphs[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = options.enums === String ? $root.onnx.AttributeProto.AttributeType[message.type] : message.type;\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                object.refAttrName = message.refAttrName;\n            return object;\n        };\n\n        /**\n         * Converts this AttributeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.AttributeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        AttributeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * AttributeType enum.\n         * @name onnx.AttributeProto.AttributeType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} INT=2 INT value\n         * @property {number} STRING=3 STRING value\n         * @property {number} TENSOR=4 TENSOR value\n         * @property {number} GRAPH=5 GRAPH value\n         * @property {number} FLOATS=6 FLOATS value\n         * @property {number} INTS=7 INTS value\n         * @property {number} STRINGS=8 STRINGS value\n         * @property {number} TENSORS=9 TENSORS value\n         * @property {number} GRAPHS=10 GRAPHS value\n         */\n        AttributeProto.AttributeType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"INT\"] = 2;\n            values[valuesById[3] = \"STRING\"] = 3;\n            values[valuesById[4] = \"TENSOR\"] = 4;\n            values[valuesById[5] = \"GRAPH\"] = 5;\n            values[valuesById[6] = \"FLOATS\"] = 6;\n            values[valuesById[7] = \"INTS\"] = 7;\n            values[valuesById[8] = \"STRINGS\"] = 8;\n            values[valuesById[9] = \"TENSORS\"] = 9;\n            values[valuesById[10] = \"GRAPHS\"] = 10;\n            return values;\n        })();\n\n        return AttributeProto;\n    })();\n\n    onnx.ValueInfoProto = (function() {\n\n        /**\n         * Properties of a ValueInfoProto.\n         * @memberof onnx\n         * @interface IValueInfoProto\n         * @property {string|null} [name] ValueInfoProto name\n         * @property {onnx.ITypeProto|null} [type] ValueInfoProto type\n         * @property {string|null} [docString] ValueInfoProto docString\n         */\n\n        /**\n         * Constructs a new ValueInfoProto.\n         * @memberof onnx\n         * @classdesc Represents a ValueInfoProto.\n         * @implements IValueInfoProto\n         * @constructor\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         */\n        function ValueInfoProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ValueInfoProto name.\n         * @member {string} name\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.name = \"\";\n\n        /**\n         * ValueInfoProto type.\n         * @member {onnx.ITypeProto|null|undefined} type\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.type = null;\n\n        /**\n         * ValueInfoProto docString.\n         * @member {string} docString\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new ValueInfoProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         * @returns {onnx.ValueInfoProto} ValueInfoProto instance\n         */\n        ValueInfoProto.create = function create(properties) {\n            return new ValueInfoProto(properties);\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                $root.onnx.TypeProto.encode(message.type, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.docString);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message, length delimited. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ValueInfoProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 2:\n                    message.type = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ValueInfoProto message.\n         * @function verify\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ValueInfoProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\")) {\n                var error = $root.onnx.TypeProto.verify(message.type);\n                if (error)\n                    return \"type.\" + error;\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ValueInfoProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         */\n        ValueInfoProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ValueInfoProto)\n                return object;\n            var message = new $root.onnx.ValueInfoProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.type != null) {\n                if (typeof object.type !== \"object\")\n                    throw TypeError(\".onnx.ValueInfoProto.type: object expected\");\n                message.type = $root.onnx.TypeProto.fromObject(object.type);\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ValueInfoProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.ValueInfoProto} message ValueInfoProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ValueInfoProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.name = \"\";\n                object.type = null;\n                object.docString = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = $root.onnx.TypeProto.toObject(message.type, options);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            return object;\n        };\n\n        /**\n         * Converts this ValueInfoProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ValueInfoProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ValueInfoProto;\n    })();\n\n    onnx.NodeProto = (function() {\n\n        /**\n         * Properties of a NodeProto.\n         * @memberof onnx\n         * @interface INodeProto\n         * @property {Array.<string>|null} [input] NodeProto input\n         * @property {Array.<string>|null} [output] NodeProto output\n         * @property {string|null} [name] NodeProto name\n         * @property {string|null} [opType] NodeProto opType\n         * @property {string|null} [domain] NodeProto domain\n         * @property {Array.<onnx.IAttributeProto>|null} [attribute] NodeProto attribute\n         * @property {string|null} [docString] NodeProto docString\n         */\n\n        /**\n         * Constructs a new NodeProto.\n         * @memberof onnx\n         * @classdesc Represents a NodeProto.\n         * @implements INodeProto\n         * @constructor\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         */\n        function NodeProto(properties) {\n            this.input = [];\n            this.output = [];\n            this.attribute = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * NodeProto input.\n         * @member {Array.<string>} input\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.input = $util.emptyArray;\n\n        /**\n         * NodeProto output.\n         * @member {Array.<string>} output\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.output = $util.emptyArray;\n\n        /**\n         * NodeProto name.\n         * @member {string} name\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.name = \"\";\n\n        /**\n         * NodeProto opType.\n         * @member {string} opType\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.opType = \"\";\n\n        /**\n         * NodeProto domain.\n         * @member {string} domain\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.domain = \"\";\n\n        /**\n         * NodeProto attribute.\n         * @member {Array.<onnx.IAttributeProto>} attribute\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.attribute = $util.emptyArray;\n\n        /**\n         * NodeProto docString.\n         * @member {string} docString\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new NodeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         * @returns {onnx.NodeProto} NodeProto instance\n         */\n        NodeProto.create = function create(properties) {\n            return new NodeProto(properties);\n        };\n\n        /**\n         * Encodes the specified NodeProto message. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.input[i]);\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.output[i]);\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.opType);\n            if (message.attribute != null && message.attribute.length)\n                for (var i = 0; i < message.attribute.length; ++i)\n                    $root.onnx.AttributeProto.encode(message.attribute[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 7, wireType 2 =*/58).string(message.domain);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified NodeProto message, length delimited. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.NodeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push(reader.string());\n                    break;\n                case 2:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push(reader.string());\n                    break;\n                case 3:\n                    message.name = reader.string();\n                    break;\n                case 4:\n                    message.opType = reader.string();\n                    break;\n                case 7:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    if (!(message.attribute && message.attribute.length))\n                        message.attribute = [];\n                    message.attribute.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a NodeProto message.\n         * @function verify\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        NodeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i)\n                    if (!$util.isString(message.input[i]))\n                        return \"input: string[] expected\";\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i)\n                    if (!$util.isString(message.output[i]))\n                        return \"output: string[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                if (!$util.isString(message.opType))\n                    return \"opType: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.attribute != null && message.hasOwnProperty(\"attribute\")) {\n                if (!Array.isArray(message.attribute))\n                    return \"attribute: array expected\";\n                for (var i = 0; i < message.attribute.length; ++i) {\n                    var error = $root.onnx.AttributeProto.verify(message.attribute[i]);\n                    if (error)\n                        return \"attribute.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a NodeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.NodeProto} NodeProto\n         */\n        NodeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.NodeProto)\n                return object;\n            var message = new $root.onnx.NodeProto();\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.NodeProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i)\n                    message.input[i] = String(object.input[i]);\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.NodeProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i)\n                    message.output[i] = String(object.output[i]);\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.opType != null)\n                message.opType = String(object.opType);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.attribute) {\n                if (!Array.isArray(object.attribute))\n                    throw TypeError(\".onnx.NodeProto.attribute: array expected\");\n                message.attribute = [];\n                for (var i = 0; i < object.attribute.length; ++i) {\n                    if (typeof object.attribute[i] !== \"object\")\n                        throw TypeError(\".onnx.NodeProto.attribute: object expected\");\n                    message.attribute[i] = $root.onnx.AttributeProto.fromObject(object.attribute[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a NodeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.NodeProto} message NodeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        NodeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.input = [];\n                object.output = [];\n                object.attribute = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.opType = \"\";\n                object.docString = \"\";\n                object.domain = \"\";\n            }\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = message.input[j];\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = message.output[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                object.opType = message.opType;\n            if (message.attribute && message.attribute.length) {\n                object.attribute = [];\n                for (var j = 0; j < message.attribute.length; ++j)\n                    object.attribute[j] = $root.onnx.AttributeProto.toObject(message.attribute[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            return object;\n        };\n\n        /**\n         * Converts this NodeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.NodeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        NodeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return NodeProto;\n    })();\n\n    onnx.ModelProto = (function() {\n\n        /**\n         * Properties of a ModelProto.\n         * @memberof onnx\n         * @interface IModelProto\n         * @property {number|Long|null} [irVersion] ModelProto irVersion\n         * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] ModelProto opsetImport\n         * @property {string|null} [producerName] ModelProto producerName\n         * @property {string|null} [producerVersion] ModelProto producerVersion\n         * @property {string|null} [domain] ModelProto domain\n         * @property {number|Long|null} [modelVersion] ModelProto modelVersion\n         * @property {string|null} [docString] ModelProto docString\n         * @property {onnx.IGraphProto|null} [graph] ModelProto graph\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [metadataProps] ModelProto metadataProps\n         */\n\n        /**\n         * Constructs a new ModelProto.\n         * @memberof onnx\n         * @classdesc Represents a ModelProto.\n         * @implements IModelProto\n         * @constructor\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         */\n        function ModelProto(properties) {\n            this.opsetImport = [];\n            this.metadataProps = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ModelProto irVersion.\n         * @member {number|Long} irVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.irVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto opsetImport.\n         * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.opsetImport = $util.emptyArray;\n\n        /**\n         * ModelProto producerName.\n         * @member {string} producerName\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerName = \"\";\n\n        /**\n         * ModelProto producerVersion.\n         * @member {string} producerVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerVersion = \"\";\n\n        /**\n         * ModelProto domain.\n         * @member {string} domain\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.domain = \"\";\n\n        /**\n         * ModelProto modelVersion.\n         * @member {number|Long} modelVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.modelVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto docString.\n         * @member {string} docString\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.docString = \"\";\n\n        /**\n         * ModelProto graph.\n         * @member {onnx.IGraphProto|null|undefined} graph\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.graph = null;\n\n        /**\n         * ModelProto metadataProps.\n         * @member {Array.<onnx.IStringStringEntryProto>} metadataProps\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.metadataProps = $util.emptyArray;\n\n        /**\n         * Creates a new ModelProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         * @returns {onnx.ModelProto} ModelProto instance\n         */\n        ModelProto.create = function create(properties) {\n            return new ModelProto(properties);\n        };\n\n        /**\n         * Encodes the specified ModelProto message. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.irVersion);\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.producerName);\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.producerVersion);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.domain);\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.modelVersion);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                $root.onnx.GraphProto.encode(message.graph, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.opsetImport != null && message.opsetImport.length)\n                for (var i = 0; i < message.opsetImport.length; ++i)\n                    $root.onnx.OperatorSetIdProto.encode(message.opsetImport[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.metadataProps != null && message.metadataProps.length)\n                for (var i = 0; i < message.metadataProps.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.metadataProps[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ModelProto message, length delimited. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ModelProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.irVersion = reader.int64();\n                    break;\n                case 8:\n                    if (!(message.opsetImport && message.opsetImport.length))\n                        message.opsetImport = [];\n                    message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.producerName = reader.string();\n                    break;\n                case 3:\n                    message.producerVersion = reader.string();\n                    break;\n                case 4:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    message.modelVersion = reader.int64();\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                case 7:\n                    message.graph = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 14:\n                    if (!(message.metadataProps && message.metadataProps.length))\n                        message.metadataProps = [];\n                    message.metadataProps.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ModelProto message.\n         * @function verify\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ModelProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (!$util.isInteger(message.irVersion) && !(message.irVersion && $util.isInteger(message.irVersion.low) && $util.isInteger(message.irVersion.high)))\n                    return \"irVersion: integer|Long expected\";\n            if (message.opsetImport != null && message.hasOwnProperty(\"opsetImport\")) {\n                if (!Array.isArray(message.opsetImport))\n                    return \"opsetImport: array expected\";\n                for (var i = 0; i < message.opsetImport.length; ++i) {\n                    var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\n                    if (error)\n                        return \"opsetImport.\" + error;\n                }\n            }\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                if (!$util.isString(message.producerName))\n                    return \"producerName: string expected\";\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                if (!$util.isString(message.producerVersion))\n                    return \"producerVersion: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (!$util.isInteger(message.modelVersion) && !(message.modelVersion && $util.isInteger(message.modelVersion.low) && $util.isInteger(message.modelVersion.high)))\n                    return \"modelVersion: integer|Long expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.graph != null && message.hasOwnProperty(\"graph\")) {\n                var error = $root.onnx.GraphProto.verify(message.graph);\n                if (error)\n                    return \"graph.\" + error;\n            }\n            if (message.metadataProps != null && message.hasOwnProperty(\"metadataProps\")) {\n                if (!Array.isArray(message.metadataProps))\n                    return \"metadataProps: array expected\";\n                for (var i = 0; i < message.metadataProps.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.metadataProps[i]);\n                    if (error)\n                        return \"metadataProps.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ModelProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ModelProto} ModelProto\n         */\n        ModelProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ModelProto)\n                return object;\n            var message = new $root.onnx.ModelProto();\n            if (object.irVersion != null)\n                if ($util.Long)\n                    (message.irVersion = $util.Long.fromValue(object.irVersion)).unsigned = false;\n                else if (typeof object.irVersion === \"string\")\n                    message.irVersion = parseInt(object.irVersion, 10);\n                else if (typeof object.irVersion === \"number\")\n                    message.irVersion = object.irVersion;\n                else if (typeof object.irVersion === \"object\")\n                    message.irVersion = new $util.LongBits(object.irVersion.low >>> 0, object.irVersion.high >>> 0).toNumber();\n            if (object.opsetImport) {\n                if (!Array.isArray(object.opsetImport))\n                    throw TypeError(\".onnx.ModelProto.opsetImport: array expected\");\n                message.opsetImport = [];\n                for (var i = 0; i < object.opsetImport.length; ++i) {\n                    if (typeof object.opsetImport[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.opsetImport: object expected\");\n                    message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\n                }\n            }\n            if (object.producerName != null)\n                message.producerName = String(object.producerName);\n            if (object.producerVersion != null)\n                message.producerVersion = String(object.producerVersion);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.modelVersion != null)\n                if ($util.Long)\n                    (message.modelVersion = $util.Long.fromValue(object.modelVersion)).unsigned = false;\n                else if (typeof object.modelVersion === \"string\")\n                    message.modelVersion = parseInt(object.modelVersion, 10);\n                else if (typeof object.modelVersion === \"number\")\n                    message.modelVersion = object.modelVersion;\n                else if (typeof object.modelVersion === \"object\")\n                    message.modelVersion = new $util.LongBits(object.modelVersion.low >>> 0, object.modelVersion.high >>> 0).toNumber();\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.graph != null) {\n                if (typeof object.graph !== \"object\")\n                    throw TypeError(\".onnx.ModelProto.graph: object expected\");\n                message.graph = $root.onnx.GraphProto.fromObject(object.graph);\n            }\n            if (object.metadataProps) {\n                if (!Array.isArray(object.metadataProps))\n                    throw TypeError(\".onnx.ModelProto.metadataProps: array expected\");\n                message.metadataProps = [];\n                for (var i = 0; i < object.metadataProps.length; ++i) {\n                    if (typeof object.metadataProps[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.metadataProps: object expected\");\n                    message.metadataProps[i] = $root.onnx.StringStringEntryProto.fromObject(object.metadataProps[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ModelProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.ModelProto} message ModelProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ModelProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.opsetImport = [];\n                object.metadataProps = [];\n            }\n            if (options.defaults) {\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.irVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.irVersion = options.longs === String ? \"0\" : 0;\n                object.producerName = \"\";\n                object.producerVersion = \"\";\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.modelVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.modelVersion = options.longs === String ? \"0\" : 0;\n                object.docString = \"\";\n                object.graph = null;\n            }\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (typeof message.irVersion === \"number\")\n                    object.irVersion = options.longs === String ? String(message.irVersion) : message.irVersion;\n                else\n                    object.irVersion = options.longs === String ? $util.Long.prototype.toString.call(message.irVersion) : options.longs === Number ? new $util.LongBits(message.irVersion.low >>> 0, message.irVersion.high >>> 0).toNumber() : message.irVersion;\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                object.producerName = message.producerName;\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                object.producerVersion = message.producerVersion;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (typeof message.modelVersion === \"number\")\n                    object.modelVersion = options.longs === String ? String(message.modelVersion) : message.modelVersion;\n                else\n                    object.modelVersion = options.longs === String ? $util.Long.prototype.toString.call(message.modelVersion) : options.longs === Number ? new $util.LongBits(message.modelVersion.low >>> 0, message.modelVersion.high >>> 0).toNumber() : message.modelVersion;\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                object.graph = $root.onnx.GraphProto.toObject(message.graph, options);\n            if (message.opsetImport && message.opsetImport.length) {\n                object.opsetImport = [];\n                for (var j = 0; j < message.opsetImport.length; ++j)\n                    object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\n            }\n            if (message.metadataProps && message.metadataProps.length) {\n                object.metadataProps = [];\n                for (var j = 0; j < message.metadataProps.length; ++j)\n                    object.metadataProps[j] = $root.onnx.StringStringEntryProto.toObject(message.metadataProps[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ModelProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ModelProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ModelProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ModelProto;\n    })();\n\n    onnx.StringStringEntryProto = (function() {\n\n        /**\n         * Properties of a StringStringEntryProto.\n         * @memberof onnx\n         * @interface IStringStringEntryProto\n         * @property {string|null} [key] StringStringEntryProto key\n         * @property {string|null} [value] StringStringEntryProto value\n         */\n\n        /**\n         * Constructs a new StringStringEntryProto.\n         * @memberof onnx\n         * @classdesc Represents a StringStringEntryProto.\n         * @implements IStringStringEntryProto\n         * @constructor\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         */\n        function StringStringEntryProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * StringStringEntryProto key.\n         * @member {string} key\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.key = \"\";\n\n        /**\n         * StringStringEntryProto value.\n         * @member {string} value\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.value = \"\";\n\n        /**\n         * Creates a new StringStringEntryProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto instance\n         */\n        StringStringEntryProto.create = function create(properties) {\n            return new StringStringEntryProto(properties);\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message, length delimited. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.StringStringEntryProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.string();\n                    break;\n                case 2:\n                    message.value = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a StringStringEntryProto message.\n         * @function verify\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        StringStringEntryProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                if (!$util.isString(message.key))\n                    return \"key: string expected\";\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                if (!$util.isString(message.value))\n                    return \"value: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a StringStringEntryProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         */\n        StringStringEntryProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.StringStringEntryProto)\n                return object;\n            var message = new $root.onnx.StringStringEntryProto();\n            if (object.key != null)\n                message.key = String(object.key);\n            if (object.value != null)\n                message.value = String(object.value);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a StringStringEntryProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.StringStringEntryProto} message StringStringEntryProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        StringStringEntryProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.key = \"\";\n                object.value = \"\";\n            }\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                object.key = message.key;\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                object.value = message.value;\n            return object;\n        };\n\n        /**\n         * Converts this StringStringEntryProto to JSON.\n         * @function toJSON\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        StringStringEntryProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return StringStringEntryProto;\n    })();\n\n    onnx.TensorAnnotation = (function() {\n\n        /**\n         * Properties of a TensorAnnotation.\n         * @memberof onnx\n         * @interface ITensorAnnotation\n         * @property {string|null} [tensorName] TensorAnnotation tensorName\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [quantParameterTensorNames] TensorAnnotation quantParameterTensorNames\n         */\n\n        /**\n         * Constructs a new TensorAnnotation.\n         * @memberof onnx\n         * @classdesc Represents a TensorAnnotation.\n         * @implements ITensorAnnotation\n         * @constructor\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         */\n        function TensorAnnotation(properties) {\n            this.quantParameterTensorNames = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorAnnotation tensorName.\n         * @member {string} tensorName\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.tensorName = \"\";\n\n        /**\n         * TensorAnnotation quantParameterTensorNames.\n         * @member {Array.<onnx.IStringStringEntryProto>} quantParameterTensorNames\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.quantParameterTensorNames = $util.emptyArray;\n\n        /**\n         * Creates a new TensorAnnotation instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         * @returns {onnx.TensorAnnotation} TensorAnnotation instance\n         */\n        TensorAnnotation.create = function create(properties) {\n            return new TensorAnnotation(properties);\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.tensorName);\n            if (message.quantParameterTensorNames != null && message.quantParameterTensorNames.length)\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.quantParameterTensorNames[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message, length delimited. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorAnnotation();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.tensorName = reader.string();\n                    break;\n                case 2:\n                    if (!(message.quantParameterTensorNames && message.quantParameterTensorNames.length))\n                        message.quantParameterTensorNames = [];\n                    message.quantParameterTensorNames.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorAnnotation message.\n         * @function verify\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorAnnotation.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                if (!$util.isString(message.tensorName))\n                    return \"tensorName: string expected\";\n            if (message.quantParameterTensorNames != null && message.hasOwnProperty(\"quantParameterTensorNames\")) {\n                if (!Array.isArray(message.quantParameterTensorNames))\n                    return \"quantParameterTensorNames: array expected\";\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.quantParameterTensorNames[i]);\n                    if (error)\n                        return \"quantParameterTensorNames.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorAnnotation message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         */\n        TensorAnnotation.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorAnnotation)\n                return object;\n            var message = new $root.onnx.TensorAnnotation();\n            if (object.tensorName != null)\n                message.tensorName = String(object.tensorName);\n            if (object.quantParameterTensorNames) {\n                if (!Array.isArray(object.quantParameterTensorNames))\n                    throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: array expected\");\n                message.quantParameterTensorNames = [];\n                for (var i = 0; i < object.quantParameterTensorNames.length; ++i) {\n                    if (typeof object.quantParameterTensorNames[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: object expected\");\n                    message.quantParameterTensorNames[i] = $root.onnx.StringStringEntryProto.fromObject(object.quantParameterTensorNames[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorAnnotation message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.TensorAnnotation} message TensorAnnotation\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorAnnotation.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.quantParameterTensorNames = [];\n            if (options.defaults)\n                object.tensorName = \"\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                object.tensorName = message.tensorName;\n            if (message.quantParameterTensorNames && message.quantParameterTensorNames.length) {\n                object.quantParameterTensorNames = [];\n                for (var j = 0; j < message.quantParameterTensorNames.length; ++j)\n                    object.quantParameterTensorNames[j] = $root.onnx.StringStringEntryProto.toObject(message.quantParameterTensorNames[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorAnnotation to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorAnnotation.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return TensorAnnotation;\n    })();\n\n    onnx.GraphProto = (function() {\n\n        /**\n         * Properties of a GraphProto.\n         * @memberof onnx\n         * @interface IGraphProto\n         * @property {Array.<onnx.INodeProto>|null} [node] GraphProto node\n         * @property {string|null} [name] GraphProto name\n         * @property {Array.<onnx.ITensorProto>|null} [initializer] GraphProto initializer\n         * @property {string|null} [docString] GraphProto docString\n         * @property {Array.<onnx.IValueInfoProto>|null} [input] GraphProto input\n         * @property {Array.<onnx.IValueInfoProto>|null} [output] GraphProto output\n         * @property {Array.<onnx.IValueInfoProto>|null} [valueInfo] GraphProto valueInfo\n         * @property {Array.<onnx.ITensorAnnotation>|null} [quantizationAnnotation] GraphProto quantizationAnnotation\n         */\n\n        /**\n         * Constructs a new GraphProto.\n         * @memberof onnx\n         * @classdesc Represents a GraphProto.\n         * @implements IGraphProto\n         * @constructor\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         */\n        function GraphProto(properties) {\n            this.node = [];\n            this.initializer = [];\n            this.input = [];\n            this.output = [];\n            this.valueInfo = [];\n            this.quantizationAnnotation = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * GraphProto node.\n         * @member {Array.<onnx.INodeProto>} node\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.node = $util.emptyArray;\n\n        /**\n         * GraphProto name.\n         * @member {string} name\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.name = \"\";\n\n        /**\n         * GraphProto initializer.\n         * @member {Array.<onnx.ITensorProto>} initializer\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.initializer = $util.emptyArray;\n\n        /**\n         * GraphProto docString.\n         * @member {string} docString\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.docString = \"\";\n\n        /**\n         * GraphProto input.\n         * @member {Array.<onnx.IValueInfoProto>} input\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.input = $util.emptyArray;\n\n        /**\n         * GraphProto output.\n         * @member {Array.<onnx.IValueInfoProto>} output\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.output = $util.emptyArray;\n\n        /**\n         * GraphProto valueInfo.\n         * @member {Array.<onnx.IValueInfoProto>} valueInfo\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.valueInfo = $util.emptyArray;\n\n        /**\n         * GraphProto quantizationAnnotation.\n         * @member {Array.<onnx.ITensorAnnotation>} quantizationAnnotation\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.quantizationAnnotation = $util.emptyArray;\n\n        /**\n         * Creates a new GraphProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         * @returns {onnx.GraphProto} GraphProto instance\n         */\n        GraphProto.create = function create(properties) {\n            return new GraphProto(properties);\n        };\n\n        /**\n         * Encodes the specified GraphProto message. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.node != null && message.node.length)\n                for (var i = 0; i < message.node.length; ++i)\n                    $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n            if (message.initializer != null && message.initializer.length)\n                for (var i = 0; i < message.initializer.length; ++i)\n                    $root.onnx.TensorProto.encode(message.initializer[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 10, wireType 2 =*/82).string(message.docString);\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.input[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.output[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n            if (message.valueInfo != null && message.valueInfo.length)\n                for (var i = 0; i < message.valueInfo.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.valueInfo[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.quantizationAnnotation != null && message.quantizationAnnotation.length)\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i)\n                    $root.onnx.TensorAnnotation.encode(message.quantizationAnnotation[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified GraphProto message, length delimited. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.GraphProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.node && message.node.length))\n                        message.node = [];\n                    message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.name = reader.string();\n                    break;\n                case 5:\n                    if (!(message.initializer && message.initializer.length))\n                        message.initializer = [];\n                    message.initializer.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 10:\n                    message.docString = reader.string();\n                    break;\n                case 11:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 12:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 13:\n                    if (!(message.valueInfo && message.valueInfo.length))\n                        message.valueInfo = [];\n                    message.valueInfo.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    if (!(message.quantizationAnnotation && message.quantizationAnnotation.length))\n                        message.quantizationAnnotation = [];\n                    message.quantizationAnnotation.push($root.onnx.TensorAnnotation.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a GraphProto message.\n         * @function verify\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        GraphProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.node != null && message.hasOwnProperty(\"node\")) {\n                if (!Array.isArray(message.node))\n                    return \"node: array expected\";\n                for (var i = 0; i < message.node.length; ++i) {\n                    var error = $root.onnx.NodeProto.verify(message.node[i]);\n                    if (error)\n                        return \"node.\" + error;\n                }\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.initializer != null && message.hasOwnProperty(\"initializer\")) {\n                if (!Array.isArray(message.initializer))\n                    return \"initializer: array expected\";\n                for (var i = 0; i < message.initializer.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.initializer[i]);\n                    if (error)\n                        return \"initializer.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.input[i]);\n                    if (error)\n                        return \"input.\" + error;\n                }\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.output[i]);\n                    if (error)\n                        return \"output.\" + error;\n                }\n            }\n            if (message.valueInfo != null && message.hasOwnProperty(\"valueInfo\")) {\n                if (!Array.isArray(message.valueInfo))\n                    return \"valueInfo: array expected\";\n                for (var i = 0; i < message.valueInfo.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.valueInfo[i]);\n                    if (error)\n                        return \"valueInfo.\" + error;\n                }\n            }\n            if (message.quantizationAnnotation != null && message.hasOwnProperty(\"quantizationAnnotation\")) {\n                if (!Array.isArray(message.quantizationAnnotation))\n                    return \"quantizationAnnotation: array expected\";\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i) {\n                    var error = $root.onnx.TensorAnnotation.verify(message.quantizationAnnotation[i]);\n                    if (error)\n                        return \"quantizationAnnotation.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a GraphProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.GraphProto} GraphProto\n         */\n        GraphProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.GraphProto)\n                return object;\n            var message = new $root.onnx.GraphProto();\n            if (object.node) {\n                if (!Array.isArray(object.node))\n                    throw TypeError(\".onnx.GraphProto.node: array expected\");\n                message.node = [];\n                for (var i = 0; i < object.node.length; ++i) {\n                    if (typeof object.node[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.node: object expected\");\n                    message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\n                }\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.initializer) {\n                if (!Array.isArray(object.initializer))\n                    throw TypeError(\".onnx.GraphProto.initializer: array expected\");\n                message.initializer = [];\n                for (var i = 0; i < object.initializer.length; ++i) {\n                    if (typeof object.initializer[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.initializer: object expected\");\n                    message.initializer[i] = $root.onnx.TensorProto.fromObject(object.initializer[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.GraphProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i) {\n                    if (typeof object.input[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.input: object expected\");\n                    message.input[i] = $root.onnx.ValueInfoProto.fromObject(object.input[i]);\n                }\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.GraphProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i) {\n                    if (typeof object.output[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.output: object expected\");\n                    message.output[i] = $root.onnx.ValueInfoProto.fromObject(object.output[i]);\n                }\n            }\n            if (object.valueInfo) {\n                if (!Array.isArray(object.valueInfo))\n                    throw TypeError(\".onnx.GraphProto.valueInfo: array expected\");\n                message.valueInfo = [];\n                for (var i = 0; i < object.valueInfo.length; ++i) {\n                    if (typeof object.valueInfo[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.valueInfo: object expected\");\n                    message.valueInfo[i] = $root.onnx.ValueInfoProto.fromObject(object.valueInfo[i]);\n                }\n            }\n            if (object.quantizationAnnotation) {\n                if (!Array.isArray(object.quantizationAnnotation))\n                    throw TypeError(\".onnx.GraphProto.quantizationAnnotation: array expected\");\n                message.quantizationAnnotation = [];\n                for (var i = 0; i < object.quantizationAnnotation.length; ++i) {\n                    if (typeof object.quantizationAnnotation[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.quantizationAnnotation: object expected\");\n                    message.quantizationAnnotation[i] = $root.onnx.TensorAnnotation.fromObject(object.quantizationAnnotation[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a GraphProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.GraphProto} message GraphProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        GraphProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.node = [];\n                object.initializer = [];\n                object.input = [];\n                object.output = [];\n                object.valueInfo = [];\n                object.quantizationAnnotation = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.docString = \"\";\n            }\n            if (message.node && message.node.length) {\n                object.node = [];\n                for (var j = 0; j < message.node.length; ++j)\n                    object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.initializer && message.initializer.length) {\n                object.initializer = [];\n                for (var j = 0; j < message.initializer.length; ++j)\n                    object.initializer[j] = $root.onnx.TensorProto.toObject(message.initializer[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = $root.onnx.ValueInfoProto.toObject(message.input[j], options);\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = $root.onnx.ValueInfoProto.toObject(message.output[j], options);\n            }\n            if (message.valueInfo && message.valueInfo.length) {\n                object.valueInfo = [];\n                for (var j = 0; j < message.valueInfo.length; ++j)\n                    object.valueInfo[j] = $root.onnx.ValueInfoProto.toObject(message.valueInfo[j], options);\n            }\n            if (message.quantizationAnnotation && message.quantizationAnnotation.length) {\n                object.quantizationAnnotation = [];\n                for (var j = 0; j < message.quantizationAnnotation.length; ++j)\n                    object.quantizationAnnotation[j] = $root.onnx.TensorAnnotation.toObject(message.quantizationAnnotation[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this GraphProto to JSON.\n         * @function toJSON\n         * @memberof onnx.GraphProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        GraphProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return GraphProto;\n    })();\n\n    onnx.TensorProto = (function() {\n\n        /**\n         * Properties of a TensorProto.\n         * @memberof onnx\n         * @interface ITensorProto\n         * @property {Array.<number|Long>|null} [dims] TensorProto dims\n         * @property {number|null} [dataType] TensorProto dataType\n         * @property {onnx.TensorProto.ISegment|null} [segment] TensorProto segment\n         * @property {Array.<number>|null} [floatData] TensorProto floatData\n         * @property {Array.<number>|null} [int32Data] TensorProto int32Data\n         * @property {Array.<Uint8Array>|null} [stringData] TensorProto stringData\n         * @property {Array.<number|Long>|null} [int64Data] TensorProto int64Data\n         * @property {string|null} [name] TensorProto name\n         * @property {string|null} [docString] TensorProto docString\n         * @property {Uint8Array|null} [rawData] TensorProto rawData\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [externalData] TensorProto externalData\n         * @property {onnx.TensorProto.DataLocation|null} [dataLocation] TensorProto dataLocation\n         * @property {Array.<number>|null} [doubleData] TensorProto doubleData\n         * @property {Array.<number|Long>|null} [uint64Data] TensorProto uint64Data\n         */\n\n        /**\n         * Constructs a new TensorProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorProto.\n         * @implements ITensorProto\n         * @constructor\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         */\n        function TensorProto(properties) {\n            this.dims = [];\n            this.floatData = [];\n            this.int32Data = [];\n            this.stringData = [];\n            this.int64Data = [];\n            this.externalData = [];\n            this.doubleData = [];\n            this.uint64Data = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorProto dims.\n         * @member {Array.<number|Long>} dims\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dims = $util.emptyArray;\n\n        /**\n         * TensorProto dataType.\n         * @member {number} dataType\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataType = 0;\n\n        /**\n         * TensorProto segment.\n         * @member {onnx.TensorProto.ISegment|null|undefined} segment\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.segment = null;\n\n        /**\n         * TensorProto floatData.\n         * @member {Array.<number>} floatData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.floatData = $util.emptyArray;\n\n        /**\n         * TensorProto int32Data.\n         * @member {Array.<number>} int32Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int32Data = $util.emptyArray;\n\n        /**\n         * TensorProto stringData.\n         * @member {Array.<Uint8Array>} stringData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.stringData = $util.emptyArray;\n\n        /**\n         * TensorProto int64Data.\n         * @member {Array.<number|Long>} int64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int64Data = $util.emptyArray;\n\n        /**\n         * TensorProto name.\n         * @member {string} name\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.name = \"\";\n\n        /**\n         * TensorProto docString.\n         * @member {string} docString\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.docString = \"\";\n\n        /**\n         * TensorProto rawData.\n         * @member {Uint8Array} rawData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.rawData = $util.newBuffer([]);\n\n        /**\n         * TensorProto externalData.\n         * @member {Array.<onnx.IStringStringEntryProto>} externalData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.externalData = $util.emptyArray;\n\n        /**\n         * TensorProto dataLocation.\n         * @member {onnx.TensorProto.DataLocation} dataLocation\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataLocation = 0;\n\n        /**\n         * TensorProto doubleData.\n         * @member {Array.<number>} doubleData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.doubleData = $util.emptyArray;\n\n        /**\n         * TensorProto uint64Data.\n         * @member {Array.<number|Long>} uint64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.uint64Data = $util.emptyArray;\n\n        /**\n         * Creates a new TensorProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         * @returns {onnx.TensorProto} TensorProto instance\n         */\n        TensorProto.create = function create(properties) {\n            return new TensorProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorProto message. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dims != null && message.dims.length) {\n                writer.uint32(/* id 1, wireType 2 =*/10).fork();\n                for (var i = 0; i < message.dims.length; ++i)\n                    writer.int64(message.dims[i]);\n                writer.ldelim();\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.dataType);\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                $root.onnx.TensorProto.Segment.encode(message.segment, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.floatData != null && message.floatData.length) {\n                writer.uint32(/* id 4, wireType 2 =*/34).fork();\n                for (var i = 0; i < message.floatData.length; ++i)\n                    writer.float(message.floatData[i]);\n                writer.ldelim();\n            }\n            if (message.int32Data != null && message.int32Data.length) {\n                writer.uint32(/* id 5, wireType 2 =*/42).fork();\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    writer.int32(message.int32Data[i]);\n                writer.ldelim();\n            }\n            if (message.stringData != null && message.stringData.length)\n                for (var i = 0; i < message.stringData.length; ++i)\n                    writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.stringData[i]);\n            if (message.int64Data != null && message.int64Data.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    writer.int64(message.int64Data[i]);\n                writer.ldelim();\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.name);\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.rawData);\n            if (message.doubleData != null && message.doubleData.length) {\n                writer.uint32(/* id 10, wireType 2 =*/82).fork();\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    writer.double(message.doubleData[i]);\n                writer.ldelim();\n            }\n            if (message.uint64Data != null && message.uint64Data.length) {\n                writer.uint32(/* id 11, wireType 2 =*/90).fork();\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    writer.uint64(message.uint64Data[i]);\n                writer.ldelim();\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 12, wireType 2 =*/98).string(message.docString);\n            if (message.externalData != null && message.externalData.length)\n                for (var i = 0; i < message.externalData.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.externalData[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                writer.uint32(/* id 14, wireType 0 =*/112).int32(message.dataLocation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorProto message, length delimited. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dims && message.dims.length))\n                        message.dims = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.dims.push(reader.int64());\n                    } else\n                        message.dims.push(reader.int64());\n                    break;\n                case 2:\n                    message.dataType = reader.int32();\n                    break;\n                case 3:\n                    message.segment = $root.onnx.TensorProto.Segment.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    if (!(message.floatData && message.floatData.length))\n                        message.floatData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floatData.push(reader.float());\n                    } else\n                        message.floatData.push(reader.float());\n                    break;\n                case 5:\n                    if (!(message.int32Data && message.int32Data.length))\n                        message.int32Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int32Data.push(reader.int32());\n                    } else\n                        message.int32Data.push(reader.int32());\n                    break;\n                case 6:\n                    if (!(message.stringData && message.stringData.length))\n                        message.stringData = [];\n                    message.stringData.push(reader.bytes());\n                    break;\n                case 7:\n                    if (!(message.int64Data && message.int64Data.length))\n                        message.int64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int64Data.push(reader.int64());\n                    } else\n                        message.int64Data.push(reader.int64());\n                    break;\n                case 8:\n                    message.name = reader.string();\n                    break;\n                case 12:\n                    message.docString = reader.string();\n                    break;\n                case 9:\n                    message.rawData = reader.bytes();\n                    break;\n                case 13:\n                    if (!(message.externalData && message.externalData.length))\n                        message.externalData = [];\n                    message.externalData.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    message.dataLocation = reader.int32();\n                    break;\n                case 10:\n                    if (!(message.doubleData && message.doubleData.length))\n                        message.doubleData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.doubleData.push(reader.double());\n                    } else\n                        message.doubleData.push(reader.double());\n                    break;\n                case 11:\n                    if (!(message.uint64Data && message.uint64Data.length))\n                        message.uint64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.uint64Data.push(reader.uint64());\n                    } else\n                        message.uint64Data.push(reader.uint64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorProto message.\n         * @function verify\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dims != null && message.hasOwnProperty(\"dims\")) {\n                if (!Array.isArray(message.dims))\n                    return \"dims: array expected\";\n                for (var i = 0; i < message.dims.length; ++i)\n                    if (!$util.isInteger(message.dims[i]) && !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high)))\n                        return \"dims: integer|Long[] expected\";\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                if (!$util.isInteger(message.dataType))\n                    return \"dataType: integer expected\";\n            if (message.segment != null && message.hasOwnProperty(\"segment\")) {\n                var error = $root.onnx.TensorProto.Segment.verify(message.segment);\n                if (error)\n                    return \"segment.\" + error;\n            }\n            if (message.floatData != null && message.hasOwnProperty(\"floatData\")) {\n                if (!Array.isArray(message.floatData))\n                    return \"floatData: array expected\";\n                for (var i = 0; i < message.floatData.length; ++i)\n                    if (typeof message.floatData[i] !== \"number\")\n                        return \"floatData: number[] expected\";\n            }\n            if (message.int32Data != null && message.hasOwnProperty(\"int32Data\")) {\n                if (!Array.isArray(message.int32Data))\n                    return \"int32Data: array expected\";\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    if (!$util.isInteger(message.int32Data[i]))\n                        return \"int32Data: integer[] expected\";\n            }\n            if (message.stringData != null && message.hasOwnProperty(\"stringData\")) {\n                if (!Array.isArray(message.stringData))\n                    return \"stringData: array expected\";\n                for (var i = 0; i < message.stringData.length; ++i)\n                    if (!(message.stringData[i] && typeof message.stringData[i].length === \"number\" || $util.isString(message.stringData[i])))\n                        return \"stringData: buffer[] expected\";\n            }\n            if (message.int64Data != null && message.hasOwnProperty(\"int64Data\")) {\n                if (!Array.isArray(message.int64Data))\n                    return \"int64Data: array expected\";\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    if (!$util.isInteger(message.int64Data[i]) && !(message.int64Data[i] && $util.isInteger(message.int64Data[i].low) && $util.isInteger(message.int64Data[i].high)))\n                        return \"int64Data: integer|Long[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                if (!(message.rawData && typeof message.rawData.length === \"number\" || $util.isString(message.rawData)))\n                    return \"rawData: buffer expected\";\n            if (message.externalData != null && message.hasOwnProperty(\"externalData\")) {\n                if (!Array.isArray(message.externalData))\n                    return \"externalData: array expected\";\n                for (var i = 0; i < message.externalData.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.externalData[i]);\n                    if (error)\n                        return \"externalData.\" + error;\n                }\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                switch (message.dataLocation) {\n                default:\n                    return \"dataLocation: enum value expected\";\n                case 0:\n                case 1:\n                    break;\n                }\n            if (message.doubleData != null && message.hasOwnProperty(\"doubleData\")) {\n                if (!Array.isArray(message.doubleData))\n                    return \"doubleData: array expected\";\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    if (typeof message.doubleData[i] !== \"number\")\n                        return \"doubleData: number[] expected\";\n            }\n            if (message.uint64Data != null && message.hasOwnProperty(\"uint64Data\")) {\n                if (!Array.isArray(message.uint64Data))\n                    return \"uint64Data: array expected\";\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    if (!$util.isInteger(message.uint64Data[i]) && !(message.uint64Data[i] && $util.isInteger(message.uint64Data[i].low) && $util.isInteger(message.uint64Data[i].high)))\n                        return \"uint64Data: integer|Long[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorProto} TensorProto\n         */\n        TensorProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorProto)\n                return object;\n            var message = new $root.onnx.TensorProto();\n            if (object.dims) {\n                if (!Array.isArray(object.dims))\n                    throw TypeError(\".onnx.TensorProto.dims: array expected\");\n                message.dims = [];\n                for (var i = 0; i < object.dims.length; ++i)\n                    if ($util.Long)\n                        (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\n                    else if (typeof object.dims[i] === \"string\")\n                        message.dims[i] = parseInt(object.dims[i], 10);\n                    else if (typeof object.dims[i] === \"number\")\n                        message.dims[i] = object.dims[i];\n                    else if (typeof object.dims[i] === \"object\")\n                        message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\n            }\n            if (object.dataType != null)\n                message.dataType = object.dataType | 0;\n            if (object.segment != null) {\n                if (typeof object.segment !== \"object\")\n                    throw TypeError(\".onnx.TensorProto.segment: object expected\");\n                message.segment = $root.onnx.TensorProto.Segment.fromObject(object.segment);\n            }\n            if (object.floatData) {\n                if (!Array.isArray(object.floatData))\n                    throw TypeError(\".onnx.TensorProto.floatData: array expected\");\n                message.floatData = [];\n                for (var i = 0; i < object.floatData.length; ++i)\n                    message.floatData[i] = Number(object.floatData[i]);\n            }\n            if (object.int32Data) {\n                if (!Array.isArray(object.int32Data))\n                    throw TypeError(\".onnx.TensorProto.int32Data: array expected\");\n                message.int32Data = [];\n                for (var i = 0; i < object.int32Data.length; ++i)\n                    message.int32Data[i] = object.int32Data[i] | 0;\n            }\n            if (object.stringData) {\n                if (!Array.isArray(object.stringData))\n                    throw TypeError(\".onnx.TensorProto.stringData: array expected\");\n                message.stringData = [];\n                for (var i = 0; i < object.stringData.length; ++i)\n                    if (typeof object.stringData[i] === \"string\")\n                        $util.base64.decode(object.stringData[i], message.stringData[i] = $util.newBuffer($util.base64.length(object.stringData[i])), 0);\n                    else if (object.stringData[i].length)\n                        message.stringData[i] = object.stringData[i];\n            }\n            if (object.int64Data) {\n                if (!Array.isArray(object.int64Data))\n                    throw TypeError(\".onnx.TensorProto.int64Data: array expected\");\n                message.int64Data = [];\n                for (var i = 0; i < object.int64Data.length; ++i)\n                    if ($util.Long)\n                        (message.int64Data[i] = $util.Long.fromValue(object.int64Data[i])).unsigned = false;\n                    else if (typeof object.int64Data[i] === \"string\")\n                        message.int64Data[i] = parseInt(object.int64Data[i], 10);\n                    else if (typeof object.int64Data[i] === \"number\")\n                        message.int64Data[i] = object.int64Data[i];\n                    else if (typeof object.int64Data[i] === \"object\")\n                        message.int64Data[i] = new $util.LongBits(object.int64Data[i].low >>> 0, object.int64Data[i].high >>> 0).toNumber();\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.rawData != null)\n                if (typeof object.rawData === \"string\")\n                    $util.base64.decode(object.rawData, message.rawData = $util.newBuffer($util.base64.length(object.rawData)), 0);\n                else if (object.rawData.length)\n                    message.rawData = object.rawData;\n            if (object.externalData) {\n                if (!Array.isArray(object.externalData))\n                    throw TypeError(\".onnx.TensorProto.externalData: array expected\");\n                message.externalData = [];\n                for (var i = 0; i < object.externalData.length; ++i) {\n                    if (typeof object.externalData[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorProto.externalData: object expected\");\n                    message.externalData[i] = $root.onnx.StringStringEntryProto.fromObject(object.externalData[i]);\n                }\n            }\n            switch (object.dataLocation) {\n            case \"DEFAULT\":\n            case 0:\n                message.dataLocation = 0;\n                break;\n            case \"EXTERNAL\":\n            case 1:\n                message.dataLocation = 1;\n                break;\n            }\n            if (object.doubleData) {\n                if (!Array.isArray(object.doubleData))\n                    throw TypeError(\".onnx.TensorProto.doubleData: array expected\");\n                message.doubleData = [];\n                for (var i = 0; i < object.doubleData.length; ++i)\n                    message.doubleData[i] = Number(object.doubleData[i]);\n            }\n            if (object.uint64Data) {\n                if (!Array.isArray(object.uint64Data))\n                    throw TypeError(\".onnx.TensorProto.uint64Data: array expected\");\n                message.uint64Data = [];\n                for (var i = 0; i < object.uint64Data.length; ++i)\n                    if ($util.Long)\n                        (message.uint64Data[i] = $util.Long.fromValue(object.uint64Data[i])).unsigned = true;\n                    else if (typeof object.uint64Data[i] === \"string\")\n                        message.uint64Data[i] = parseInt(object.uint64Data[i], 10);\n                    else if (typeof object.uint64Data[i] === \"number\")\n                        message.uint64Data[i] = object.uint64Data[i];\n                    else if (typeof object.uint64Data[i] === \"object\")\n                        message.uint64Data[i] = new $util.LongBits(object.uint64Data[i].low >>> 0, object.uint64Data[i].high >>> 0).toNumber(true);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.TensorProto} message TensorProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.dims = [];\n                object.floatData = [];\n                object.int32Data = [];\n                object.stringData = [];\n                object.int64Data = [];\n                object.doubleData = [];\n                object.uint64Data = [];\n                object.externalData = [];\n            }\n            if (options.defaults) {\n                object.dataType = 0;\n                object.segment = null;\n                object.name = \"\";\n                if (options.bytes === String)\n                    object.rawData = \"\";\n                else {\n                    object.rawData = [];\n                    if (options.bytes !== Array)\n                        object.rawData = $util.newBuffer(object.rawData);\n                }\n                object.docString = \"\";\n                object.dataLocation = options.enums === String ? \"DEFAULT\" : 0;\n            }\n            if (message.dims && message.dims.length) {\n                object.dims = [];\n                for (var j = 0; j < message.dims.length; ++j)\n                    if (typeof message.dims[j] === \"number\")\n                        object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\n                    else\n                        object.dims[j] = options.longs === String ? $util.Long.prototype.toString.call(message.dims[j]) : options.longs === Number ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber() : message.dims[j];\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                object.dataType = message.dataType;\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                object.segment = $root.onnx.TensorProto.Segment.toObject(message.segment, options);\n            if (message.floatData && message.floatData.length) {\n                object.floatData = [];\n                for (var j = 0; j < message.floatData.length; ++j)\n                    object.floatData[j] = options.json && !isFinite(message.floatData[j]) ? String(message.floatData[j]) : message.floatData[j];\n            }\n            if (message.int32Data && message.int32Data.length) {\n                object.int32Data = [];\n                for (var j = 0; j < message.int32Data.length; ++j)\n                    object.int32Data[j] = message.int32Data[j];\n            }\n            if (message.stringData && message.stringData.length) {\n                object.stringData = [];\n                for (var j = 0; j < message.stringData.length; ++j)\n                    object.stringData[j] = options.bytes === String ? $util.base64.encode(message.stringData[j], 0, message.stringData[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.stringData[j]) : message.stringData[j];\n            }\n            if (message.int64Data && message.int64Data.length) {\n                object.int64Data = [];\n                for (var j = 0; j < message.int64Data.length; ++j)\n                    if (typeof message.int64Data[j] === \"number\")\n                        object.int64Data[j] = options.longs === String ? String(message.int64Data[j]) : message.int64Data[j];\n                    else\n                        object.int64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.int64Data[j]) : options.longs === Number ? new $util.LongBits(message.int64Data[j].low >>> 0, message.int64Data[j].high >>> 0).toNumber() : message.int64Data[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                object.rawData = options.bytes === String ? $util.base64.encode(message.rawData, 0, message.rawData.length) : options.bytes === Array ? Array.prototype.slice.call(message.rawData) : message.rawData;\n            if (message.doubleData && message.doubleData.length) {\n                object.doubleData = [];\n                for (var j = 0; j < message.doubleData.length; ++j)\n                    object.doubleData[j] = options.json && !isFinite(message.doubleData[j]) ? String(message.doubleData[j]) : message.doubleData[j];\n            }\n            if (message.uint64Data && message.uint64Data.length) {\n                object.uint64Data = [];\n                for (var j = 0; j < message.uint64Data.length; ++j)\n                    if (typeof message.uint64Data[j] === \"number\")\n                        object.uint64Data[j] = options.longs === String ? String(message.uint64Data[j]) : message.uint64Data[j];\n                    else\n                        object.uint64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.uint64Data[j]) : options.longs === Number ? new $util.LongBits(message.uint64Data[j].low >>> 0, message.uint64Data[j].high >>> 0).toNumber(true) : message.uint64Data[j];\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.externalData && message.externalData.length) {\n                object.externalData = [];\n                for (var j = 0; j < message.externalData.length; ++j)\n                    object.externalData[j] = $root.onnx.StringStringEntryProto.toObject(message.externalData[j], options);\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                object.dataLocation = options.enums === String ? $root.onnx.TensorProto.DataLocation[message.dataLocation] : message.dataLocation;\n            return object;\n        };\n\n        /**\n         * Converts this TensorProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * DataType enum.\n         * @name onnx.TensorProto.DataType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} UINT8=2 UINT8 value\n         * @property {number} INT8=3 INT8 value\n         * @property {number} UINT16=4 UINT16 value\n         * @property {number} INT16=5 INT16 value\n         * @property {number} INT32=6 INT32 value\n         * @property {number} INT64=7 INT64 value\n         * @property {number} STRING=8 STRING value\n         * @property {number} BOOL=9 BOOL value\n         * @property {number} FLOAT16=10 FLOAT16 value\n         * @property {number} DOUBLE=11 DOUBLE value\n         * @property {number} UINT32=12 UINT32 value\n         * @property {number} UINT64=13 UINT64 value\n         * @property {number} COMPLEX64=14 COMPLEX64 value\n         * @property {number} COMPLEX128=15 COMPLEX128 value\n         * @property {number} BFLOAT16=16 BFLOAT16 value\n         */\n        TensorProto.DataType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"UINT8\"] = 2;\n            values[valuesById[3] = \"INT8\"] = 3;\n            values[valuesById[4] = \"UINT16\"] = 4;\n            values[valuesById[5] = \"INT16\"] = 5;\n            values[valuesById[6] = \"INT32\"] = 6;\n            values[valuesById[7] = \"INT64\"] = 7;\n            values[valuesById[8] = \"STRING\"] = 8;\n            values[valuesById[9] = \"BOOL\"] = 9;\n            values[valuesById[10] = \"FLOAT16\"] = 10;\n            values[valuesById[11] = \"DOUBLE\"] = 11;\n            values[valuesById[12] = \"UINT32\"] = 12;\n            values[valuesById[13] = \"UINT64\"] = 13;\n            values[valuesById[14] = \"COMPLEX64\"] = 14;\n            values[valuesById[15] = \"COMPLEX128\"] = 15;\n            values[valuesById[16] = \"BFLOAT16\"] = 16;\n            return values;\n        })();\n\n        TensorProto.Segment = (function() {\n\n            /**\n             * Properties of a Segment.\n             * @memberof onnx.TensorProto\n             * @interface ISegment\n             * @property {number|Long|null} [begin] Segment begin\n             * @property {number|Long|null} [end] Segment end\n             */\n\n            /**\n             * Constructs a new Segment.\n             * @memberof onnx.TensorProto\n             * @classdesc Represents a Segment.\n             * @implements ISegment\n             * @constructor\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             */\n            function Segment(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Segment begin.\n             * @member {number|Long} begin\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.begin = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Segment end.\n             * @member {number|Long} end\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.end = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Creates a new Segment instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             * @returns {onnx.TensorProto.Segment} Segment instance\n             */\n            Segment.create = function create(properties) {\n                return new Segment(properties);\n            };\n\n            /**\n             * Encodes the specified Segment message. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.begin);\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.end);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Segment message, length delimited. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto.Segment();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.begin = reader.int64();\n                        break;\n                    case 2:\n                        message.end = reader.int64();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Segment message.\n             * @function verify\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Segment.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (!$util.isInteger(message.begin) && !(message.begin && $util.isInteger(message.begin.low) && $util.isInteger(message.begin.high)))\n                        return \"begin: integer|Long expected\";\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (!$util.isInteger(message.end) && !(message.end && $util.isInteger(message.end.low) && $util.isInteger(message.end.high)))\n                        return \"end: integer|Long expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Segment message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorProto.Segment} Segment\n             */\n            Segment.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorProto.Segment)\n                    return object;\n                var message = new $root.onnx.TensorProto.Segment();\n                if (object.begin != null)\n                    if ($util.Long)\n                        (message.begin = $util.Long.fromValue(object.begin)).unsigned = false;\n                    else if (typeof object.begin === \"string\")\n                        message.begin = parseInt(object.begin, 10);\n                    else if (typeof object.begin === \"number\")\n                        message.begin = object.begin;\n                    else if (typeof object.begin === \"object\")\n                        message.begin = new $util.LongBits(object.begin.low >>> 0, object.begin.high >>> 0).toNumber();\n                if (object.end != null)\n                    if ($util.Long)\n                        (message.end = $util.Long.fromValue(object.end)).unsigned = false;\n                    else if (typeof object.end === \"string\")\n                        message.end = parseInt(object.end, 10);\n                    else if (typeof object.end === \"number\")\n                        message.end = object.end;\n                    else if (typeof object.end === \"object\")\n                        message.end = new $util.LongBits(object.end.low >>> 0, object.end.high >>> 0).toNumber();\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Segment message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.Segment} message Segment\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Segment.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.begin = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.begin = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.end = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.end = options.longs === String ? \"0\" : 0;\n                }\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (typeof message.begin === \"number\")\n                        object.begin = options.longs === String ? String(message.begin) : message.begin;\n                    else\n                        object.begin = options.longs === String ? $util.Long.prototype.toString.call(message.begin) : options.longs === Number ? new $util.LongBits(message.begin.low >>> 0, message.begin.high >>> 0).toNumber() : message.begin;\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (typeof message.end === \"number\")\n                        object.end = options.longs === String ? String(message.end) : message.end;\n                    else\n                        object.end = options.longs === String ? $util.Long.prototype.toString.call(message.end) : options.longs === Number ? new $util.LongBits(message.end.low >>> 0, message.end.high >>> 0).toNumber() : message.end;\n                return object;\n            };\n\n            /**\n             * Converts this Segment to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Segment.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Segment;\n        })();\n\n        /**\n         * DataLocation enum.\n         * @name onnx.TensorProto.DataLocation\n         * @enum {string}\n         * @property {number} DEFAULT=0 DEFAULT value\n         * @property {number} EXTERNAL=1 EXTERNAL value\n         */\n        TensorProto.DataLocation = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"DEFAULT\"] = 0;\n            values[valuesById[1] = \"EXTERNAL\"] = 1;\n            return values;\n        })();\n\n        return TensorProto;\n    })();\n\n    onnx.TensorShapeProto = (function() {\n\n        /**\n         * Properties of a TensorShapeProto.\n         * @memberof onnx\n         * @interface ITensorShapeProto\n         * @property {Array.<onnx.TensorShapeProto.IDimension>|null} [dim] TensorShapeProto dim\n         */\n\n        /**\n         * Constructs a new TensorShapeProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorShapeProto.\n         * @implements ITensorShapeProto\n         * @constructor\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         */\n        function TensorShapeProto(properties) {\n            this.dim = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorShapeProto dim.\n         * @member {Array.<onnx.TensorShapeProto.IDimension>} dim\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         */\n        TensorShapeProto.prototype.dim = $util.emptyArray;\n\n        /**\n         * Creates a new TensorShapeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         * @returns {onnx.TensorShapeProto} TensorShapeProto instance\n         */\n        TensorShapeProto.create = function create(properties) {\n            return new TensorShapeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dim != null && message.dim.length)\n                for (var i = 0; i < message.dim.length; ++i)\n                    $root.onnx.TensorShapeProto.Dimension.encode(message.dim[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dim && message.dim.length))\n                        message.dim = [];\n                    message.dim.push($root.onnx.TensorShapeProto.Dimension.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorShapeProto message.\n         * @function verify\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorShapeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dim != null && message.hasOwnProperty(\"dim\")) {\n                if (!Array.isArray(message.dim))\n                    return \"dim: array expected\";\n                for (var i = 0; i < message.dim.length; ++i) {\n                    var error = $root.onnx.TensorShapeProto.Dimension.verify(message.dim[i]);\n                    if (error)\n                        return \"dim.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorShapeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         */\n        TensorShapeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorShapeProto)\n                return object;\n            var message = new $root.onnx.TensorShapeProto();\n            if (object.dim) {\n                if (!Array.isArray(object.dim))\n                    throw TypeError(\".onnx.TensorShapeProto.dim: array expected\");\n                message.dim = [];\n                for (var i = 0; i < object.dim.length; ++i) {\n                    if (typeof object.dim[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorShapeProto.dim: object expected\");\n                    message.dim[i] = $root.onnx.TensorShapeProto.Dimension.fromObject(object.dim[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorShapeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.TensorShapeProto} message TensorShapeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorShapeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.dim = [];\n            if (message.dim && message.dim.length) {\n                object.dim = [];\n                for (var j = 0; j < message.dim.length; ++j)\n                    object.dim[j] = $root.onnx.TensorShapeProto.Dimension.toObject(message.dim[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorShapeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorShapeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TensorShapeProto.Dimension = (function() {\n\n            /**\n             * Properties of a Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @interface IDimension\n             * @property {number|Long|null} [dimValue] Dimension dimValue\n             * @property {string|null} [dimParam] Dimension dimParam\n             * @property {string|null} [denotation] Dimension denotation\n             */\n\n            /**\n             * Constructs a new Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @classdesc Represents a Dimension.\n             * @implements IDimension\n             * @constructor\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             */\n            function Dimension(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Dimension dimValue.\n             * @member {number|Long} dimValue\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Dimension dimParam.\n             * @member {string} dimParam\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimParam = \"\";\n\n            /**\n             * Dimension denotation.\n             * @member {string} denotation\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.denotation = \"\";\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * Dimension value.\n             * @member {\"dimValue\"|\"dimParam\"|undefined} value\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Object.defineProperty(Dimension.prototype, \"value\", {\n                get: $util.oneOfGetter($oneOfFields = [\"dimValue\", \"dimParam\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new Dimension instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension instance\n             */\n            Dimension.create = function create(properties) {\n                return new Dimension(properties);\n            };\n\n            /**\n             * Encodes the specified Dimension message. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.dimValue);\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.dimParam);\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.denotation);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Dimension message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto.Dimension();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.dimValue = reader.int64();\n                        break;\n                    case 2:\n                        message.dimParam = reader.string();\n                        break;\n                    case 3:\n                        message.denotation = reader.string();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Dimension message.\n             * @function verify\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Dimension.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    properties.value = 1;\n                    if (!$util.isInteger(message.dimValue) && !(message.dimValue && $util.isInteger(message.dimValue.low) && $util.isInteger(message.dimValue.high)))\n                        return \"dimValue: integer|Long expected\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    if (properties.value === 1)\n                        return \"value: multiple values\";\n                    properties.value = 1;\n                    if (!$util.isString(message.dimParam))\n                        return \"dimParam: string expected\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    if (!$util.isString(message.denotation))\n                        return \"denotation: string expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Dimension message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             */\n            Dimension.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorShapeProto.Dimension)\n                    return object;\n                var message = new $root.onnx.TensorShapeProto.Dimension();\n                if (object.dimValue != null)\n                    if ($util.Long)\n                        (message.dimValue = $util.Long.fromValue(object.dimValue)).unsigned = false;\n                    else if (typeof object.dimValue === \"string\")\n                        message.dimValue = parseInt(object.dimValue, 10);\n                    else if (typeof object.dimValue === \"number\")\n                        message.dimValue = object.dimValue;\n                    else if (typeof object.dimValue === \"object\")\n                        message.dimValue = new $util.LongBits(object.dimValue.low >>> 0, object.dimValue.high >>> 0).toNumber();\n                if (object.dimParam != null)\n                    message.dimParam = String(object.dimParam);\n                if (object.denotation != null)\n                    message.denotation = String(object.denotation);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Dimension message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.Dimension} message Dimension\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Dimension.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.denotation = \"\";\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    if (typeof message.dimValue === \"number\")\n                        object.dimValue = options.longs === String ? String(message.dimValue) : message.dimValue;\n                    else\n                        object.dimValue = options.longs === String ? $util.Long.prototype.toString.call(message.dimValue) : options.longs === Number ? new $util.LongBits(message.dimValue.low >>> 0, message.dimValue.high >>> 0).toNumber() : message.dimValue;\n                    if (options.oneofs)\n                        object.value = \"dimValue\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    object.dimParam = message.dimParam;\n                    if (options.oneofs)\n                        object.value = \"dimParam\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    object.denotation = message.denotation;\n                return object;\n            };\n\n            /**\n             * Converts this Dimension to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Dimension.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Dimension;\n        })();\n\n        return TensorShapeProto;\n    })();\n\n    onnx.TypeProto = (function() {\n\n        /**\n         * Properties of a TypeProto.\n         * @memberof onnx\n         * @interface ITypeProto\n         * @property {onnx.TypeProto.ITensor|null} [tensorType] TypeProto tensorType\n         * @property {string|null} [denotation] TypeProto denotation\n         */\n\n        /**\n         * Constructs a new TypeProto.\n         * @memberof onnx\n         * @classdesc Represents a TypeProto.\n         * @implements ITypeProto\n         * @constructor\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         */\n        function TypeProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TypeProto tensorType.\n         * @member {onnx.TypeProto.ITensor|null|undefined} tensorType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.tensorType = null;\n\n        /**\n         * TypeProto denotation.\n         * @member {string} denotation\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.denotation = \"\";\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * TypeProto value.\n         * @member {\"tensorType\"|undefined} value\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        Object.defineProperty(TypeProto.prototype, \"value\", {\n            get: $util.oneOfGetter($oneOfFields = [\"tensorType\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new TypeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         * @returns {onnx.TypeProto} TypeProto instance\n         */\n        TypeProto.create = function create(properties) {\n            return new TypeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TypeProto message. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\"))\n                $root.onnx.TypeProto.Tensor.encode(message.tensorType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.denotation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TypeProto message, length delimited. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.tensorType = $root.onnx.TypeProto.Tensor.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.denotation = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TypeProto message.\n         * @function verify\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TypeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Tensor.verify(message.tensorType);\n                    if (error)\n                        return \"tensorType.\" + error;\n                }\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                if (!$util.isString(message.denotation))\n                    return \"denotation: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a TypeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TypeProto} TypeProto\n         */\n        TypeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TypeProto)\n                return object;\n            var message = new $root.onnx.TypeProto();\n            if (object.tensorType != null) {\n                if (typeof object.tensorType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.tensorType: object expected\");\n                message.tensorType = $root.onnx.TypeProto.Tensor.fromObject(object.tensorType);\n            }\n            if (object.denotation != null)\n                message.denotation = String(object.denotation);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TypeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.TypeProto} message TypeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TypeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.denotation = \"\";\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                object.tensorType = $root.onnx.TypeProto.Tensor.toObject(message.tensorType, options);\n                if (options.oneofs)\n                    object.value = \"tensorType\";\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                object.denotation = message.denotation;\n            return object;\n        };\n\n        /**\n         * Converts this TypeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TypeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TypeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TypeProto.Tensor = (function() {\n\n            /**\n             * Properties of a Tensor.\n             * @memberof onnx.TypeProto\n             * @interface ITensor\n             * @property {number|null} [elemType] Tensor elemType\n             * @property {onnx.ITensorShapeProto|null} [shape] Tensor shape\n             */\n\n            /**\n             * Constructs a new Tensor.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Tensor.\n             * @implements ITensor\n             * @constructor\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             */\n            function Tensor(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Tensor elemType.\n             * @member {number} elemType\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.elemType = 0;\n\n            /**\n             * Tensor shape.\n             * @member {onnx.ITensorShapeProto|null|undefined} shape\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.shape = null;\n\n            /**\n             * Creates a new Tensor instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Tensor} Tensor instance\n             */\n            Tensor.create = function create(properties) {\n                return new Tensor(properties);\n            };\n\n            /**\n             * Encodes the specified Tensor message. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.elemType);\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Tensor message, length delimited. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Tensor();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.elemType = reader.int32();\n                        break;\n                    case 2:\n                        message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Tensor message.\n             * @function verify\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Tensor.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    if (!$util.isInteger(message.elemType))\n                        return \"elemType: integer expected\";\n                if (message.shape != null && message.hasOwnProperty(\"shape\")) {\n                    var error = $root.onnx.TensorShapeProto.verify(message.shape);\n                    if (error)\n                        return \"shape.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Tensor message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             */\n            Tensor.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Tensor)\n                    return object;\n                var message = new $root.onnx.TypeProto.Tensor();\n                if (object.elemType != null)\n                    message.elemType = object.elemType | 0;\n                if (object.shape != null) {\n                    if (typeof object.shape !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Tensor.shape: object expected\");\n                    message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Tensor message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.Tensor} message Tensor\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Tensor.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.elemType = 0;\n                    object.shape = null;\n                }\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = message.elemType;\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\n                return object;\n            };\n\n            /**\n             * Converts this Tensor to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Tensor.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Tensor;\n        })();\n\n        return TypeProto;\n    })();\n\n    onnx.OperatorSetIdProto = (function() {\n\n        /**\n         * Properties of an OperatorSetIdProto.\n         * @memberof onnx\n         * @interface IOperatorSetIdProto\n         * @property {string|null} [domain] OperatorSetIdProto domain\n         * @property {number|Long|null} [version] OperatorSetIdProto version\n         */\n\n        /**\n         * Constructs a new OperatorSetIdProto.\n         * @memberof onnx\n         * @classdesc Represents an OperatorSetIdProto.\n         * @implements IOperatorSetIdProto\n         * @constructor\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         */\n        function OperatorSetIdProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * OperatorSetIdProto domain.\n         * @member {string} domain\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.domain = \"\";\n\n        /**\n         * OperatorSetIdProto version.\n         * @member {number|Long} version\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.version = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new OperatorSetIdProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto instance\n         */\n        OperatorSetIdProto.create = function create(properties) {\n            return new OperatorSetIdProto(properties);\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.domain);\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.version);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message, length delimited. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.OperatorSetIdProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.domain = reader.string();\n                    break;\n                case 2:\n                    message.version = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an OperatorSetIdProto message.\n         * @function verify\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        OperatorSetIdProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (!$util.isInteger(message.version) && !(message.version && $util.isInteger(message.version.low) && $util.isInteger(message.version.high)))\n                    return \"version: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates an OperatorSetIdProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         */\n        OperatorSetIdProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.OperatorSetIdProto)\n                return object;\n            var message = new $root.onnx.OperatorSetIdProto();\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.version != null)\n                if ($util.Long)\n                    (message.version = $util.Long.fromValue(object.version)).unsigned = false;\n                else if (typeof object.version === \"string\")\n                    message.version = parseInt(object.version, 10);\n                else if (typeof object.version === \"number\")\n                    message.version = object.version;\n                else if (typeof object.version === \"object\")\n                    message.version = new $util.LongBits(object.version.low >>> 0, object.version.high >>> 0).toNumber();\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an OperatorSetIdProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.OperatorSetIdProto} message OperatorSetIdProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        OperatorSetIdProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.version = options.longs === String ? \"0\" : 0;\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (typeof message.version === \"number\")\n                    object.version = options.longs === String ? String(message.version) : message.version;\n                else\n                    object.version = options.longs === String ? $util.Long.prototype.toString.call(message.version) : options.longs === Number ? new $util.LongBits(message.version.low >>> 0, message.version.high >>> 0).toNumber() : message.version;\n            return object;\n        };\n\n        /**\n         * Converts this OperatorSetIdProto to JSON.\n         * @function toJSON\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        OperatorSetIdProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return OperatorSetIdProto;\n    })();\n\n    return onnx;\n})();\n\nmodule.exports = $root;\n","// minimal library entry point.\n\n\"use strict\";\nmodule.exports = require(\"./src/index-minimal\");\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(\"./writer\");\nprotobuf.BufferWriter = require(\"./writer_buffer\");\nprotobuf.Reader       = require(\"./reader\");\nprotobuf.BufferReader = require(\"./reader_buffer\");\n\n// Utility\nprotobuf.util         = require(\"./util/minimal\");\nprotobuf.rpc          = require(\"./rpc\");\nprotobuf.roots        = require(\"./roots\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(\"./reader\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available accross modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(\"../util/minimal\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n                   && global\n                   && global.process\n                   && global.process.versions\n                   && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\n\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\n\n    CustomError.prototype.toString = function toString() {\n        return this.name + \": \" + this.message;\n    };\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable import/no-internal-modules */\nimport {Backend, InferenceSession, SessionHandler} from 'onnxruntime-common';\n\nimport {Session} from './onnxjs/session';\nimport {OnnxjsSessionHandler} from './onnxjs/session-handler';\n\nclass OnnxjsBackend implements Backend {\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  async init(): Promise<void> {}\n\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<SessionHandler> {\n    // NOTE: Session.Config(from onnx.js) is not compatible with InferenceSession.SessionOptions(from\n    // onnxruntime-common).\n    //       In future we should remove Session.Config and use InferenceSession.SessionOptions.\n    //       Currently we allow this to happen to make test runner work.\n    const session = new Session(options as unknown as Session.Config);\n\n    // typescript cannot merge method override correctly (so far in 4.2.3). need if-else to call the method.\n    if (typeof pathOrBuffer === 'string') {\n      await session.loadModel(pathOrBuffer);\n    } else {\n      await session.loadModel(pathOrBuffer);\n    }\n\n    return new OnnxjsSessionHandler(session);\n  }\n}\n\nexport const onnxjsBackend = new OnnxjsBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Backend, env, InferenceSession, SessionHandler} from 'onnxruntime-common';\nimport {cpus} from 'os';\n\nimport {initWasm} from './wasm/proxy-wrapper';\nimport {OnnxruntimeWebAssemblySessionHandler} from './wasm/session-handler';\n\n/**\n * This function initializes all flags for WebAssembly.\n *\n * Those flags are accessible from `ort.env.wasm`. Users are allow to set those flags before the first inference session\n * being created, to override default value.\n */\nexport const initializeFlags = (): void => {\n  if (typeof env.wasm.initTimeout !== 'number' || env.wasm.initTimeout < 0) {\n    env.wasm.initTimeout = 0;\n  }\n\n  if (typeof env.wasm.simd !== 'boolean') {\n    env.wasm.simd = true;\n  }\n\n  if (typeof env.wasm.proxy !== 'boolean') {\n    env.wasm.proxy = false;\n  }\n\n  if (typeof env.wasm.numThreads !== 'number' || !Number.isInteger(env.wasm.numThreads) || env.wasm.numThreads <= 0) {\n    const numCpuLogicalCores = typeof navigator === 'undefined' ? cpus().length : navigator.hardwareConcurrency;\n    env.wasm.numThreads = Math.min(4, Math.ceil((numCpuLogicalCores || 1) / 2));\n  }\n};\n\nclass OnnxruntimeWebAssemblyBackend implements Backend {\n  async init(): Promise<void> {\n    // populate wasm flags\n    initializeFlags();\n\n    // init wasm\n    await initWasm();\n  }\n  createSessionHandler(path: string, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\n  createSessionHandler(buffer: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<SessionHandler> {\n    const handler = new OnnxruntimeWebAssemblySessionHandler();\n    await handler.loadModel(pathOrBuffer, options);\n    return Promise.resolve(handler);\n  }\n}\n\nexport const wasmBackend = new OnnxruntimeWebAssemblyBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports */\n// We use \"require\" instead of \"import\" here because import statement must be put in top level. Our current code does\n// not allow terser to tree-shaking code as expected because some codes are treated as having side effects.\n// So we import code inside the if-clause to allow terser remove the code safely.\n\nexport * from 'onnxruntime-common';\nimport {registerBackend} from 'onnxruntime-common';\n\nif (!BUILD_DEFS.DISABLE_WEBGL) {\n  const onnxjsBackend = require('./backend-onnxjs').onnxjsBackend;\n  registerBackend('webgl', onnxjsBackend, -10);\n}\nif (!BUILD_DEFS.DISABLE_WASM) {\n  const wasmBackend = require('./backend-wasm').wasmBackend;\n  registerBackend('cpu', wasmBackend, 10);\n  registerBackend('wasm', wasmBackend, 10);\n  registerBackend('xnnpack', wasmBackend, 9);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nclass AttributeWithCacheKeyImpl {\n  constructor(attribute: Record<string, unknown>) {\n    Object.assign(this, attribute);\n  }\n\n  private _cacheKey: string;\n  public get cacheKey(): string {\n    if (!this._cacheKey) {\n      this._cacheKey =\n          Object.getOwnPropertyNames(this).sort().map(name => `${(this as Record<string, unknown>)[name]}`).join(';');\n    }\n    return this._cacheKey;\n  }\n}\n\nexport interface AttributeWithCacheKey {\n  readonly cacheKey: string;\n}\n\nexport const createAttributeWithCacheKey = <T extends Record<string, unknown>>(attribute: T): T&AttributeWithCacheKey =>\n    new AttributeWithCacheKeyImpl(attribute) as unknown as T & AttributeWithCacheKey;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\n\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {Tensor} from './tensor';\nimport {decodeUtf8String, LongUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Attribute {\n  export interface DataTypeMap {\n    float: number;\n    int: number;\n    string: string;\n    tensor: Tensor;\n    floats: number[];\n    ints: number[];\n    strings: string[];\n    tensors: Tensor[];\n  }\n\n  export type DataType = keyof DataTypeMap;\n}\n\ntype ValueTypes = Attribute.DataTypeMap[Attribute.DataType];\n\ntype Value = [ValueTypes, Attribute.DataType];\n\nexport class Attribute {\n  constructor(attributes: onnx.IAttributeProto[]|ortFbs.Attribute[]|null|undefined) {\n    this._attributes = new Map();\n    if (attributes !== null && attributes !== undefined) {\n      for (const attr of attributes) {\n        if (attr instanceof onnx.AttributeProto) {\n          this._attributes.set(attr.name, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        } else if (attr instanceof ortFbs.Attribute) {\n          this._attributes.set(attr.name()!, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        }\n      }\n      if (this._attributes.size < attributes.length) {\n        throw new Error('duplicated attribute names');\n      }\n    }\n  }\n\n  set(key: string, type: Attribute.DataType, value: ValueTypes): void {\n    this._attributes.set(key, [value, type]);\n  }\n  delete(key: string): void {\n    this._attributes.delete(key);\n  }\n  getFloat(key: string, defaultValue?: Attribute.DataTypeMap['float']) {\n    return this.get(key, 'float', defaultValue);\n  }\n\n  getInt(key: string, defaultValue?: Attribute.DataTypeMap['int']) {\n    return this.get(key, 'int', defaultValue);\n  }\n\n  getString(key: string, defaultValue?: Attribute.DataTypeMap['string']) {\n    return this.get(key, 'string', defaultValue);\n  }\n\n  getTensor(key: string, defaultValue?: Attribute.DataTypeMap['tensor']) {\n    return this.get(key, 'tensor', defaultValue);\n  }\n\n  getFloats(key: string, defaultValue?: Attribute.DataTypeMap['floats']) {\n    return this.get(key, 'floats', defaultValue);\n  }\n\n  getInts(key: string, defaultValue?: Attribute.DataTypeMap['ints']) {\n    return this.get(key, 'ints', defaultValue);\n  }\n\n  getStrings(key: string, defaultValue?: Attribute.DataTypeMap['strings']) {\n    return this.get(key, 'strings', defaultValue);\n  }\n\n  getTensors(key: string, defaultValue?: Attribute.DataTypeMap['tensors']) {\n    return this.get(key, 'tensors', defaultValue);\n  }\n\n  private get<V extends Attribute.DataTypeMap[Attribute.DataType]>(\n      key: string, type: Attribute.DataType, defaultValue?: V): V {\n    const valueAndType = this._attributes.get(key);\n    if (valueAndType === undefined) {\n      if (defaultValue !== undefined) {\n        return defaultValue;\n      }\n      throw new Error(`required attribute not found: ${key}`);\n    }\n    if (valueAndType[1] !== type) {\n      throw new Error(`type mismatch: expected ${type} but got ${valueAndType[1]}`);\n    }\n    return valueAndType[0] as V;\n  }\n\n  private static getType(attr: onnx.IAttributeProto|ortFbs.Attribute): Attribute.DataType {\n    const type = attr instanceof onnx.AttributeProto ? (attr).type : (attr as ortFbs.Attribute).type();\n    switch (type) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return 'float';\n      case onnx.AttributeProto.AttributeType.INT:\n        return 'int';\n      case onnx.AttributeProto.AttributeType.STRING:\n        return 'string';\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return 'tensor';\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return 'floats';\n      case onnx.AttributeProto.AttributeType.INTS:\n        return 'ints';\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return 'strings';\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return 'tensors';\n      default:\n        throw new Error(`attribute type is not supported yet: ${onnx.AttributeProto.AttributeType[type]}`);\n    }\n  }\n\n  private static getValue(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    const attrType = attr instanceof onnx.AttributeProto ? attr.type : (attr as ortFbs.Attribute).type();\n    if (attrType === onnx.AttributeProto.AttributeType.GRAPH || attrType === onnx.AttributeProto.AttributeType.GRAPHS) {\n      throw new Error('graph attribute is not supported yet');\n    }\n\n    const value = this.getValueNoCheck(attr);\n\n    // cast LONG to number\n    if (attrType === onnx.AttributeProto.AttributeType.INT && LongUtil.isLong(value)) {\n      return LongUtil.longToNumber(value as Long | flatbuffers.Long);\n    }\n\n    // cast LONG[] to number[]\n    if (attrType === onnx.AttributeProto.AttributeType.INTS) {\n      const arr = (value as Array<number|Long|flatbuffers.Long>);\n      const numberValue: number[] = new Array<number>(arr.length);\n\n      for (let i = 0; i < arr.length; i++) {\n        const maybeLong = arr[i];\n        numberValue[i] = LongUtil.longToNumber(maybeLong);\n      }\n\n      return numberValue;\n    }\n\n    // cast onnx.TensorProto to onnxjs.Tensor\n    if (attrType === onnx.AttributeProto.AttributeType.TENSOR) {\n      return attr instanceof onnx.AttributeProto ? Tensor.fromProto(value as onnx.ITensorProto) :\n                                                   Tensor.fromOrtTensor(value as ortFbs.Tensor);\n    }\n\n    // cast onnx.TensorProto[] to onnxjs.Tensor[]\n    if (attrType === onnx.AttributeProto.AttributeType.TENSORS) {\n      if (attr instanceof onnx.AttributeProto) {\n        const tensorProtos = value as onnx.ITensorProto[];\n        return tensorProtos.map(value => Tensor.fromProto(value));\n      } else if (attr instanceof ortFbs.Attribute) {\n        const tensorProtos = value as ortFbs.Tensor[];\n        return tensorProtos.map(value => Tensor.fromOrtTensor(value));\n      }\n    }\n\n    // cast Uint8Array to string\n    if (attrType === onnx.AttributeProto.AttributeType.STRING) {\n      // string in onnx attribute is of uint8array type, so we need to convert it to string below. While in ort format,\n      // string attributes are returned as string, so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8String = value as Uint8Array;\n        return decodeUtf8String(utf8String);\n      }\n    }\n\n    // cast Uint8Array[] to string[]\n    if (attrType === onnx.AttributeProto.AttributeType.STRINGS) {\n      // strings in onnx attribute is returned as uint8array[], so we need to convert it to string[] below. While in ort\n      // format strings attributes are returned as string[], so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8Strings = value as Uint8Array[];\n        return utf8Strings.map(decodeUtf8String);\n      }\n    }\n\n    return value as ValueTypes;\n  }\n\n  private static getValueNoCheck(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    return attr instanceof (onnx.AttributeProto) ? this.getValueNoCheckFromOnnxFormat(attr) :\n                                                   this.getValueNoCheckFromOrtFormat(attr as ortFbs.Attribute);\n  }\n\n  private static getValueNoCheckFromOnnxFormat(attr: onnx.IAttributeProto) {\n    switch (attr.type!) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return attr.f;\n      case onnx.AttributeProto.AttributeType.INT:\n        return attr.i;\n      case onnx.AttributeProto.AttributeType.STRING:\n        return attr.s;\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return attr.t;\n      case onnx.AttributeProto.AttributeType.GRAPH:\n        return attr.g;\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return attr.floats;\n      case onnx.AttributeProto.AttributeType.INTS:\n        return attr.ints;\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return attr.strings;\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return attr.tensors;\n      case onnx.AttributeProto.AttributeType.GRAPHS:\n        return attr.graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${onnx.AttributeProto.AttributeType[attr.type!]}`);\n    }\n  }\n\n  private static getValueNoCheckFromOrtFormat(attr: ortFbs.Attribute) {\n    switch (attr.type()) {\n      case ortFbs.AttributeType.FLOAT:\n        return attr.f();\n      case ortFbs.AttributeType.INT:\n        return attr.i();\n      case ortFbs.AttributeType.STRING:\n        return attr.s();\n      case ortFbs.AttributeType.TENSOR:\n        return attr.t();\n      case ortFbs.AttributeType.GRAPH:\n        return attr.g();\n      case ortFbs.AttributeType.FLOATS:\n        return attr.floatsArray();\n      case ortFbs.AttributeType.INTS: {\n        const ints = [];\n        for (let i = 0; i < attr.intsLength(); i++) {\n          ints.push(attr.ints(i)!);\n        }\n        return ints;\n      }\n      case ortFbs.AttributeType.STRINGS: {\n        const strings = [];\n        for (let i = 0; i < attr.stringsLength(); i++) {\n          strings.push(attr.strings(i));\n        }\n        return strings;\n      }\n      case ortFbs.AttributeType.TENSORS: {\n        const tensors = [];\n        for (let i = 0; i < attr.tensorsLength(); i++) {\n          tensors.push(attr.tensors(i)!);\n        }\n        return tensors;\n      }\n      // case ortFbs.AttributeType.GRAPHS:\n      // TODO: Subgraph not supported yet.\n      // const graphs = [];\n      // for (let i = 0; i < attr.graphsLength(); i++) {\n      //   graphs.push(attr.graphs(i)!);\n      // }\n      // return graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${ortFbs.AttributeType[attr.type()]}`);\n    }\n  }\n\n  protected _attributes: Map<string, Value>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {WebGLBackend} from './backends/backend-webgl';\nimport {Graph} from './graph';\nimport {Operator} from './operators';\nimport {OpSet} from './opset';\nimport {Session} from './session';\n\nexport interface InferenceHandler {\n  /**\n   * dispose the inference handler. it will be called as the last step in Session.run()\n   */\n  dispose(): void;\n}\n\nexport interface SessionHandler {\n  /**\n   * transform the graph at initialization time\n   * @param graphTransformer the graph transformer to manipulate the model graph\n   */\n  transformGraph?(graphTransformer: Graph.Transformer): void;\n\n  /**\n   * create an instance of InferenceHandler to use in a Session.run() call\n   */\n  createInferenceHandler(): InferenceHandler;\n\n  /**\n   * dispose the session handler. it will be called when a session is being disposed explicitly\n   */\n  dispose(): void;\n\n  /**\n   * Resolves the operator from the name and opset version; backend specific\n   * @param node the node to resolve\n   * @param opsets a list of opsets that exported from the model\n   * @param graph the completely initialized graph\n   */\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator;\n\n  /**\n   * This method let's the sessionHandler know that the graph initialization is complete\n   * @param graph the completely initialized graph\n   */\n  onGraphInitialized?(graph: Graph): void;\n\n  /**\n   * a reference to the corresponding backend\n   */\n  readonly backend: Backend;\n\n  /**\n   * a reference to the session context\n   */\n  readonly context: Session.Context;\n}\n\nexport interface Backend {\n  /**\n   * initialize the backend. will be called only once, when the first time the\n   * backend it to be used\n   */\n  initialize(): boolean|Promise<boolean>;\n\n  /**\n   * create an instance of SessionHandler to use in a Session object's lifecycle\n   */\n  createSessionHandler(context: Session.Context): SessionHandler;\n\n  /**\n   * dispose the backend. currently this will not be called\n   */\n  dispose(): void;\n}\n\n// caches all initialized backend instances\nconst backendsCache: Map<string, Backend> = new Map();\n\nexport const backend: {[name: string]: Backend} = {\n  webgl: new WebGLBackend(),\n};\n\n/**\n * Resolve a reference to the backend. If a hint is specified, the corresponding\n * backend will be used.\n */\nexport async function resolveBackend(hint?: string|readonly string[]): Promise<Backend> {\n  if (!hint) {\n    return resolveBackend(['webgl']);\n  } else {\n    const hints = typeof hint === 'string' ? [hint] : hint;\n\n    for (const backendHint of hints) {\n      const cache = backendsCache.get(backendHint);\n      if (cache) {\n        return cache;\n      }\n\n      const backend = await tryLoadBackend(backendHint);\n      if (backend) {\n        return backend;\n      }\n    }\n  }\n\n  throw new Error('no available backend to use');\n}\n\nasync function tryLoadBackend(backendHint: string): Promise<Backend|undefined> {\n  const backendObj = backend;\n\n  if (typeof backendObj[backendHint] !== 'undefined' && isBackend(backendObj[backendHint])) {\n    const backend = backendObj[backendHint];\n    let init = backend.initialize();\n    if (typeof init === 'object' && 'then' in init) {\n      init = await init;\n    }\n    if (init) {\n      backendsCache.set(backendHint, backend);\n      return backend;\n    }\n  }\n\n  return undefined;\n}\n\nfunction isBackend(obj: unknown) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const o = obj as any;\n\n  // check if an object is a Backend instance\n  if (\n      'initialize' in o && typeof o.initialize === 'function' &&                      // initialize()\n      'createSessionHandler' in o && typeof o.createSessionHandler === 'function' &&  // createSessionHandler()\n      'dispose' in o && typeof o.dispose === 'function'                               // dispose()\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nexport type BackendType = Backend;\nexport type SessionHandlerType = ReturnType<BackendType['createSessionHandler']>;\nexport type InferenceHandlerType = ReturnType<SessionHandlerType['createInferenceHandler']>;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {Backend, SessionHandler} from '../backend';\nimport {Logger} from '../instrument';\nimport {Session} from '../session';\n\nimport {WebGLSessionHandler} from './webgl/session-handler';\nimport {WebGLContext} from './webgl/webgl-context';\nimport {createWebGLContext} from './webgl/webgl-context-factory';\n\n/**\n * WebGLBackend is the entry point for all WebGL opeartions\n * When it starts it created the WebGLRenderingContext\n * and other main framework components such as Program and Texture Managers\n */\nexport class WebGLBackend implements Backend {\n  glContext: WebGLContext;\n\n  get contextId(): 'webgl'|'webgl2'|undefined {\n    return env.webgl.contextId;\n  }\n  set contextId(value: 'webgl'|'webgl2'|undefined) {\n    env.webgl.contextId = value;\n  }\n\n  get matmulMaxBatchSize(): number|undefined {\n    return env.webgl.matmulMaxBatchSize;\n  }\n  set matmulMaxBatchSize(value: number|undefined) {\n    env.webgl.matmulMaxBatchSize = value;\n  }\n\n  get textureCacheMode(): 'initializerOnly'|'full'|undefined {\n    return env.webgl.textureCacheMode;\n  }\n  set textureCacheMode(value: 'initializerOnly'|'full'|undefined) {\n    env.webgl.textureCacheMode = value;\n  }\n\n  get pack(): boolean|undefined {\n    return env.webgl.pack;\n  }\n  set pack(value: boolean|undefined) {\n    env.webgl.pack = value;\n  }\n\n  get async(): boolean|undefined {\n    return env.webgl.async;\n  }\n  set async(value: boolean|undefined) {\n    env.webgl.async = value;\n  }\n\n  initialize(): boolean {\n    try {\n      this.glContext = createWebGLContext(this.contextId);\n      if (typeof this.matmulMaxBatchSize !== 'number') {\n        this.matmulMaxBatchSize = 16;\n      }\n      if (typeof this.textureCacheMode !== 'string') {\n        this.textureCacheMode = 'full';\n      }\n      if (typeof this.pack !== 'boolean') {\n        this.pack = false;\n      }\n      if (typeof this.async !== 'boolean') {\n        this.async = false;\n      }\n\n      Logger.setWithEnv(env);\n\n      Logger.verbose(\n          'WebGLBackend',\n          `Created WebGLContext: ${typeof this.glContext} with matmulMaxBatchSize: ${\n              this.matmulMaxBatchSize}; textureCacheMode: ${this.textureCacheMode}; pack: ${this.pack}; async: ${\n              this.async}.`);\n      return true;\n    } catch (e) {\n      Logger.warning('WebGLBackend', `Unable to initialize WebGLBackend. ${e}`);\n      return false;\n    }\n  }\n  createSessionHandler(context: Session.Context): SessionHandler {\n    return new WebGLSessionHandler(this, context);\n  }\n  dispose(): void {\n    this.glContext.dispose();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ArrayUtil, BroadcastUtil, ShapeUtil} from '../../util';\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\nimport {squeezeShape} from './texture-layout-strategy';\nimport {TextureLayout} from './types';\nimport {generateShaderFuncNameFromInputSamplerName, generateShaderFuncNameFromInputSamplerNameAtOutCoords, getCoordsDataType, getGlChannels, getSqueezedParams, squeezeInputShape} from './utils';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class CoordsGlslLib extends GlslLib {\n  returnType: string;\n\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.offsetToCoords(),\n      ...this.coordsToOffset(),\n      ...this.toVec(),\n      ...this.valueFrom(),\n      // TODO return these only when packing is enabled.\n      ...this.getCommonUtilFuncs(),\n      ...this.getInputsSamplingSnippets(),\n      ...this.getOutputSamplingSnippet()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected offsetToCoords(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'offsetToCoords';\n    return {\n      offsetToCoords: new GlslLibRoutine(`\n      vec2 ${funcName}(int offset, int width, int height) {\n        int t = offset / width;\n        int s = offset - t*width;\n        vec2 coords = (vec2(s,t) + vec2(0.5,0.5)) / vec2(width, height);\n        return coords;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected coordsToOffset(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'coordsToOffset';\n    return {\n      coordsToOffset: new GlslLibRoutine(`\n      int ${funcName}(vec2 coords, int width, int height) {\n        float s = coords.s * float(width);\n        float t = coords.t * float(height);\n        int offset = int(t) * width + int(s);\n        return offset;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Generates code for output sampler.\n   */\n\n  protected getOutputSamplingSnippet(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    if (outputLayout.isPacked) {\n      return this.getPackedOutputSamplingSnippet(outputLayout);\n    } else {\n      return this.getUnpackedOutputSamplingSnippet(outputLayout);\n    }\n  }\n\n  /**\n   * Generates code for packed output sampler.\n   */\n  protected getPackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputPacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] = this.getOutputPacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputPacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        result[funcName] = this.getOutputPackedNDCoords(outShape, outTexShape as [number, number]);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRGBASource = `\n      void setOutput(vec4 val) {\n        ${glsl.output} = val;\n      }\n    `;\n    const floatTextureSetRGBAFuncName = 'floatTextureSetRGBA';\n    result[floatTextureSetRGBAFuncName] = new GlslLibRoutine(floatTextureSetRGBASource);\n    return result;\n  }\n\n  /**\n   * Generates code for unpacked output sampler.\n   */\n  protected getUnpackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputUnpacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] =\n            this.getOutputUnpacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputUnpacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      case 4:\n        result[funcName] = this.getOutputUnpacked4DCoords(\n            outShape as [number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 5:\n        result[funcName] = this.getOutputUnpacked5DCoords(\n            outShape as [number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 6:\n        result[funcName] = this.getOutputUnpacked6DCoords(\n            outShape as [number, number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        throw new Error(`Unsupported output dimensionality: ${outShape.length}`);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRSource = `\n        void setOutput(float val) {\n          ${glsl.output} = vec4(val, 0, 0, 0);\n        }\n    `;\n    const floatTextureSetRFuncName = 'floatTextureSetR';\n    result[floatTextureSetRFuncName] = new GlslLibRoutine(floatTextureSetRSource);\n    return result;\n  }\n\n  /**\n   * Scalar output coordinates.\n   */\n  protected getOutputScalarCoords(): GlslLibRoutine {\n    return new GlslLibRoutine(`\n      int getOutputCoords() {\n        return 0;\n      }\n    `);\n  }\n\n  /**\n   * 1D packed output coordinates.\n   */\n  protected getOutputPacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = texShape;\n    let source = '';\n    if (packedTexShape[0] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.y * ${packedTexShape[1]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    if (packedTexShape[1] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.x * ${packedTexShape[0]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                 vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          return 2 * (resTexRC.y * ${packedTexShape[0]} + resTexRC.x);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 2D packed output coordinates.\n   */\n  protected getOutputPacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    if (ArrayUtil.arraysEqual(shape, texShape)) {\n      source = `\n        ivec2 getOutputCoords() {\n          return 2 * ivec2(TexCoords.xy * vec2(${texShape[0]}, ${texShape[1]}));\n        }\n      `;\n      return new GlslLibRoutine(source);\n    }\n\n    const packedTexShape = texShape;\n    // texels needed to accommodate a logical row\n    const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n\n    /**\n     * getOutputCoords\n     *\n     * resTexRC: The rows and columns of the texels. If you move over one\n     * texel to the right in the packed texture, you are moving over one column\n     * (not two).\n     *\n     * index: The texel index\n     */\n    source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 3D packed output coordinates.\n   */\n  protected getOutputPacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n    const source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          int b = index / ${texelsInBatch};\n          index -= b * ${texelsInBatch};\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec3(b, r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * ND packed output coordinates.\n   */\n  protected getOutputPackedNDCoords(shape: readonly number[], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n\n    const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n    let texelsInBatchN = texelsInBatch;\n    let batches = '';\n    let coords = 'b, r, c';\n\n    for (let b = 2; b < shape.length - 1; b++) {\n      texelsInBatchN *= shape[shape.length - b - 1];\n      batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n      coords = `b${b}, ` + coords;\n    }\n    const source = `\n      ivec${shape.length} getOutputCoords() {\n        ivec2 resTexRC = ivec2(TexCoords.xy *\n                              vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n        int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n        ${batches}\n\n        int b = index / ${texelsInBatch};\n        index -= b * ${texelsInBatch};\n\n        // reverse r and c order for packed texture\n        int r = imod(index, ${texelsInLogicalRow}) * 2;\n        int c = 2 * (index / ${texelsInLogicalRow});\n\n        return ivec${shape.length}(${coords});\n      }\n    `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 1D output coordinates.\n   */\n  protected getOutputUnpacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          return resTexRC.y * ${texShape[0]} + resTexRC.x;\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 2D output coordinates.\n   */\n  protected getOutputUnpacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          int r = index / ${shape[1]};\n          int c = index - r * ${shape[1]};\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 3D output coordinates.\n   */\n  protected getOutputUnpacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec3(r, c, d);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 4D output coordinates.\n   */\n  protected getOutputUnpacked4DCoords(shape: [number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec4 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec4(r, c, d, d2);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 5D output coordinates.\n   */\n  protected getOutputUnpacked5DCoords(shape: [number, number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec5 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec5(r, c, d, d2, d3);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 6D output coordinates.\n   */\n  protected getOutputUnpacked6DCoords(shape: [number, number, number, number, number, number], texShape: [\n    number, number\n  ]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3', 'd4'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n     ivec6 getOutputCoords() {\n         ivec2 resTexRC = ivec2(TexCoords.xy *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n         int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n         ${coordsFromIndexSnippet}\n         return ivec6(r, c, d, d2, d3, d4);\n       }\n     `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Generates code for common UV coords computation utility functions.\n   */\n  protected getCommonUtilFuncs(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    let funcName = 'uvFromFlat';\n    result[funcName] = new GlslLibRoutine(`\n    vec2 uvFromFlat(int texNumR, int texNumC, int index) {\n      int texC = index / texNumR;\n      int texR = index - texC * texNumR;\n      // TODO: swap texR, texC order in following function so row is corresponding to u and column is corresponding to\n      //       v.\n      return (vec2(texR, texC) + halfCR) / vec2(texNumR, texNumC);\n    }\n    `);\n    funcName = 'packedUVfrom1D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n        int texelIndex = index / 2;\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom2D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom2D(int texNumR, int texNumC, int texelsInLogicalRow, int row, int col) {\n        int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom3D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom3D(int texNumR, int texNumC,\n          int texelsInBatch, int texelsInLogicalRow, int b,\n          int row, int col) {\n        int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = index / texNumC;\n        int texC = index - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'sampleTexture';\n    const glsl = getGlsl(this.context.glContext.version);\n    result[funcName] = new GlslLibRoutine(`\n        float sampleTexture(sampler2D textureSampler, vec2 uv) {\n            return ${glsl.texture2D}(textureSampler, uv).r;\n        }`);\n    return result;\n  }\n\n  /**\n   * Constructing snippets for inputs\n   */\n  protected getInputsSamplingSnippets(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const outputLayout = this.context.outputTextureLayout;\n    this.context.programInfo.inputNames.forEach((samplerName, i) => {\n      const inputLayout = this.context.inputTextureLayouts[i];\n      const funcName = generateShaderFuncNameFromInputSamplerName(samplerName);\n      if (inputLayout.isPacked) {\n        result[funcName] = this.getPackedSamplerFromInput(funcName, samplerName, inputLayout);\n      } else {\n        result[funcName] = this.getUnpackedSamplerFromInput(funcName, samplerName, inputLayout);\n      }\n\n      const outCoordFuncName = generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName);\n      if (inputLayout.unpackedShape.length <= outputLayout.unpackedShape.length) {\n        if (inputLayout.isPacked) {\n          result[outCoordFuncName] =\n              this.getPackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        } else {\n          result[outCoordFuncName] =\n              this.getUnpackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        }\n      }\n    });\n\n    return result;\n  }\n\n  /**\n   * Constructing snippets for output coordinates of samplers\n   */\n  protected getPackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texName = name;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(texName);\n\n    const inRank = inShape.length;\n    const outRank = outShape.length;\n\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n\n    const type = getCoordsDataType(outRank);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n\n    let output = 'return outputValue;';\n    const inSize = ShapeUtil.size(inShape);\n    const isInputScalar = inSize === 1;\n    const outSize = ShapeUtil.size(outShape);\n    const isOutputScalar = outSize === 1;\n\n    if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n      output = `\n        return vec4(outputValue.xy, outputValue.xy);\n      `;\n    } else if (isInputScalar && !isOutputScalar) {\n      if (outRank === 1) {\n        output = `\n          return vec4(outputValue.x, outputValue.x, 0., 0.);\n        `;\n      } else {\n        output = `\n          return vec4(outputValue.x);\n        `;\n      }\n    } else if (broadcastDims.length) {\n      const rows = inRank - 2;\n      const cols = inRank - 1;\n\n      if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.x);';\n      } else if (broadcastDims.indexOf(rows) > -1) {\n        output = 'return vec4(outputValue.x, outputValue.y, ' +\n            'outputValue.x, outputValue.y);';\n      } else if (broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.xx, outputValue.zz);';\n      }\n    }\n\n    const swapLastDimsSnippet = `\n        int lastDim = coords.${fields[outRank - 1]};\n        coords.${fields[outRank - 1]} = coords.${fields[outRank - 2]};\n        coords.${fields[outRank - 2]} = lastDim;\n      `;\n    const source = `\n      vec4 ${funcName}() {\n        ${type} coords = getOutputCoords();\n        ${swapLastDimsSnippet}\n        ${coordsSnippet}\n        vec4 outputValue = ${texFuncSnippet}(${unpackedCoordsSnippet});\n        ${output}\n      }\n    `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for unpacked output coordinates of samplers\n   */\n  protected getUnpackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const inTexShape = [inputLayout.width, inputLayout.height];\n    const inRank = inputLayout.unpackedShape.length;\n    const outRank = outputLayout.unpackedShape.length;\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(name);\n\n    if (inRank === outRank && ArrayUtil.arraysEqual(inTexShape, outTexShape)) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, TexCoords);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const type = getCoordsDataType(outRank);\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inputLayout.unpackedShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n    const source = `\n        float ${funcName}() {\n          ${type} coords = getOutputCoords();\n          ${coordsSnippet}\n          return ${texFuncSnippet}(${unpackedCoordsSnippet});\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for packed operations.\n   */\n  protected getPackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    switch (inputLayout.unpackedShape.length) {\n      case 0:\n        return this.getPackedSamplerScalar(funcName, name);\n      case 1:\n        return this.getPackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getPackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getPackedSampler3D(funcName, name, inputLayout);\n      default:\n        return this.getPackedSamplerND(funcName, name, inputLayout);\n    }\n  }\n\n  /**\n   * Constructing snippets for unpacked operations.\n   */\n  protected getUnpackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    switch (shape.length) {\n      case 0:\n        return this.getUnpackedSamplerScalar(funcName, name, inputLayout);\n      case 1:\n        return this.getUnpackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getUnpackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getUnpackedSampler3D(funcName, name, inputLayout);\n      case 4:\n        return this.getUnpackedSampler4D(funcName, name, inputLayout);\n      case 5:\n        return this.getUnpackedSampler5D(funcName, name, inputLayout);\n      case 6:\n        return this.getUnpackedSampler6D(funcName, name, inputLayout);\n      default:\n        // TODO support more dimensionalities\n        throw new Error(`Unsupported dimension ${shape.length}-D`);\n    }\n  }\n\n  /**\n   * Packed scalar snippet.\n   */\n  protected getPackedSamplerScalar(funcName: string, name: string): GlslLibRoutine {\n    const glsl = getGlsl(this.context.glContext.version);\n    const source = `\n          vec4 ${funcName}() {\n            return ${glsl.texture2D}(${name}, halfCR);\n          }\n        `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Packed 1D snippet.\n   */\n  protected getPackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[1], texShape[0]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedSampler = `vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n      ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom1D']);\n  }\n\n  /**\n   * Packed 2D snippet.\n   */\n  protected getPackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const packedSampler = `vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n        return ${glsl.texture2D}(${name}, uv);\n      }`;\n\n      return new GlslLibRoutine(packedSampler);\n    }\n    const packedTexShape = texShape;\n    const valuesPerRow = Math.ceil(shape[1] / 2);\n    const packedSampler = `vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${packedTexShape[1]}, ${packedTexShape[0]}, ${valuesPerRow}, row, col);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom2D']);\n  }\n\n  /**\n   * Packed 3D snippet.\n   */\n  protected getPackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[0], texShape[1]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    if (shape[0] === 1) {\n      const squeezedShape = shape.slice(1);\n      const keptDims = [1, 2];\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['b', 'row', 'col'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const samplerRoutine = this.getPackedSamplerFromInput(funcName, name, newInputLayout);\n      const packedSampler = `${samplerRoutine.routineBody}\n      vec4 ${funcName}(int b, int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      } `;\n      const source = packedSampler;\n      return new GlslLibRoutine(source, samplerRoutine.dependencies);\n    }\n    const texNumR = packedTexShape[0];\n    const texNumC = packedTexShape[1];\n\n    const valuesPerRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n\n    const packedSampler = `vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumC}, ${texNumR}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${name}, uv);}`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom3D']);\n  }\n  /*\n   * Packed ND snippet.\n   */\n  protected getPackedSamplerND(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const rank = shape.length;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texNumR = packedTexShape[1];\n    const texNumC = packedTexShape[0];\n    const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n    let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n    let params = 'int b, int row, int col';\n    let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n    for (let b = 2; b < rank - 1; b++) {\n      params = `int b${b}, ` + params;\n      texelsInBatch *= shape[rank - b - 1];\n      index = `b${b} * ${texelsInBatch} + ` + index;\n    }\n    const packedSampler = `vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked scalar snippet.\n   */\n  protected getUnpackedSamplerScalar(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const [texNumR, texNumC] = [inputLayout.width, inputLayout.height];\n    if (texNumR === 1 && texNumC === 1) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, halfCR);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const source = `\n        float ${funcName}() {\n          int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, offset_${name});\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 1D snippet.\n   */\n  protected getUnpackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const tNumR = inputLayout.width;\n    const tNumC = inputLayout.height;\n\n    if (tNumC === 1 && tNumR === 1) {\n      const source = `\n        float ${funcName}(int index) {\n          return sampleTexture(${name}, halfCR);\n        }\n      `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    if (tNumC === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2((float(index) + 0.5) / ${tNumR}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    if (tNumR === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2(0.5, (float(index) + 0.5) / ${tNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    const source = `\n        float ${funcName}(int index) {\n          vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 2D snippet.\n   */\n\n  protected getUnpackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n\n    // TODO: modify row/col order for other dimensions.\n    const texShape = [inputLayout.height, inputLayout.width];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const texNumR = texShape[1];\n      const texNumC = texShape[0];\n      const source = `\n          float ${funcName}(int row, int col) {\n            vec2 uv = (vec2(row, col) + halfCR) / vec2(${texNumR}.0, ${texNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const params = ['col', 'row'];\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const texNumR = texShape[1];\n    const texNumC = texShape[0];\n    if (texNumC === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    if (texNumR === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    const source = `\n        float ${funcName}(int row, int col) {\n          int index = col * ${shape[1]} + row;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 3D snippet.\n   */\n\n  protected getUnpackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride0 = shape[1] * shape[2];\n    const stride1 = shape[2];\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['batch', 'col', 'row'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const routine = this.getUnpackedSamplerFromInput(funcName, name, newInputLayout);\n      // TODO: revisit the logic here to make it simpler\n      const revDims = keptDims.reverse();\n      const source = `\n          ${routine.routineBody}\n          float ${funcName}(int batch, int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, revDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, routine.dependencies);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int depth, int row, int col) {\n            // Explicitly use integer operations as dot() only works on floats.\n            int index = depth * ${stride0} + col * ${stride1} + row;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 4D snippet.\n   */\n\n  protected getUnpackedSampler4D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride2 = shape[3];\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    //\n    // TODO: re-enable this shortcut once the index calculation bug is fixed.\n    //\n    // const {newShape, keptDims} = squeezeShape(shape as number[]);\n    // if (newShape.length < shape.length) {\n    //   const newInputShape = squeezeInputShape(shape, newShape);\n    //   const params = ['row', 'col', 'depth', 'depth2'];\n    //   // Deep copy of input texture layout.\n    //   const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n    //   newInputLayout.unpackedShape = newInputShape;\n    //   const source = `\n    //       ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n    //       float ${funcName}(int row, int col, int depth, int depth2) {\n    //         return ${funcName}(${getSqueezedParams(params, keptDims)});\n    //       }\n    //     `;\n    //   return new GlslLibRoutine(\n    //       source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    // }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2) {\n          int index = row * ${stride0} + col * ${stride1} +\n              depth2 * ${stride2} + depth;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 5D snippet.\n   */\n  protected getUnpackedSampler5D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride3 = shape[4];\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n          int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth3 * ${stride3} + depth2;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n  }\n\n  /**\n   * Unpacked 6D snippet.\n   */\n  protected getUnpackedSampler6D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride4 = shape[5];\n    const stride3 = shape[4] * stride4;\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n            ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n            float ${funcName}(int row, int col, int depth,\n              int depth2, int depth3, int depth4) {\n              return ${funcName}(${getSqueezedParams(params, keptDims)});\n            }\n          `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int row, int col, int depth,\n            int depth2, int depth3, int depth4) {\n            int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n            depth2 * ${stride3} + depth3 * ${stride4} + depth4;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * This is the main function to map from the given texture coordiantes (s,t)\n   * to logical indices for the output\n   * There will only be one single variation of this\n   * Also see coordsToOffset and offsetToIndices for input-specific versions\n   */\n  protected toVec(): {[name: string]: GlslLibRoutine} {\n    const output = this.context.outputTextureLayout;\n    const rank = output.shape.length;\n    const strides = output.strides;\n    const xScale = output.width;\n    const yScale = output.height;\n\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n        c[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= c[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n        c[${rank - 1}] = offset;`);\n    const body = `\n      void toVec(vec2 texCoords, out int c[${rank}]) {\n        int offset = coordsToOffset(texCoords, ${xScale}, ${yScale});\n        ${stridesBlock.join('')}\n      }\n      void toVec(int offset, out int c[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n    `;\n    return {toVec: new GlslLibRoutine(body, ['coordinates.coordsToOffset'])};\n  }\n  /**\n   * These are value getter functions generated for each input\n   * Each function is hardwired to the name and dimensions of the input\n   * An '_T' variation is also produced which accesses values as if the\n   * input was transposed\n   */\n  protected valueFrom(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const layout = this.context.inputTextureLayouts[i];\n      const shape = layout.unpackedShape.length > 0 ? layout.unpackedShape : layout.shape;\n      const rank = shape.length;\n      let funcName = `_${name}`;\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, false),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n      funcName = funcName + '_T';\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, true),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n    });\n    return result;\n  }\n  /**\n   * Produces one value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getValueFromSingle(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        float ${name}(int m[${rank}]) {\n          int offset = indicesToOffset${name}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          float value = getColorAsFloat(${glsl.texture2D}(${varName}, coords));\n          return value;\n        }\n        `;\n  }\n\n  /**\n   * Produces a packed value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getPackedValueFrom(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}_Pack`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        vec4 ${name}(int m[${rank}]) {\n          int offset = indicesToOffset_${varName}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          return ${glsl.texture2D}(${varName}, coords);\n        }\n        `;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ProgramInfo, TextureLayout} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport enum FunctionType {\n  ValueBased,\n  Positional\n}\nexport interface GlslFunction<T extends FunctionType> {\n  body: string;\n  name: string;\n  type: T;\n}\nexport type GlslValueFunction = GlslFunction<FunctionType.ValueBased>;\nexport interface GlslPositionalFunction extends GlslFunction<FunctionType.Positional> {\n  inputShape: readonly number[];\n  outputShape: readonly number[];\n}\n\nexport class GlslContext {\n  constructor(\n      public glContext: WebGLContext, public programInfo: ProgramInfo, public inputTextureLayouts: TextureLayout[],\n      public outputTextureLayout: TextureLayout) {}\n}\nexport abstract class GlslLib {\n  constructor(public context: GlslContext) {}\n  abstract getFunctions(): {[name: string]: GlslLibRoutine};\n  abstract getCustomTypes(): {[name: string]: string};\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies\nexport class GlslLibRoutine {\n  constructor(public routineBody: string, public dependencies?: string[]) {}\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies AS GRAPH Nodes\n// this level of abstraction is used to topologically sort routines before fragment shade inclusion\nexport class GlslLibRoutineNode {\n  dependencies: GlslLibRoutineNode[];\n  routineBody: string;\n  constructor(public name: string, routineBody?: string, dependencies?: GlslLibRoutineNode[]) {\n    if (dependencies) {\n      this.dependencies = dependencies;\n    } else {\n      this.dependencies = [];\n    }\n\n    if (routineBody) {\n      this.routineBody = routineBody;\n    }\n  }\n  addDependency(node: GlslLibRoutineNode) {\n    if (node) {\n      this.dependencies.push(node);\n    }\n  }\n}\n\n// topologically sort GLSL library routines (graph nodes abstraction) before shader script inclusion\nexport class TopologicalSortGlslRoutines {\n  static returnOrderedNodes(nodes: GlslLibRoutineNode[]): GlslLibRoutineNode[] {\n    if (!nodes || nodes.length === 0) {\n      return [];\n    }\n\n    if (nodes.length === 1) {\n      return nodes;\n    }\n\n    const cycleCheck = new Set<string>();\n    const alreadyTraversed = new Set<string>();\n    const result = new Array<GlslLibRoutineNode>();\n\n    this.createOrderedNodes(nodes, cycleCheck, alreadyTraversed, result);\n    return result;\n  }\n\n  private static createOrderedNodes(\n      graphNodes: GlslLibRoutineNode[], cycleCheck: Set<string>, alreadyTraversed: Set<string>,\n      result: GlslLibRoutineNode[]) {\n    for (let i = 0; i < graphNodes.length; ++i) {\n      this.dfsTraverse(graphNodes[i], cycleCheck, alreadyTraversed, result);\n    }\n  }\n\n  private static dfsTraverse(\n      root: GlslLibRoutineNode, cycleCheck: Set<string>, alreadyTraversed: Set<string>, result: GlslLibRoutineNode[]) {\n    // if this root has already been traversed return\n    if (!root || alreadyTraversed.has(root.name)) {\n      return;\n    }\n\n    // cyclic dependency has been detected\n    if (cycleCheck.has(root.name)) {\n      throw new Error('Cyclic dependency detected. Can\\'t topologically sort routines needed for shader.');\n    }\n\n    // hold this node to detect cycles if any\n    cycleCheck.add(root.name);\n\n    // traverse children in a dfs fashion\n    const dependencies = root.dependencies;\n    if (dependencies && dependencies.length > 0) {\n      for (let i = 0; i < dependencies.length; ++i) {\n        this.dfsTraverse(dependencies[i], cycleCheck, alreadyTraversed, result);\n      }\n    }\n\n    // add to result holder\n    result.push(root);\n\n    // mark this node as traversed so that we don't traverse from this again\n    alreadyTraversed.add(root.name);\n\n    // release the hold\n    cycleCheck.delete(root.name);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * This GLSL library handles routines converting\n * float32 to/from Unsigned byte or float 16\n */\nexport class EncodingGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.encodeFloat32(), ...this.decodeFloat32()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected encodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      encode: new GlslLibRoutine(`highp vec4 encode(highp float f) {\n        return vec4(f, 0.0, 0.0, 0.0);\n      }\n        `)\n    };\n  }\n  protected decodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      decode: new GlslLibRoutine(`highp float decode(highp vec4 rgba) {\n        return rgba.r;\n      }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode encode a 32bit float to a vec4 (of unsigned bytes)\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected encodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      encode: new GlslLibRoutine(`\n      highp vec4 encode(highp float f) {\n        highp float F = abs(f);\n        highp float Sign = step(0.0,-f);\n        highp float Exponent = floor(log2(F));\n        highp float Mantissa = (exp2(- Exponent) * F);\n        Exponent = floor(log2(F) + 127.0) + floor(log2(Mantissa));\n        highp vec4 rgba;\n        rgba[0] = 128.0 * Sign  + floor(Exponent*exp2(-1.0));\n        rgba[1] = 128.0 * mod(Exponent,2.0) + mod(floor(Mantissa*128.0),128.0);\n        rgba[2] = floor(mod(floor(Mantissa*exp2(23.0 -8.0)),exp2(8.0)));\n        rgba[3] = floor(exp2(23.0)*mod(Mantissa,exp2(-15.0)));\n        ${endianness}\n        rgba = rgba / 255.0; // values need to be normalized to [0,1]\n        return rgba;\n    }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode a vec4 of unsigned bytes to float32\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected decodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      decode: new GlslLibRoutine(`\n        highp float decode(highp vec4 rgba) {\n          rgba = rgba * 255.0; // values need to be de-normalized from [0,1] to [0,255]\n          ${endianness}\n          highp float Sign = 1.0 - step(128.0,rgba[0])*2.0;\n          highp float Exponent = 2.0 * mod(rgba[0],128.0) + step(128.0,rgba[1]) - 127.0;\n          highp float Mantissa = mod(rgba[1],128.0)*65536.0 + rgba[2]*256.0 +rgba[3] + float(0x800000);\n          highp float Result =  Sign * exp2(Exponent) * (Mantissa * exp2(-23.0 ));\n          return Result;\n      }\n        `)\n    };\n  }\n  /**\n   * Determines if the machine is little endian or not\n   * @credit: https://gist.github.com/TooTallNate/4750953\n   */\n  static isLittleEndian(): boolean {\n    const b = new ArrayBuffer(4);\n    const a = new Uint32Array(b);\n    const c = new Uint8Array(b);\n    a[0] = 0xdeadbeef;\n    if (c[0] === 0xef) {\n      return true;\n    }\n    if (c[0] === 0xde) {\n      return false;\n    }\n    throw new Error('unknown endianness');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\n\n/**\n * This GLSL library handles routines around reading a texlet and writing to it\n * Reading and writing could be more than just dealing with one channel\n * It may require encoding/decoding to/from 4 channels into one\n */\nexport class FragColorGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.setFragColor(), ...this.getColorAsFloat()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected setFragColor(): {[name: string]: GlslLibRoutine} {\n    const glsl = getGlsl(this.context.glContext.version);\n    return {\n      setFragColor: new GlslLibRoutine(\n          `\n        void setFragColor(float value) {\n            ${glsl.output} = encode(value);\n        }\n        `,\n          ['encoding.encode'])\n    };\n  }\n  protected getColorAsFloat(): {[name: string]: GlslLibRoutine} {\n    return {\n      getColorAsFloat: new GlslLibRoutine(\n          `\n        float getColorAsFloat(vec4 color) {\n            return decode(color);\n        }\n        `,\n          ['encoding.decode'])\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nconst INLINE_FUNC_DEF_REGEX = /@inline[\\s\\n\\r]+(\\w+)[\\s\\n\\r]+([0-9a-zA-Z_]+)\\s*\\(([^)]*)\\)\\s*{(([^}]|[\\n\\r])*)}/gm;\nconst FUNC_CALL_REGEX = '(\\\\w+)?\\\\s+([_0-9a-zA-Z]+)\\\\s+=\\\\s+__FUNC__\\\\((.*)\\\\)\\\\s*;';\n/**\n * GLSL preprocessor responsible for resolving @inline directives\n */\nexport function replaceInlines(script: string): string {\n  const inlineDefs: {[name: string]: {params: Array<{type: string; name: string}|null>; body: string}} = {};\n  let match;\n  while ((match = INLINE_FUNC_DEF_REGEX.exec(script)) !== null) {\n    const params = match[3]\n                       .split(',')\n                       .map(s => {\n                         const tokens = s.trim().split(' ');\n                         if (tokens && tokens.length === 2) {\n                           return {type: tokens[0], name: tokens[1]};\n                         }\n                         return null;\n                       })\n                       .filter(v => v !== null);\n    inlineDefs[match[2]] = {params, body: match[4]};\n  }\n  for (const name in inlineDefs) {\n    const regexString = FUNC_CALL_REGEX.replace('__FUNC__', name);\n    const regex = new RegExp(regexString, 'gm');\n    while ((match = regex.exec(script)) !== null) {\n      const type = match[1];\n      const variable = match[2];\n      const params = match[3].split(',');\n      const declLine = (type) ? `${type} ${variable};` : '';\n      let newBody: string = inlineDefs[name].body;\n      let paramRedecLine = '';\n      inlineDefs[name].params.forEach((v, i) => {\n        if (v) {\n          paramRedecLine += `${v.type} ${v.name} = ${params[i]};\\n`;\n        }\n      });\n      newBody = `${paramRedecLine}\\n ${newBody}`;\n      newBody = newBody.replace('return', `${variable} = `);\n      const replacement = `\n      ${declLine}\n      {\n        ${newBody}\n      }\n      `;\n      script = script.replace(match[0], replacement);\n    }\n  }\n  script = script.replace(INLINE_FUNC_DEF_REGEX, '');\n  return script;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutineNode, TopologicalSortGlslRoutines} from './glsl-definitions';\nimport {replaceInlines} from './glsl-function-inliner';\nimport {glslRegistry} from './glsl-registered-libs';\nimport {getDefaultFragShaderMain, getFragShaderPreamble} from './glsl-source';\nimport {ProgramInfo, TextureLayout, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * Preprocessor for the additions to the GLSL language\n * It deals with:\n *  @include directives\n *  @inline\n *  Loop unrolling (not implemented)\n *  Macro resolution (not implemented)\n */\nexport class GlslPreprocessor {\n  readonly context: GlslContext;\n  readonly libs: {[name: string]: GlslLib} = {};\n  readonly glslLibRoutineDependencyGraph: {[routineName: string]: GlslLibRoutineNode} = {};\n\n  constructor(\n      glContext: WebGLContext, programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[],\n      outputTextureLayout: TextureLayout) {\n    this.context = new GlslContext(glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n\n    // construct GlslLibs\n    Object.keys(glslRegistry).forEach((name: string) => {\n      const lib = new glslRegistry[name](this.context);\n      this.libs[name] = lib;\n    });\n\n    // construct GlslRoutineDependencyGraph\n    const map = this.glslLibRoutineDependencyGraph;\n    for (const libName in this.libs) {\n      const lib = this.libs[libName];\n      const routinesInLib = lib.getFunctions();\n      for (const routine in routinesInLib) {\n        const key = libName + '.' + routine;\n        let currentNode: GlslLibRoutineNode;\n        if (map[key]) {\n          currentNode = map[key];\n          currentNode.routineBody = routinesInLib[routine].routineBody;\n        } else {\n          currentNode = new GlslLibRoutineNode(key, routinesInLib[routine].routineBody);\n          map[key] = currentNode;\n        }\n        const dependencies = routinesInLib[routine].dependencies;\n        if (dependencies) {\n          for (let i = 0; i < dependencies.length; ++i) {\n            if (!map[dependencies[i]]) {\n              const node = new GlslLibRoutineNode(dependencies[i]);\n              map[dependencies[i]] = node;\n              currentNode.addDependency(node);\n            } else {\n              currentNode.addDependency(map[dependencies[i]]);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  preprocess(): string {\n    const programInfo = this.context.programInfo;\n    let source = programInfo.shaderSource;\n\n    // append main() function\n    if (!this.context.programInfo.hasMain) {\n      source = `${source}\n      ${getDefaultFragShaderMain(this.context.glContext.version, this.context.outputTextureLayout.shape.length)}`;\n    }\n    // replace inlines\n    source = replaceInlines(source);\n\n    // concat final source string\n    return `${getFragShaderPreamble(this.context.glContext.version)}\n    ${this.getUniforms(programInfo.inputNames, programInfo.variables)}\n    ${this.getImports(source)}\n    ${source}`;\n  }\n\n  protected getImports(script: string): string {\n    const routinesIncluded = this.selectGlslLibRoutinesToBeIncluded(script);\n\n    if (routinesIncluded.length === 0) {\n      return '';\n    }\n\n    let routines = '';\n    for (let i = 0; i < routinesIncluded.length; ++i) {\n      if (routinesIncluded[i].routineBody) {\n        routines += routinesIncluded[i].routineBody + '\\n';\n      } else {\n        throw new Error(`Missing body for the Glsl Library routine: ${routinesIncluded[i].name}`);\n      }\n    }\n\n    return routines;\n  }\n  private selectGlslLibRoutinesToBeIncluded(script: string): GlslLibRoutineNode[] {\n    const nodes: GlslLibRoutineNode[] = [];\n\n    Object.keys(this.glslLibRoutineDependencyGraph).forEach(classAndRoutine => {\n      const routine = classAndRoutine.split('.')[1];\n      if (script.indexOf(routine) !== -1) {\n        nodes.push(this.glslLibRoutineDependencyGraph[classAndRoutine]);\n      }\n    });\n\n    return TopologicalSortGlslRoutines.returnOrderedNodes(nodes);\n  }\n\n  protected getUniforms(samplers?: string[], variables?: VariableInfo[]): string {\n    const uniformLines: string[] = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLines.push(`uniform sampler2D ${sampler};`);\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLines.push(\n            `uniform ${variable.type} ${variable.name}${variable.arrayLength ? `[${variable.arrayLength}]` : ''};`);\n      }\n    }\n    return uniformLines.join('\\n');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {CoordsGlslLib} from './glsl-coordinate-lib';\nimport {GlslContext, GlslLib} from './glsl-definitions';\nimport {EncodingGlslLib} from './glsl-encoding-lib';\nimport {FragColorGlslLib} from './glsl-fragcolor-lib';\nimport {ShapeUtilsGlslLib} from './glsl-shape-utils-lib';\nimport {VecGlslLib} from './glsl-vec-lib';\n\nexport const glslRegistry: {[name: string]: new (context: GlslContext) => GlslLib} = {\n  'encoding': EncodingGlslLib,\n  'fragcolor': FragColorGlslLib,\n  'vec': VecGlslLib,\n  'shapeUtils': ShapeUtilsGlslLib,\n  'coordinates': CoordsGlslLib,\n  //  'arrays': ArrayGlslSLib\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class ShapeUtilsGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.bcastIndex(),\n      ...this.bcastMatmulIndex(),\n      ...this.offsetToIndices(),\n      ...this.indicesToOffset(),\n      ...this.incrementIndices()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  protected bcastIndex(): {[name: string]: GlslLibRoutine} {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].unpackedShape;\n      if (shape.length <= outputRank) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName} (int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected bcastMatmulIndex(): {[name: string]: GlslLibRoutine} {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      if (!(shape.length < 2 || shape.length > outputRank)) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastMatmulIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank - 2; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName}(int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n          realIndices[${rank - 1}] = bcastedIndices[${outputRank - 1}];\n          realIndices[${rank - 2}] = bcastedIndices[${outputRank - 2}];\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected indicesToOffset(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `indicesToOffset_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides));\n      funcName = `indicesToOffset_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static indexToOffsetSingle(name: string, rank: number, strides: readonly number[]): string {\n    let block = '';\n    for (let i = rank - 1; i >= 0; --i) {\n      block += `\n        offset += indices[${i}] * ${strides[i]};\n        `;\n    }\n    return `\n      int ${name}(int indices[${rank}]) {\n        int offset = 0;\n        ${block}\n        return offset;\n      }\n      `;\n  }\n  protected offsetToIndices(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `offsetToIndices_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides));\n      funcName = `offsetToIndices_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static offsetToIndicesSingle(name: string, rank: number, strides: readonly number[]): string {\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n      indices[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= indices[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n      indices[${rank - 1}] = offset;`);\n    return `\n      void ${name}(int offset, out int indices[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n      `;\n  }\n  protected incrementIndices(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const rank = shape.length;\n      const funcName = `incrementIndices_${name}`;\n      let shapeInit = '';\n      for (let i = 0; i < rank; ++i) {\n        shapeInit += `\n        shape[${i}] = ${shape[i]};`;\n      }\n      const body = `\n        void ${funcName}(int axis, out int indices[${rank}]) {\n          int shape[${rank}];\n          ${shapeInit};\n          for(int i = ${rank} -1 ; i >= 0; --i) {\n            if(i > axis) continue;\n            indices[i] += 1;\n            if(indices[i] < shape[i]) {\n              break;\n            }\n            indices[i] = 0;\n          }\n        }\n        `;\n      result[funcName] = new GlslLibRoutine(body);\n    });\n    return result;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/**\n * represent a version irrelevant abstraction of for GLSL source code\n */\nexport interface Glsl {\n  readonly version: string;\n  readonly attribute: string;\n  readonly varyingVertex: string;\n  readonly varyingFrag: string;\n  readonly texture2D: string;\n  readonly output: string;\n  readonly outputDeclaration: string;\n}\n\nconst GLSL_ES_2_0: Glsl = {\n  version: '',\n  attribute: 'attribute',\n  varyingVertex: 'varying',\n  varyingFrag: 'varying',\n  texture2D: 'texture2D',\n  output: 'gl_FragColor',\n  outputDeclaration: '',\n};\nconst GLSL_ES_3_0: Glsl = {\n  version: '#version 300 es',\n  attribute: 'in',\n  varyingVertex: 'out',\n  varyingFrag: 'in',\n  texture2D: 'texture',\n  output: 'outputColor',\n  outputDeclaration: 'out vec4 outputColor;',\n};\n\nexport function getGlsl(version: 1|2) {\n  return version === 1 ? GLSL_ES_2_0 : GLSL_ES_3_0;\n}\n\nexport function getVertexShaderSource(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n      precision highp float;\n      ${glsl.attribute} vec3 position;\n      ${glsl.attribute} vec2 textureCoord;\n\n      ${glsl.varyingVertex} vec2 TexCoords;\n\n      void main()\n      {\n          gl_Position = vec4(position, 1.0);\n          TexCoords = textureCoord;\n      }`;\n}\n\nexport function getFragShaderPreamble(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFrag} vec2 TexCoords;\n    ${glsl.outputDeclaration}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    // Custom vector types to handle higher dimenalities.\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    `;\n}\n\nexport function getDefaultFragShaderMain(version: 1|2, outputShapeLength: number): string {\n  const glsl = getGlsl(version);\n  return `\n  void main() {\n    int indices[${outputShapeLength}];\n    toVec(TexCoords, indices);\n    vec4 result = vec4(process(indices));\n    ${glsl.output} = result;\n  }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for vec routines\n * Vec is an varible length int array. The length is fixed at the time of\n * generating the library functions from the dimensions of the output.\n */\nexport class VecGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.binaryVecFunctions(), ...this.copyVec(), ...this.setVecItem(), ...this.getVecItem()};\n  }\n  protected binaryVecFunctions(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    const nameOp: {[name: string]: string} = {add: '+=', sub: '-=', mul: '*=', div: '/='};\n    const result: {[name: string]: GlslLibRoutine} = {};\n    for (const name in nameOp) {\n      const fname = `${name}Vec`;\n      let assignmentBlock = '';\n      for (let i = 0; i < rank; ++i) {\n        assignmentBlock += `\n          dest[${i}] ${nameOp[name]} src[${i}];\n          `;\n      }\n      const body = `\n        void ${fname}(int src[${rank}], out int dest[${rank}]) {\n          ${assignmentBlock}\n        }\n        `;\n      result[fname] = new GlslLibRoutine(body);\n    }\n\n    return result;\n  }\n  protected copyVec(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let assignmentBlock = '';\n    for (let i = 0; i < rank; ++i) {\n      assignmentBlock += `\n        dest[${i}] = src[${i}];\n        `;\n    }\n    const body = `\n      void copyVec(int src[${rank}], out int dest[${rank}]) {\n        ${assignmentBlock}\n      }\n      `;\n    return {copyVec: new GlslLibRoutine(body)};\n  }\n\n  protected setVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index =${rank} + index;\n        if (index == 0)\n            m[0] = value;\n        `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            m[${i}] = value;\n            `;\n    }\n    block += `\n        else\n            m[${rank - 1}] = value;\n        `;\n    const body = `\n      void setVecItem(out int m[${rank}], int index, int value) {\n        ${block}\n      }\n        `;\n    return {setVecItem: new GlslLibRoutine(body)};\n  }\n  protected getVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index = ${rank} + index;\n        if (index == 0)\n            return m[0];\n      `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            return m[${i}];\n      `;\n    }\n    block += `\n        else\n            return m[${rank - 1}];\n        `;\n    const body = `\n      int getVecItem(int m[${rank}], int index) {\n        ${block}\n      }\n    `;\n    return {getVecItem: new GlslLibRoutine(body)};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceHandler} from '../../backend';\nimport {Logger} from '../../instrument';\nimport {Tensor} from '../../tensor';\nimport {ShapeUtil} from '../../util';\n\nimport {createPackProgramInfoLoader} from './ops/pack';\nimport {createPackedReshape3DProgramInfoLoader, isReshapeCheap, processDims3D} from './ops/reshape-packed';\nimport {encodeAsUint8} from './ops/uint8-encode';\nimport {createUnpackProgramInfoLoader} from './ops/unpack';\nimport {WebGLSessionHandler} from './session-handler';\nimport {Encoder} from './texture-data-encoder';\nimport {calculateTextureWidthAndHeight, createTextureLayoutFromShape, createTextureLayoutFromTextureType} from './texture-layout';\nimport {Artifact, ProgramInfo, ProgramInfoLoader, TextureData, TextureLayout, TextureType} from './types';\n\nconst getProgramInfoUniqueKey =\n    (programInfo: ProgramInfo|ProgramInfoLoader, inputTextureDatas: TextureData[]): string => {\n      const inputs =\n          inputTextureDatas.map(texture => `${texture.unpackedShape.join(',')};${texture.width}x${texture.height}`)\n              .join('_');\n      let key = programInfo.name;\n      if (programInfo.cacheHint) {\n        key += '[' + programInfo.cacheHint + ']';\n      }\n      key += ':' + inputs;\n      return key;\n    };\n\nexport class WebGLInferenceHandler implements InferenceHandler {\n  private packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  private unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  constructor(public session: WebGLSessionHandler) {\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  /**\n   * @returns [width, height]\n   */\n  calculateTextureWidthAndHeight(shape: readonly number[], textureType: TextureType): [number, number] {\n    return calculateTextureWidthAndHeight(this.session.layoutStrategy, shape, textureType);\n  }\n\n  executeProgram(program: ProgramInfo|ProgramInfoLoader, inputs: readonly Tensor[]): TextureData {\n    if (inputs.length < program.inputNames.length) {\n      throw new Error(`Input size mustn't be less than ${program.inputNames.length}.`);\n    }\n    if (program.inputNames.length !== program.inputTypes.length) {\n      throw new Error('input names size does not match input types');\n    }\n\n    // create texture info for input\n    const inputTextureDatas: TextureData[] = [];\n    for (let i = 0; i < program.inputNames.length; ++i) {\n      inputTextureDatas[i] = this.getOrCreateTextureData(inputs[i], program.inputTypes[i]);\n    }\n\n    const key = getProgramInfoUniqueKey(program, inputTextureDatas);\n    let artifact = this.session.programManager.getArtifact(key);\n    const programInfo = artifact ?\n        artifact.programInfo :\n        (typeof (program as ProgramInfoLoader).get === 'function' ? (program as ProgramInfoLoader).get() :\n                                                                    (program as ProgramInfo));\n\n    // create texture info for output\n    const outputTextureLayout = createTextureLayoutFromTextureType(\n        this.session.layoutStrategy, programInfo.output.dims, programInfo.output.textureType);\n    const outputTextureData = this.createTextureData(outputTextureLayout, programInfo.output.type);\n\n    if (!artifact) {\n      artifact = this.session.programManager.build(programInfo, inputTextureDatas, outputTextureData);\n      this.session.programManager.setArtifact(key, artifact);\n    }\n\n    this.runProgram(artifact, inputTextureDatas, outputTextureData);\n    return outputTextureData;\n  }\n\n  run(program: ProgramInfoLoader, inputs: readonly Tensor[]): Tensor {\n    const outputTextureData = this.executeProgram(program, inputs);\n    return outputTextureData.tensor;\n  }\n\n  private runProgram(artifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    // input should match\n    for (let i = 0; i < inputs.length; ++i) {\n      if (!!inputs[i].isPacked !== (artifact.programInfo.inputTypes[i] === TextureType.packed)) {\n        throw new Error(`input[${i}] property packed inconsistent`);\n      }\n    }\n\n    // output should match\n    if (!!output.isPacked !== (artifact.programInfo.output.textureType === TextureType.packed)) {\n      throw new Error('output property packed inconsistent');\n    }\n\n    this.session.programManager.run(artifact, inputs, output);\n  }\n\n  /**\n   * Create a TextureData object from a tensor.\n   * Usage = Encoder.Usage.UploadOnly.\n   * If a related texture data is found in cache, returns it;\n   * Otherwise:\n   *   Creates a new texture layout if not provided;\n   *   Creates WebGLTexture with the layout;\n   *   Upload tensor data to the texture;\n   *   Creates a texture data object associated with the given tensor.\n   * @param tensor the tensor with data to upload\n   */\n  private getOrCreateTextureData(tensor: Tensor, textureType: TextureType) {\n    let td = this.getTextureData(tensor.dataId, textureType === TextureType.packed);\n\n    if (!td) {\n      // check if we have texture data in different type\n      td = this.getTextureData(tensor.dataId, textureType !== TextureType.packed);\n      if (td) {\n        if (textureType === TextureType.packed) {\n          return this.pack(td);\n        } else {\n          return this.unpack(td);\n        }\n      }\n    }\n\n    if (!td) {\n      const layout = createTextureLayoutFromTextureType(this.session.layoutStrategy, tensor.dims, textureType);\n\n      if (textureType === TextureType.packedLastDimension) {\n        const group = 1;\n        const channels = 4;\n        const shape = tensor.dims;\n        if (shape.length === 4) {\n          // pre-processing for kernel data of Conv.\n          //\n          // TODO: currently this is a hacking to overwrite Conv's weight. The correct way to do this should be:\n          // 1. implement texture based const-folding\n          // 2. create a WebGL program \"preprocessConvWeight\" to do the same work as below\n          // 3. run the program before dotProduct.\n          //\n          const adjustedKernelShape = [shape[0], Math.ceil((shape[1] * shape[2] * shape[3]) / channels)];\n          const adjustedLayout =\n              createTextureLayoutFromTextureType(this.session.layoutStrategy, adjustedKernelShape, textureType);\n          let buffer = tensor.numberData;\n          if (shape[1] * shape[2] * shape[3] % channels !== 0) {\n            const numFeatureMaps = shape[0];\n            const oldRowSize = shape[1] * shape[2] * shape[3];\n            const newRowSize = Math.ceil(oldRowSize * group / channels) * channels;\n            const newSize = numFeatureMaps * newRowSize;\n            buffer = new Float32Array(newSize);\n            for (let f = 0; f < numFeatureMaps; ++f) {\n              const oldOffset = f * oldRowSize;\n              const newOffset = f * newRowSize + f % group * oldRowSize;\n              buffer.set(tensor.numberData.subarray(oldOffset, oldOffset + oldRowSize), newOffset);\n            }\n          }\n          return this.createTextureData(adjustedLayout, tensor.type, buffer, tensor, Encoder.Usage.UploadOnly);\n        }\n      }\n\n      if (textureType === TextureType.packed) {\n        const unpackedTextureLayout =\n            createTextureLayoutFromShape(this.session.layoutStrategy, tensor.dims, 1, [], {reverseWH: true});\n        const unpackedTextureData = this.createTextureData(\n            unpackedTextureLayout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\n        td = this.pack(unpackedTextureData);\n      } else {\n        td = this.createTextureData(layout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\n      }\n    }\n    return td;\n  }\n\n  /**\n   * Create a TextureData object using the given data and bind to the given tensor.\n   * Usage = Encoder.Usage.UploadOnly.\n   * NOTE: this function is a hack for Conv implementation. should remove this function, after rewriting Conv\n   * implementation by Graph.Transformer\n   * @param dataType the tensor data type\n   * @param data the actual data to upload\n   * @param tensor the tensor to bind. tensor's data is ignored.\n   */\n  createTextureDataFromLayoutBindTensor(\n      layout: TextureLayout, dataType: Tensor.DataType, data: Tensor.NumberType, tensor: Tensor): TextureData {\n    return this.createTextureData(layout, dataType, data, tensor, Encoder.Usage.UploadOnly);\n  }\n\n  private createTextureData(\n      layout: TextureLayout, dataType: Tensor.DataType, data?: Tensor.NumberType, tensor?: Tensor,\n      usage?: Encoder.Usage): TextureData {\n    Logger.verbose('InferenceHandler', `Creating TextureData: layout:[${JSON.stringify(layout)}]`);\n    const texture = this.session.textureManager.createTextureFromLayout(dataType, layout, data, usage);\n    return this.createTextureDataFromTexture(layout, dataType, texture, tensor);\n  }\n\n  reshapeUnpacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureLayout: TextureLayout = {\n      channels: inputTD.channels,\n      height: inputTD.height,\n      width: inputTD.width,\n      // handle reshaping into scalar Tensors\n      shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n      strides: ShapeUtil.computeStrides(reshapedDims),\n      unpackedShape: reshapedDims,\n    };\n    const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  reshapePacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.packed);\n\n    // check if the reshape is 'cheap'\n    if (isReshapeCheap(input.dims, reshapedDims)) {\n      const newTextureLayout: TextureLayout = {\n        channels: inputTD.channels,\n        height: inputTD.height,\n        width: inputTD.width,\n        // handle reshaping into scalar Tensors\n        shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n        strides: ShapeUtil.computeStrides(reshapedDims),\n        unpackedShape: reshapedDims,\n        isPacked: true\n      };\n      const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n      return newTextureData.tensor;\n    }\n\n    const squeezedInputShape = processDims3D(input.dims);\n    const squeezedOutputShape = processDims3D(reshapedDims);\n\n    const squeezedInputTensor = this.reshapePacked(input, squeezedInputShape);\n    const squeezedOutputTensor = this.run(\n        createPackedReshape3DProgramInfoLoader(this, squeezedInputTensor, squeezedOutputShape), [squeezedInputTensor]);\n    const outputTensor = this.reshapePacked(squeezedOutputTensor, reshapedDims);\n    return outputTensor;\n  }\n\n  cast(input: Tensor, type: Tensor.DataType): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureData = this.createTextureDataFromTexture(inputTD as TextureLayout, type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  private createTextureDataFromTexture(\n      layout: TextureLayout, dataType: Tensor.DataType, texture: WebGLTexture, tensor?: Tensor, tensorId?: Tensor.Id) {\n    const textureData: TextureData = {\n      ...layout,\n      tensor: tensor ||\n          new Tensor(\n                  layout.unpackedShape, dataType, (_id: Tensor.Id) => this.readTexture(textureData),\n                  async (_id: Tensor.Id) => this.readTextureAsync(textureData), undefined, tensorId),\n      texture\n    };\n    this.setTextureData(textureData.tensor.dataId, textureData, layout.isPacked);\n    return textureData;\n  }\n\n  private getTextureData(tensorId: Tensor.Id, isPacked = false): TextureData|undefined {\n    return this.session.isInitializer(tensorId) ? this.session.getTextureData(tensorId, isPacked) :\n        isPacked                                ? this.packedTextureDataCache.get(tensorId) :\n                                                  this.unpackedTextureDataCache.get(tensorId);\n  }\n  setTextureData(tensorId: Tensor.Id, td: TextureData, isPacked = false): void {\n    if (this.session.isInitializer(tensorId)) {\n      this.session.setTextureData(tensorId, td, isPacked);\n    } else {\n      (isPacked ? this.packedTextureDataCache : this.unpackedTextureDataCache).set(tensorId, td);\n    }\n  }\n  isTextureLayoutCached(tensor: Tensor, isPacked = false): boolean {\n    return !!this.getTextureData(tensor.dataId, isPacked);\n  }\n\n  dispose(): void {\n    this.session.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  readTexture(textureData: TextureData): Tensor.NumberType {\n    if (textureData.isPacked) {\n      return this.readTexture(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTexture(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  async readTextureAsync(textureData: TextureData): Promise<Tensor.NumberType> {\n    if (textureData.isPacked) {\n      return this.readTextureAsync(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTextureAsync(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  pack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createPackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n\n  unpack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createUnpackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {OpSet} from '../../opset';\n\nimport {batchNormalization, parseBatchNormalizationAttributes} from './ops/batch-normalization';\nimport * as binaryOps from './ops/binary-op';\nimport {cast, parseCastAttributes} from './ops/cast';\nimport {concat, parseConcatAttributes} from './ops/concat';\nimport {conv, parseConvAttributes} from './ops/conv';\nimport {convTranspose, parseConvTransposeAttributes} from './ops/conv-transpose';\nimport {depthToSpace, parseDepthToSpaceAttributes} from './ops/depth-to-space';\nimport {flatten, parseFlattenAttributes} from './ops/flatten';\nimport {gather, parseGatherAttributes} from './ops/gather';\nimport {gemm, parseGemmAttributesV11, parseGemmAttributesV7} from './ops/gemm';\nimport {imageScaler, parseImageScalerAttributes} from './ops/image-scaler';\nimport {instanceNormalization, parseInstanceNormalizationAttributes} from './ops/instance-normalization';\nimport {matMul, parseMatMulAttributes} from './ops/matmul';\nimport {padV11, padV2, parsePadAttributesV11, parsePadAttributesV2} from './ops/pad';\nimport {averagePool, globalAveragePool, globalMaxPool, maxPool, parseAveragePoolAttributes, parseGlobalAveragePoolAttributes, parseMaxPoolAttributes} from './ops/pool';\nimport {parseReduceAttributes, reduceLogSum, reduceLogSumSquare, reduceMax, reduceMean, reduceMin, reduceProd, reduceSum} from './ops/reduce';\nimport {reshape} from './ops/reshape';\nimport {parseResizeAttributesV10, parseResizeAttributesV11, resize} from './ops/resize-packed';\nimport {shape} from './ops/shape';\nimport {parseSliceAttributes, slice, sliceV10} from './ops/slice';\nimport {parseSoftmaxAttributes, parseSoftmaxAttributesV13, softmax, softmaxV13} from './ops/softmax';\nimport {parseSplitAttributes, split} from './ops/split';\nimport {parseSqueezeAttributes, squeeze, squeezeV13} from './ops/squeeze';\nimport {sum} from './ops/sum';\nimport {tile} from './ops/tile';\nimport {parseTransposeAttributes, transpose} from './ops/transpose';\nimport * as unaryOps from './ops/unary-op';\nimport {parseUnsqueezeAttributes, unsqueeze, unsqueezeV13} from './ops/unsqueeze';\nimport {parseUpsampleAttributesV7, parseUpsampleAttributesV9, upsample} from './ops/upsample';\n\nexport const WEBGL_OP_RESOLVE_RULES: readonly OpSet.ResolveRule[] = [\n  ['Abs', '', '6+', unaryOps.abs],\n  ['Acos', '', '7+', unaryOps.acos],\n  ['Add', '', '7+', binaryOps.add],\n  ['And', '', '7+', binaryOps.and],\n  ['Asin', '', '7+', unaryOps.asin],\n  ['Atan', '', '7+', unaryOps.atan],\n  // TODO: support new attributes for AveragePool-10\n  ['AveragePool', '', '7+', averagePool, parseAveragePoolAttributes],\n  ['BatchNormalization', '', '7+', batchNormalization, parseBatchNormalizationAttributes],\n  ['Cast', '', '6+', cast, parseCastAttributes],\n  ['Ceil', '', '6+', unaryOps.ceil],\n  ['Clip', '', '6-10', unaryOps.clip, unaryOps.parseClipAttributes],\n  ['Clip', '', '11+', unaryOps.clipV11],\n  ['Concat', '', '4+', concat, parseConcatAttributes],\n  ['Conv', '', '1+', conv, parseConvAttributes],\n  ['ConvTranspose', '', '1+', convTranspose, parseConvTransposeAttributes],\n  ['Cos', '', '7+', unaryOps.cos],\n  ['Div', '', '7+', binaryOps.div],\n  ['Dropout', '', '7+', unaryOps.identity],\n  ['DepthToSpace', '', '1+', depthToSpace, parseDepthToSpaceAttributes],\n  ['Equal', '', '7+', binaryOps.equal],\n  ['Elu', '', '6+', unaryOps.elu, unaryOps.parseEluAttributes],\n  ['Exp', '', '6+', unaryOps.exp],\n  ['Flatten', '', '1+', flatten, parseFlattenAttributes],\n  ['Floor', '', '6+', unaryOps.floor],\n  ['FusedConv', 'com.microsoft', '1+', conv, parseConvAttributes],\n  ['Gather', '', '1+', gather, parseGatherAttributes],\n  ['Gemm', '', '7-10', gemm, parseGemmAttributesV7],\n  ['Gemm', '', '11+', gemm, parseGemmAttributesV11],\n  ['GlobalAveragePool', '', '1+', globalAveragePool, parseGlobalAveragePoolAttributes],\n  ['GlobalMaxPool', '', '1+', globalMaxPool],\n  ['Greater', '', '7+', binaryOps.greater],\n  ['Identity', '', '1+', unaryOps.identity],\n  ['ImageScaler', '', '1+', imageScaler, parseImageScalerAttributes],\n  ['InstanceNormalization', '', '6+', instanceNormalization, parseInstanceNormalizationAttributes],\n  ['LeakyRelu', '', '6+', unaryOps.leakyRelu, unaryOps.parseLeakyReluAttributes],\n  ['Less', '', '7+', binaryOps.less],\n  ['Log', '', '6+', unaryOps.log],\n  ['MatMul', '', '1+', matMul, parseMatMulAttributes],\n  // TODO: support new attributes for MaxPool-8 and MaxPool-10\n  ['MaxPool', '', '1+', maxPool, parseMaxPoolAttributes],\n  ['Mul', '', '7+', binaryOps.mul],\n  ['Neg', '', '6+', unaryOps.neg],\n  ['Not', '', '1+', unaryOps.not],\n  ['Or', '', '7+', binaryOps.or],\n  ['Pad', '', '2-10', padV2, parsePadAttributesV2],\n  ['Pad', '', '11+', padV11, parsePadAttributesV11],\n  ['Pow', '', '7+', binaryOps.pow],\n  ['PRelu', '', '7+', binaryOps.pRelu],\n  ['ReduceLogSum', '', '1+', reduceLogSum, parseReduceAttributes],\n  ['ReduceMax', '', '1+', reduceMax, parseReduceAttributes],\n  ['ReduceMean', '', '1+', reduceMean, parseReduceAttributes],\n  ['ReduceMin', '', '1+', reduceMin, parseReduceAttributes],\n  ['ReduceProd', '', '1+', reduceProd, parseReduceAttributes],\n  ['ReduceSum', '', '1-12', reduceSum, parseReduceAttributes],\n  ['ReduceSumSquare', '', '1+', reduceLogSumSquare, parseReduceAttributes],\n  ['Relu', '', '6+', unaryOps.relu],\n  ['Reshape', '', '5+', reshape],\n  ['Resize', '', '10', resize, parseResizeAttributesV10],\n  ['Resize', '', '11+', resize, parseResizeAttributesV11],\n  ['Shape', '', '1+', shape],\n  ['Sigmoid', '', '6+', unaryOps.sigmoid],\n  ['Sin', '', '7+', unaryOps.sin],\n  ['Slice', '', '10+', sliceV10],  // TODO: support 'steps' for Slice-10\n  ['Slice', '', '1-9', slice, parseSliceAttributes],\n  // The \"semantic\" meaning of axis has changed in opset-13.\n  ['Softmax', '', '1-12', softmax, parseSoftmaxAttributes],\n  ['Softmax', '', '13+', softmaxV13, parseSoftmaxAttributesV13],\n  // 'Split' operator has an optional attribute 'split'\n  // this attribute determines how the specified axis of input data is split.\n  // When the attribute is missing, we need the count of number of outputs\n  // so that we can determine the 'split' attribute from the runtime input to the Operator\n  ['Split', '', '2-12', split, parseSplitAttributes],\n  ['Sqrt', '', '6+', unaryOps.sqrt],\n  ['Squeeze', '', '1-12', squeeze, parseSqueezeAttributes],\n  ['Squeeze', '', '13+', squeezeV13],\n  ['Sub', '', '7+', binaryOps.sub],\n  ['Sum', '', '6+', sum],\n  ['Tan', '', '7+', unaryOps.tan],\n  ['Tanh', '', '6+', unaryOps.tanh],\n  ['Tile', '', '6+', tile],\n  ['Transpose', '', '1+', transpose, parseTransposeAttributes],\n  ['Upsample', '', '7-8', upsample, parseUpsampleAttributesV7],\n  ['Upsample', '', '9', upsample, parseUpsampleAttributesV9],\n  ['Unsqueeze', '', '1-12', unsqueeze, parseUnsqueezeAttributes],\n  ['Unsqueeze', '', '13+', unsqueezeV13],\n  ['Xor', '', '7+', binaryOps.xor],\n];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface BatchNormalizationAttributes extends AttributeWithCacheKey {\n  epsilon: number;\n  momentum: number;\n  spatial: number;\n}\n\nconst batchNormalizationProgramMetadata = {\n  name: 'BatchNormalization',\n  inputNames: ['A', 'Scale', 'B', 'Mean', 'Variance'],\n  inputTypes:\n      [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked]\n};\n\nexport const batchNormalization: OperatorImplementation<BatchNormalizationAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...batchNormalizationProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createBatchNormalizationProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseBatchNormalizationAttributes: OperatorInitialization<BatchNormalizationAttributes> =\n    (node: Graph.Node): BatchNormalizationAttributes => {\n      const epsilon = node.attributes.getFloat('epsilon', 1e-5);\n      const momentum = node.attributes.getFloat('momentum', 0.9);\n      const spatial = node.attributes.getInt('spatial', 1);\n      return createAttributeWithCacheKey({epsilon, momentum, spatial});\n    };\n\nconst createBatchNormalizationProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes):\n        ProgramInfo => {\n          const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n          const rank = inputs[0].dims.length;\n          const [scaleWidth, scaleHeight] =\n              inferenceHandler.calculateTextureWidthAndHeight(inputs[1].dims, TextureType.unpacked);\n          const shaderSource = `\n  float process(int[${rank}] indices) {\n    vec2 position = offsetToCoords(indices[1], ${scaleWidth}, ${scaleHeight});\n    float scale = getColorAsFloat(${glsl.texture2D}(Scale, position));\n    float mean = getColorAsFloat(${glsl.texture2D}(Mean, position));\n    float variance = getColorAsFloat(${glsl.texture2D}(Variance, position));\n    float b = getColorAsFloat(${glsl.texture2D}(B, position));\n\n    return scale * ( (_A(indices) - mean) / sqrt(variance + float(${attributes.epsilon})) ) + b;\n  }`;\n          return {\n            ...batchNormalizationProgramMetadata,\n            output: {dims: inputs[0].dims, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 5) {\n    throw new Error('BatchNormalization requires 5 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n  const mean = inputs[3];\n  const var_ = inputs[4];\n\n  // input should atleast have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1 || mean.dims.length !== 1 ||\n      var_.dims.length !== 1) {\n    throw new Error('invalid input shape.');\n  }\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1] || mean.dims[0] !== X.dims[1] ||\n      var_.dims[0] !== X.dims[1]) {\n    throw new Error('invalid input shape.');\n  }\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n      (B.type !== 'float32' && B.type !== 'float64') || (mean.type !== 'float32' && mean.type !== 'float64') ||\n      (var_.type !== 'float32' && var_.type !== 'float64')) {\n    throw new Error('invalid input tensor types.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\n\nexport function glslAdd(): GlslValueFunction {\n  const name = 'add_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a + b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 + v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslDiv(): GlslValueFunction {\n  const name = 'div_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a / b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 / v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslMul(): GlslValueFunction {\n  const name = 'mul_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a * b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 * v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSub(): GlslValueFunction {\n  const name = 'sub_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a - b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 - v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslEqual(): GlslValueFunction {\n  const name = 'equal_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a == b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(equal(v1, v2));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslGreater(): GlslValueFunction {\n  const name = 'greater_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a > b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r > v2.r ,\n      v1.g > v2.g,\n      v1.b > v2.b,\n      v1.a > v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLess(): GlslValueFunction {\n  const name = 'less_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a < b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r < v2.r ,\n                v1.g < v2.g,\n                v1.b < v2.b,\n                v1.a < v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslAnd(): GlslValueFunction {\n  const name = 'and_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) && bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r && b2.r ,\n                b1.g && b2.g,\n                b1.b && b2.b,\n                b1.a && b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslOr(): GlslValueFunction {\n  const name = 'or_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) || bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r || b2.r ,\n                b1.g || b2.g,\n                b1.b || b2.b,\n                b1.a || b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslXor(): GlslValueFunction {\n  const name = 'xor_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) ^^ bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r ^^ b2.r ,\n                b1.g ^^ b2.g,\n                b1.b ^^ b2.b,\n                b1.a ^^ b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslPow(): GlslValueFunction {\n  return glslBuiltinBinary('pow');\n}\nexport function glslPRelu(): GlslValueFunction {\n  const name = 'prelu_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a < 0.0 ? a * b: a;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(\n      v1.r < 0.0 ? v1.r * v2.r: v1.r,\n      v1.g < 0.0 ? v1.g * v2.g: v1.g,\n      v1.b < 0.0 ? v1.b * v2.b: v1.b,\n      v1.a < 0.0 ? v1.a * v2.a: v1.a\n      );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nfunction glslBuiltinBinary(fname: string): GlslValueFunction {\n  const name = `${fname}_`;\n  const body = `\n  float ${name}(float a, float b) {\n    return ${fname}(a, b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return ${fname}(v1, v2);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nconst createBinaryProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\n     outputTensorType: Tensor.DataType = inputs[0].type, cacheKey?: string): ProgramInfoLoader => {\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n      return {\n        name: glslFunc.name,\n        inputNames: ['A', 'B'],\n        inputTypes: [textureType, textureType],\n        cacheHint: cacheKey,\n        get: () => createBinaryProgramInfo(handler, inputs, glslFunc, outputTensorType)\n      };\n    };\n\nconst createBinaryProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\n     outputTensorType: Tensor.DataType = inputs[0].type): ProgramInfo => {\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n      let outputShape = inputs[0].dims;\n\n      const usePackedTexture = handler.session.pack;\n\n      if (isBroadcast) {\n        const calculatedShape = BroadcastUtil.calcShape(inputs[0].dims, inputs[1].dims, false);\n        if (!calculatedShape) {\n          throw new Error('Can\\'t perform binary op on the given tensors');\n        }\n        outputShape = calculatedShape;\n        const outputRank = outputShape.length;\n        const aRank = inputs[0].dims.length !== 0 ? inputs[0].dims.length : 1;\n        const bRank = inputs[1].dims.length !== 0 ? inputs[1].dims.length : 1;\n        const aBcast = inputs[0].dims.length !== 0 ? 'bcastIndices_A(indices, aindices);' : 'aindices[0] = 0;';\n        const bBcast = inputs[1].dims.length !== 0 ? 'bcastIndices_B(indices, bindices);' : 'bindices[0] = 0;';\n\n        const glsl = getGlsl(handler.session.backend.glContext.version);\n        const shaderSource = usePackedTexture ? `\n      ${glslFunc.body}\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n        vec4 result = ${glslFunc.name}(a, b);\n        ${glsl.output} = result;\n      }` :\n                                                `\n      ${glslFunc.body}\n      float process(int indices[${outputRank}]) {\n        int aindices[${aRank}];\n        int bindices[${bRank}];\n        ${aBcast}\n        ${bBcast}\n        return ${glslFunc.name}(_A(aindices), _B(bindices));\n      }`;\n\n        return {\n          name: glslFunc.name,\n          inputNames: ['A', 'B'],\n          inputTypes: [textureType, textureType],\n          output: {dims: outputShape, type: outputTensorType, textureType},\n          shaderSource,\n          hasMain: usePackedTexture\n        };\n      }\n      const glsl = getGlsl(handler.session.backend.glContext.version);\n      const shaderSource = `\n    ${glslFunc.body}\n    void main() {\n      vec4 v1 = ${glsl.texture2D}(A, TexCoords);\n      vec4 v2 = ${glsl.texture2D}(B, TexCoords);\n      vec4 result = ${glslFunc.name}(v1, v2);\n      ${glsl.output} = result;\n    }\n    `;\n\n      return {\n        name: glslFunc.name,\n        inputNames: ['A', 'B'],\n        inputTypes: [textureType, textureType],\n        output: {dims: inputs[0].dims, type: outputTensorType, textureType},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const add = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAdd()), inputs)];\n\nexport const and = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAnd(), 'bool'), inputs)];\n\nexport const div = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslDiv()), inputs)];\n\nexport const equal = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslEqual(), 'bool'), inputs)];\n\nexport const greater = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslGreater(), 'bool'), inputs)];\n\nexport const less = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslLess(), 'bool'), inputs)];\n\nexport const mul = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslMul()), inputs)];\n\nexport const or = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslOr(), 'bool'), inputs)];\n\nexport const pow = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPow()), inputs)];\n\nexport const pRelu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPRelu()), inputs)];\n\nexport const sub = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslSub()), inputs)];\n\nexport const xor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslXor(), 'bool'), inputs)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ProtoUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const cast: OperatorImplementation<Tensor.DataType> =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], to: Tensor.DataType): Tensor[] => {\n      validateInputs(inputs);\n      return [handler.cast(inputs[0], to)];\n    };\n\nexport const parseCastAttributes: OperatorInitialization<Tensor.DataType> = (node: Graph.Node): Tensor.DataType =>\n    ProtoUtil.tensorDataTypeFromProto(node.attributes.getInt('to'));\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Cast requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {ConcatAttributes} from './concat';\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nconst createPackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat (packed)',\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.packed),\n  cacheHint\n});\n\nconst createPackedConcatProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      if (axis < 0) {\n        axis = inputShape.length + axis;\n      }\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === axis) {\n            outputShape[axis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const rank = outputShape.length;\n      const coords = getChannels('coords', rank);\n      const dtype = getCoordsDataType(rank);\n      const unpackChannel = unpackFromChannel();\n\n      const shapes = inputs.map(i => i.dims);\n      const channels = getGlChannels(rank);\n      const offsets: number[] = new Array(shapes.length - 1);\n\n      offsets[0] = shapes[0][axis];\n      for (let i = 1; i < offsets.length; i++) {\n        offsets[i] = offsets[i - 1] + shapes[i][axis];\n      }\n\n      const channel = channels[axis];\n      const lastChannels = channels.slice(-2);\n      const allChannels = channels.join();\n\n      let getValueSnippet = `if (${channel} < ${offsets[0]}) {\n        return getChannel(\n            getX0(${allChannels}), vec2(${lastChannels.join()}));\n        }`;\n      for (let i = 1; i < offsets.length; i++) {\n        const shift = offsets[i - 1];\n        getValueSnippet += `\n            if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\n              return getChannel(\n                getX${i}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n                vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));\n            }`;\n      }\n      const lastIndex = offsets.length;\n      const shift = offsets[offsets.length - 1];\n      getValueSnippet += `\n            return getChannel(\n              getX${lastIndex}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n              vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));`;\n\n      const glsl = getGlsl(handler.session.backend.glContext.version);\n\n      const shaderSource = `\n          ${unpackChannel}\n          float getValue(${channels.map(x => 'int ' + x)}) {\n            ${getValueSnippet}\n          }\n\n          void main() {\n            ${dtype} coords = getOutputCoords();\n            int lastDim = coords.${channels[rank - 1]};\n            coords.${channels[rank - 1]} = coords.${channels[rank - 2]};\n            coords.${channels[rank - 2]} = lastDim;\n\n            vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\n            if (${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.g = getValue(${coords});\n            }\n\n            ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]}) {\n              result.a = getValue(${coords});\n            }\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]} &&\n                ${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.b = getValue(${coords});\n            }\n            ${glsl.output} = result;\n          }\n        `;\n\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nexport const createPackedConcatProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createPackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createPackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst getShiftedChannelsSnippet = (channels: string[], channel: string, shift: number): string => {\n  const channelIdx = channels.indexOf(channel);\n  const res = channels.map((c, idx) => {\n    if (idx === channelIdx) {\n      return `${c} - ${shift}`;\n    } else {\n      return c;\n    }\n  });\n  return res.join();\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {createPackedConcatProgramInfoLoader} from './concat-packed';\n\nexport interface ConcatAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const concat: OperatorImplementation<ConcatAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): Tensor[] => {\n      validateInputs(inputs);\n      if (inferenceHandler.session.pack && inputs[0].dims.length > 1) {\n        const output =\n            inferenceHandler.run(createPackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n        return [output];\n      } else {\n        const output =\n            inferenceHandler.run(createUnpackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n        return [output];\n      }\n    };\n\nconst createUnpackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat',\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.unpacked),\n  cacheHint\n});\n\nconst createUnpackedConcatProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      if (axis < 0) {\n        axis = inputShape.length + axis;\n      }\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === axis) {\n            outputShape[axis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const rank = outputShape.length;\n\n      const sizeInConcatAxis = new Array<number>(inputs.length);\n      let previousSum = 0;\n      for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n        previousSum += inputs[i].dims[axis];\n        sizeInConcatAxis[i] = previousSum;\n      }\n\n      let getTextureIndexWhereDataResidesMethod = '';\n      // in most cases linear search is sufficient, as in most scenarios, only 2 tensors are concatenated\n      if (inputs.length < 5) {\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n      } else {\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesBinarySearch(sizeInConcatAxis);\n      }\n\n      const fetchDataFromCorrectTextureMethod = getFetchDataFromCorrectTextureMethod(inputs.length, rank);\n      const getSizeInConcatAxisValueFromIndexMethod = getGetSizeInConcatAxisValueFromIndexMethod(sizeInConcatAxis);\n      const shaderSource = `\n        ${fetchDataFromCorrectTextureMethod}\n        ${getSizeInConcatAxisValueFromIndexMethod}\n        ${getTextureIndexWhereDataResidesMethod}\n        float process(int indices[${rank}]) {\n          int textureIndex = getTextureWhereDataResides (indices[${axis}]);\n\n          if(textureIndex != 0) {\n            indices[${axis}] = indices[${axis}] - int(getSizeInConcatAxisValueFromIndex(textureIndex-int(1)));\n          }\n\n          return fetchDataFromCorrectTexture(textureIndex, indices);\n        }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n      };\n    };\n\nconst createUnpackedConcatProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createUnpackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createUnpackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst getTextureIndexWhereDataResidesLinearSearch = (sizeInConcatAxis: number[]): string => {\n  const searchAxis = sizeInConcatAxis.map((size, i) => `if(index<${size}) {return ${i};}\n`);\n  return `int getTextureWhereDataResides(int index) {\n      ${searchAxis.join('')}\n    }`;\n};\n\n// TODO: Implement BinarySearch in GLSL\nconst getTextureIndexWhereDataResidesBinarySearch = (sizeInConcatAxis: number[]): string =>\n    getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n\nconst getFetchDataFromCorrectTextureMethod = (numberOfTensors: number, tensorRank: number) => {\n  const codeLines: string[] = [`float fetchDataFromCorrectTexture(int textureIndex, int indices[${tensorRank}]) {`];\n  for (let i = 0; i < numberOfTensors; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    } else if (i === numberOfTensors - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return _X${i}(indices); }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n  return codeLines.join('\\n');\n};\n\nconst getGetSizeInConcatAxisValueFromIndexMethod = (sizeInConcatAxis: number[]): string => {\n  const codeLines: string[] = ['int getSizeInConcatAxisValueFromIndex(int index) {'];\n  for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    } else if (i === sizeInConcatAxis.length - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return ${sizeInConcatAxis[i]}; }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n\n  return codeLines.join('\\n');\n};\n\nexport const parseConcatAttributes: OperatorInitialization<ConcatAttributes> = (node: Graph.Node): ConcatAttributes =>\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis')});\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 1) {\n    throw new Error('too few inputs');\n  }\n\n  const inputType = inputs[0].type;\n  const inputDimensionality = inputs[0].dims.length;\n\n  // TODO: Support string concat\n  if (inputType === 'string') {\n    throw new Error('string tensor is not supported yet');\n  }\n\n  for (const input of inputs) {\n    // make sure types of all inputs match\n    if (input.type !== inputType) {\n      throw new Error('input tensors should be one type');\n    }\n\n    // make sure the dimensionality of all inputs are the same\n    if (input.dims.length !== inputDimensionality) {\n      throw new Error('input tensors should have the same shape');\n    }\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../../instrument';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {getActivationSnippet} from './fuse-utils';\n\nconst createUnpackedGroupedConvProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\n  name: 'GroupedConv',\n  inputNames: hasBias ? ['X', 'W', 'Bias'] : ['X', 'W'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nconst createUnpackedGroupedConvProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\n     attributes: ConvAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += getBias(output_channel);' : '';\n      const xShape = inputs[0].dims.slice();\n      const wShape = inputs[1].dims.slice();\n      const outputChannelsPerGroup = wShape[0] / attributes.group;\n      Logger.verbose(\n          'GroupedConv',\n          `autpPad:${attributes.autoPad}, dilations:${attributes.dilations}, group:${attributes.group}, kernelShape:${\n              attributes.kernelShape}, pads:${attributes.pads}, strides:${attributes.strides}`);\n      const outputShape =\n          calculateOutputShape(xShape, wShape, attributes.dilations, attributes.pads, attributes.strides);\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n\n      const shaderSource = `\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\n  ${activationFunction}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n    ivec2 xRCCorner = coords.zw * strides - pads;\n    int group_id = output_channel / ${outputChannelsPerGroup};\n\n    float value = 0.0;\n    for (int wInChannel = 0; wInChannel < ${wShape[1]}; wInChannel++) {\n      int input_channel = group_id * ${wShape[1]} + wInChannel;\n      for (int wHeight = 0; wHeight < ${wShape[2]}; wHeight++) {\n        int xHeight = xRCCorner.x + wHeight * ${attributes.dilations[0]};\n\n        if (xHeight < 0 || xHeight >= ${xShape[2]}) {\n          continue;\n        }\n\n        for (int wWidth = 0; wWidth < ${wShape[3]}; wWidth++) {\n          int xWidth = xRCCorner.y + wWidth * ${attributes.dilations[1]};\n          if (xWidth < 0 || xWidth >= ${xShape[3]}) {\n            continue;\n          }\n\n          float xVal = getX(batch, input_channel, xWidth, xHeight);\n          float wVal = getW(output_channel, wInChannel, wWidth, wHeight);\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${processBias}\n    ${applyActivation}\n    ${glsl.output} = vec4(value, .0, .0, .0);\n  }\n`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nexport const createUnpackedGroupedConvProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes):\n        ProgramInfoLoader => {\n          const metadata = createUnpackedGroupedConvProgramMetadata(inputs.length > 2, attributes.cacheKey);\n          return {\n            ...metadata,\n            get: () => createUnpackedGroupedConvProgramInfo(inferenceHandler, inputs, metadata, attributes)\n          };\n        };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {createPackedIm2ColProgramInfoLoader} from './im2col-pack';\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\n\nexport const conv2DPackedPointwise =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const reshapedX = inferenceHandler.reshapePacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n      const reshapedK = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1]]);\n\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n      const matmulOutput = inferenceHandler.run(\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\n      return inferenceHandler.reshapePacked(matmulOutput, outputShape);\n    };\n\nexport const conv2DPacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n\n      // run im2col\n      const im2colOutput = inferenceHandler.run(\n          createPackedIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes),\n          [inputs[0]]);\n\n      // reshape kernel\n      const kernelReshaped = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1] * kshape[2] * kshape[3]]);\n\n      // run matmul\n      const matmulInputs =\n          (inputs.length === 3) ? [kernelReshaped, im2colOutput, inputs[2]] : [kernelReshaped, im2colOutput];\n      const matmulOutput = inferenceHandler.run(\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\n\n      // reshape output\n      const outputReshaped = inferenceHandler.reshapePacked(matmulOutput, outputShape);\n      return outputReshaped;\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {InferenceHandler} from '../../../backend';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\nimport {getActivationSnippet, parseInternalActivationAttributes} from './fuse-utils';\n\nconst computeTotalPad =\n    (inDim: number, stride: number, adj: number, kernel: number, dilation: number, outSize: number) =>\n        (inDim - 1) * stride + adj + (kernel - 1) * dilation + 1 - outSize;\n\nconst distributePadding = (totalPad: number, autoPad: string, pads: number[], head: number, tail: number) => {\n  const smallPad = Math.floor(totalPad / 2);\n  if (autoPad === 'SAME_UPPER') {\n    pads[head] = smallPad;\n    pads[tail] = totalPad - smallPad;\n  } else if (autoPad === 'SAME_LOWER') {\n    pads[head] = totalPad - smallPad;\n    pads[tail] = smallPad;\n  }\n};\n\nconst calculateOutputShapeAndPads =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[], autoPad: string,\n     pads: number[], strides: readonly number[], outputPadding: readonly number[], outputShape: number[]) => {\n      const spatialRank = inputShape.length - 2;\n      const updateShape = outputShape.length === 0;\n      for (let i = 0; i < spatialRank; ++i) {\n        const outSize = updateShape ? inputShape[i + 2] * strides[i] : outputShape[i];\n        const totalPad = computeTotalPad(inputShape[i + 2], strides[i], pads[i], kernelShape[i], dilations[i], outSize);\n        distributePadding(totalPad, autoPad, pads, i, i + spatialRank);\n        if (updateShape) {\n          outputShape.push(\n              strides[i] * (inputShape[i + 2] - 1) + outputPadding[i] + (kernelShape[i] - 1) * dilations[i] + 1 -\n              pads[i] - pads[i + spatialRank]);\n        }\n      }\n    };\n\nexport interface ConvTransposeAttributes extends ConvAttributes {\n  readonly outputPadding: readonly number[];\n  readonly outputShape: readonly number[];\n}\n\nexport const convTranspose: OperatorImplementation<ConvTransposeAttributes> =\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvTransposeAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);  // currently will fail if not convTranspose2D\n      return convTranspose2d(inferenceHandler, inputs, attributes);\n    };\n\nconst convTranspose2d: OperatorImplementation<ConvTransposeAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvTransposeAttributes): Tensor[] => {\n      const adjustedAttributes = getAdjustedConvTransposeAttributes(attributes, inputs);\n      return [convTranspose2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\n    };\n\nconst createConvTransposeProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'ConvTranspose',\n  inputNames: hasBias ? ['X', 'W', 'B'] : ['X', 'W'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nconst createUnpackedConvTransposeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\n     attributes: ConvTransposeAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const valueInit = hasBias ? 'getB(output_channel)' : '0.0';\n      const xShape = inputs[0].dims;\n      const wShape = inputs[1].dims;\n      const outputChannelsPerGroup = wShape[1];\n      const inputChannelsPerGroup = wShape[0] / attributes.group;\n      const outputShape = [inputs[0].dims[0], inputs[1].dims[1] * attributes.group, ...attributes.outputShape];\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n\n      const shaderSource = `\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\n  ${activationFunction}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n\n    ivec2 loc = coords.zw + pads;\n\n    int group_id = output_channel / ${outputChannelsPerGroup};\n    int wOutChannel = output_channel - group_id * ${outputChannelsPerGroup};\n\n    float value = ${valueInit};\n    for (int inChannelOffset = 0; inChannelOffset < ${inputChannelsPerGroup}; inChannelOffset++) {\n      int input_channel = group_id * ${inputChannelsPerGroup} + inChannelOffset;\n      for (int wWOff = 0; wWOff < ${wShape[2]}; wWOff++) {\n        for (int wHOff = 0; wHOff < ${wShape[3]}; wHOff++) {\n          ivec2 wOff = ivec2(wWOff * ${attributes.dilations[0]}, wHOff * ${attributes.dilations[1]});\n          ivec2 wLoc = loc - wOff;\n          ivec2 wLocIn = wLoc / strides;\n          if (\n            wLocIn * strides == wLoc &&\n            wLocIn.x >= 0 && wLocIn.x < ${xShape[2]} &&\n            wLocIn.y >= 0 && wLocIn.y < ${xShape[3]}\n          ) {\n            float xVal = getX(batch, input_channel, wLocIn.y, wLocIn.x);\n            float wVal = getW(input_channel, wOutChannel, wHOff, wWOff);\n            value += xVal * wVal;\n          }\n        }\n      }\n    }\n    ${applyActivation}\n    ${glsl.output} = vec4(value, .0, .0, .0);\n  }\n`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nconst createUnpackedConvTransposeProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvTransposeAttributes):\n        ProgramInfoLoader => {\n          const metadata = createConvTransposeProgramMetadata(inputs.length > 2, attributes.cacheKey);\n          return {\n            ...metadata,\n            get: () => createUnpackedConvTransposeProgramInfo(inferenceHandler, inputs, metadata, attributes)\n          };\n        };\n\n\nconst convTranspose2DUnpacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvTransposeAttributes):\n        Tensor => {\n          const result = inferenceHandler.run(\n              createUnpackedConvTransposeProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n          return result;\n        };\n\nconst getAdjustedConvTransposeAttributes = <T extends ConvTransposeAttributes>(attributes: T, inputs: Tensor[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  if (attributes.kernelShape.length === 0) {\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\n      kernelShape.push(inputs[1].dims[i]);\n    }\n  }\n\n  const pads = attributes.pads.slice();\n  const outputShape = attributes.outputShape.slice();\n  const inputShape = inputs[0].dims;\n  // If outputShape is not specified in the attributes of this op, infer it from the parameters\n  // Similarly, automatically infer pads if not specified\n  calculateOutputShapeAndPads(\n      inputShape, kernelShape, attributes.dilations, attributes.autoPad, pads, attributes.strides,\n      attributes.outputPadding, outputShape);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, outputShape, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvTransposeAttributes: OperatorInitialization<ConvTransposeAttributes> =\n    (node: Graph.Node): ConvTransposeAttributes => {\n      const attributes = node.attributes;\n      const activationAttributes = parseInternalActivationAttributes(attributes);\n      // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n      const autoPad = attributes.getString('auto_pad', 'NOTSET');\n      const dilations = attributes.getInts('dilations', [1, 1]);\n      const group = attributes.getInt('group', 1);\n      const kernelShape = attributes.getInts('kernel_shape', []);\n      const outputPadding = attributes.getInts('output_padding', [0, 0]);\n      const outputShape = attributes.getInts('output_shape', []);\n      const pads = attributes.getInts('pads', [0, 0, 0, 0]);\n      const strides = attributes.getInts('strides', [1, 1]);\n\n      return createAttributeWithCacheKey(\n          {autoPad, dilations, group, kernelShape, outputPadding, outputShape, pads, strides, ...activationAttributes});\n    };\n\nconst validateInputs = (inputs: Tensor[], attributes: ConvTransposeAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[1];\n  const filterInChannel = inputs[1].dims[0];\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  const featureMaps = inputs[1].dims[1] * attributes.group;\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[2].dims[0] !== featureMaps)) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // Wrong output padding dimension\n  if (attributes.outputPadding.length !== spatialRank) {\n    throw new Error(`output_padding should be ${spatialRank}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // as with kernelShape, must have same number of spatial dims as input\n  if (attributes.outputShape.length !== 0 && attributes.outputShape.length !== inputs[0].dims.length - 2) {\n    throw new Error('invalid output shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n    throw new Error('ConvTranspose input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\n    throw new Error('ConvTranspose input(bias) should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {InferenceHandler} from '../../../backend';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {createUnpackedGroupedConvProgramInfoLoader} from './conv-grouped';\nimport {conv2DPacked} from './conv-pack';\nimport {createDotProductProgramInfoLoader} from './dot-product';\nimport {InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createIm2ColProgramInfoLoader} from './im2col';\nimport {createMatmulProgramInfoLoader} from './matmul';\n\n\nexport const calculateOutputShape =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[],\n     adjustPads: readonly number[], strides: readonly number[]): number[] => {\n      const batchSize = inputShape[0];\n      const inputSpatialShape = inputShape.slice(2);\n      const spatialRank = inputSpatialShape.length;\n      const outChannels = kernelShape[0];\n      const kernelSpatialShape = kernelShape.slice(2);\n      const dilatedKernelShape = kernelSpatialShape.map((v, i) => v + (v - 1) * (dilations[i] - 1));\n      const inputSpatialShapeWithPad = inputSpatialShape.map((v, i) => v + adjustPads[i] + adjustPads[i + spatialRank]);\n      const outputSpatialShape =\n          inputSpatialShapeWithPad.map((v, i) => Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]));\n      const outputShape = [batchSize, outChannels].concat(...outputSpatialShape);\n      return outputShape;\n    };\n\nexport interface ConvAttributes extends InternalActivationAttributes, AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly dilations: readonly number[];\n  readonly group: number;\n  readonly kernelShape: readonly number[];\n  readonly pads: readonly number[];\n  readonly strides: readonly number[];\n}\n\nexport const conv: OperatorImplementation<ConvAttributes> =\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);  // currently will fail if not conv2D\n      return conv2d(inferenceHandler, inputs, attributes);\n    };\n\nconst conv2d: OperatorImplementation<ConvAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\n      const adjustedAttributes = getAdjustedConvAttributes(attributes, inputs);\n      const packMode = inferenceHandler.session.pack;\n      const isPointwise = adjustedAttributes.kernelShape[0] === 1 && adjustedAttributes.kernelShape[1] === 1;\n      if (adjustedAttributes.group > 1) {\n        const result = inferenceHandler.run(\n            createUnpackedGroupedConvProgramInfoLoader(inferenceHandler, inputs, adjustedAttributes), inputs);\n        return [result];\n      } else if (isPointwise && packMode) {\n        return [conv2DUnpackedPointwise(inferenceHandler, inputs, adjustedAttributes)];\n      } else if (packMode && inputs[0].dims.length === 4 && inputs[0].dims[0] === 1 && !isPointwise) {\n        return [conv2DPacked(inferenceHandler, inputs, adjustedAttributes)];\n      } else {\n        return [conv2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\n      }\n    };\n\nconst conv2DUnpackedPointwise =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const reshapedX = inferenceHandler.reshapeUnpacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n      const reshapedK = inferenceHandler.reshapeUnpacked(inputs[1], [kshape[0], kshape[1]]);\n\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n      const matmulOutput = inferenceHandler.run(createMatmulProgramInfoLoader(matmulInputs, attributes), matmulInputs);\n      return inferenceHandler.reshapeUnpacked(matmulOutput, outputShape);\n    };\n\nconst conv2DUnpacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const xIm2Col = inferenceHandler.run(\n          createIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes), [inputs[0]]);\n\n      const dotProductInputs = inputs.length === 3 ? [xIm2Col, inputs[1], inputs[2]] : [xIm2Col, inputs[1]];\n      const output = inferenceHandler.run(\n          createDotProductProgramInfoLoader(inferenceHandler, inputs, outputShape, attributes), dotProductInputs);\n      return output;\n    };\n\nconst getAdjustedConvAttributes = <T extends ConvAttributes>(attributes: T, inputs: Tensor[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  if (attributes.kernelShape.length === 0) {\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\n      kernelShape.push(inputs[1].dims[i]);\n    }\n  }\n  const pads = attributes.pads.slice();\n  PoolConvUtil.adjustPadsBasedOnAutoPad(\n      inputs[0].dims, attributes.strides, attributes.dilations, kernelShape, pads, attributes.autoPad);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvAttributes: OperatorInitialization<ConvAttributes> = (node: Graph.Node): ConvAttributes => {\n  const attributes = node.attributes;\n  const activationAttributes = parseInternalActivationAttributes(attributes);\n  // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n  const autoPad = attributes.getString('auto_pad', 'NOTSET');\n  const dilations = attributes.getInts('dilations', [1, 1]);\n  const group = attributes.getInt('group', 1);\n  const kernelShape = attributes.getInts('kernel_shape', []);\n  const pads = attributes.getInts('pads', [0, 0, 0, 0]);\n  const strides = attributes.getInts('strides', [1, 1]);\n\n  return createAttributeWithCacheKey({autoPad, dilations, group, kernelShape, pads, strides, ...activationAttributes});\n};\n\nconst validateInputs = (inputs: Tensor[], attributes: ConvAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[1];\n  const filterInChannel = inputs[1].dims[1] * attributes.group;\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n    throw new Error('Conv input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\n    throw new Error('Conv input(bias) should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {transpose, TransposeAttributes} from './transpose';\n\nexport interface DepthToSpaceAttributes {\n  mode: 'DCR'|'CRD';\n  blocksize: number;\n}\n\nexport const depthToSpace: OperatorImplementation<DepthToSpaceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: DepthToSpaceAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const blocksize = attributes.blocksize;\n      const blocksizeSqr = blocksize * blocksize;\n      const transposePerm = attributes.mode === 'DCR' ? [0, 3, 4, 1, 5, 2] : [0, 1, 4, 2, 5, 3];\n      const firstReshapeShape = attributes.mode === 'DCR' ?\n          [\n            inputs[0].dims[0], blocksize, blocksize, inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2],\n            inputs[0].dims[3]\n          ] :\n          [\n            inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, blocksize, blocksize, inputs[0].dims[2],\n            inputs[0].dims[3]\n          ];\n\n      // const transpose = new WebGLTranspose();\n      // const attributes = new Attribute(undefined);\n      // attributes.set('perm', 'ints', transposePerm);\n      // transpose.initialize(attributes);\n\n      // First reshape\n      const firstReshapedTensor = inferenceHandler.reshapeUnpacked(inputs[0], firstReshapeShape);\n\n      // transpose\n      const transposeAttributes: TransposeAttributes = {perm: transposePerm, cacheKey: `${transposePerm}`};\n      const [transposeOutput] = transpose(inferenceHandler, [firstReshapedTensor], transposeAttributes);\n\n      // Second reshape\n      const secondReshapeShape = [\n        inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2] * blocksize,\n        inputs[0].dims[3] * blocksize\n      ];\n      const result = inferenceHandler.reshapeUnpacked(transposeOutput, secondReshapeShape);\n      return [result];\n    };\n\nexport const parseDepthToSpaceAttributes: OperatorInitialization<DepthToSpaceAttributes> =\n    (node: Graph.Node): DepthToSpaceAttributes => {\n      // processing node attributes\n      const blocksize = node.attributes.getInt('blocksize');\n      if (blocksize < 1) {\n        throw new Error(`blocksize must be >= 1, but got : ${blocksize} for DepthToSpace`);\n      }\n      const mode = node.attributes.getString('mode', 'DCR');\n      if (mode !== 'DCR' && mode !== 'CRD') {\n        throw new Error(`unrecognized mode: ${mode} for DepthToSpace`);\n      }\n      return {mode, blocksize};\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (inputs.length !== 1) {\n    throw new Error(`DepthToSpace expect 1 inputs, but got ${inputs.length}`);\n  }\n\n  // Input has to be a 4-D tensor\n  // TODO: Support string depth-to-space.\n  if (inputs[0].type === 'string' || inputs[0].dims.length !== 4) {\n    throw new TypeError('DepthToSpace input should be a 4-D numeric tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {getActivationSnippet, InternalActivationAttributes} from './fuse-utils';\nimport {calculateIm2ColDims} from './im2col';\n\nconst createDotProductProgramMetadata = (hasBias: boolean, attributes: InternalActivationAttributes) => ({\n  name: 'ConvDotProduct',\n  inputNames: hasBias ? ['Im2Col', 'K', 'B'] : ['Im2Col', 'K'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.packedLastDimension],\n  cacheKey: attributes.activationCacheKey\n});\n\nconst createDotProductProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: readonly Tensor[],\n     outputShape: number[], attributes: InternalActivationAttributes): ProgramInfo => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const adjustedKernelShape = [kshape[0], Math.ceil((xshape[1] * kshape[2] * kshape[3]) / 4)];\n      const im2colShape = calculateIm2ColDims(xshape, kshape, outputShape);\n      const [kWidth, kHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(adjustedKernelShape, TextureType.packedLastDimension);\n\n      const im2colStrides = ShapeUtil.computeStrides(im2colShape);\n      const [im2colWidth, im2colHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(im2colShape, TextureType.packedLastDimension);\n      const rank = outputShape.length;\n\n      const initValue = (inputs.length < 3) ? '0.0' : '_B(b)';\n      const sharedDim = Math.ceil(xshape[1] * kshape[2] * kshape[3] / 4);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n${activationFunction}\nfloat process(int indices[${rank}]) {\n  int b[1];\n  b[0] = indices[1];\n  int im2col[4];\n  im2col[0] = indices[0];\n  im2col[1] = indices[2];\n  im2col[2] = indices[3];\n  int im2colOffset = im2col[0] * ${im2colStrides[0]} + im2col[1] * ${im2colStrides[1]} + im2col[2] * ${\n          im2colStrides[2]};\n  int kernelOffset = indices[1] * ${adjustedKernelShape[1]};\n  float value = ${initValue};\n  for (int i = 0; i < ${sharedDim}; ++i) {\n    vec2 im2colCoords = offsetToCoords(im2colOffset, ${im2colWidth}, ${im2colHeight});\n    vec2 kernelCoords = offsetToCoords(kernelOffset, ${kWidth}, ${kHeight});\n    value += dot(${glsl.texture2D}(Im2Col, im2colCoords), ${glsl.texture2D}(K, kernelCoords));\n    ++im2colOffset;\n    ++kernelOffset;\n  }\n  ${applyActivation}\n  return value;\n}`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nexport const createDotProductProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], outputShape: number[],\n     attributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createDotProductProgramMetadata(inputs.length > 2, attributes);\n      return {\n        ...metadata,\n        get: () => createDotProductProgramInfo(inferenceHandler, metadata, inputs, outputShape, attributes)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const flatten: OperatorImplementation<number> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number): Tensor[] => {\n      validateInputs(inputs, axis);\n\n      const outputDims = ShapeUtil.flattenShape(inputs[0].dims, axis);\n      return [inferenceHandler.reshapeUnpacked(inputs[0], outputDims)];\n    };\n\nexport const parseFlattenAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n    node.attributes.getInt('axis', 1);  // default axis is 1\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Flatten requires 1 input.');\n  }\n\n  const r = inputs[0].dims.length;\n  if (r === 0) {\n    throw new Error('scalar tensor is not supported.');\n  }\n\n  if (axis < -r || axis > r) {\n    throw new Error('Invalid axis');\n  }\n\n  // TODO: Support string type\n  if (inputs[0].type === 'string') {\n    throw new Error('string tensor is not supported.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../../../attribute';\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\nimport {GlslValueFunction} from '../glsl-definitions';\n\nimport {glslClip, glslRelu, glslSigmoid} from './unary-op';\n\nexport interface InternalActivationAttributes {\n  readonly activation: string;\n  readonly clipMin?: number;\n  readonly clipMax?: number;\n  readonly activationCacheKey: string;\n}\n\nexport function getActivationSnippet(attributes: InternalActivationAttributes) {\n  let func: GlslValueFunction;\n  switch (attributes.activation) {\n    case 'Relu':\n      func = glslRelu();\n      break;\n    case 'Sigmoid':\n      func = glslSigmoid();\n      break;\n    case 'Clip':\n      func = glslClip(attributes.clipMin!, attributes.clipMax!);\n      break;\n    // TODO: adding other activations that can be fused.\n    default:\n      return {activationFunction: '', applyActivation: ''};\n  }\n\n  const activationName = func.name;\n  const activationFunction = func.body;\n  const applyActivation = `value = ${activationName}_(value);`;\n  return {activationFunction, applyActivation};\n}\n\nexport const parseInternalActivationAttributes = (attributes: Attribute): InternalActivationAttributes => {\n  const activation = attributes.getString('activation', '');\n\n  if (activation === 'Clip') {\n    const [clipMin, clipMax] = attributes.getFloats('activation_params', [MIN_CLIP, MAX_CLIP]);\n    return {activation, clipMax, clipMin, activationCacheKey: `${activation}:${clipMin},${clipMax}`};\n  }\n  return {activation, activationCacheKey: activation};\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\ninterface GatherAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const gather: OperatorImplementation<GatherAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): Tensor[] => {\n      validateInputs(inputs, attributes.axis);\n      const output = inferenceHandler.run(createGatherProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n      return [output];\n    };\n\nexport const parseGatherAttributes: OperatorInitialization<GatherAttributes> = (node: Graph.Node): GatherAttributes =>\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 0)});\n\nconst gatherProgramMetadata = {\n  name: 'Gather',\n  inputNames: ['A', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createGatherProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      const indexDataShape = inputs[1].dims.slice();\n      const outputShape = new Array(inputShape.length + indexDataShape.length - 1);\n\n      axis = ShapeUtil.normalizeAxis(axis, inputShape.length);\n      const indexCopyOps: string[] = [];\n      for (let i = 0; i < outputShape.length; i++) {\n        // outputShape is divided into three parts: A, B, C\n        // |0        axis|  axis + indexDataShape.length |          end|\n        // |     A       |             B                 |      C      |\n        //\n        // inputIdx: [A, inputs[1][B], C]\n        if (i < axis) {  // A\n          outputShape[i] = inputShape[i];\n          indexCopyOps.push(`inputIdx[${i}] = outputIdx[${i}];`);\n        } else {\n          if (i < axis + indexDataShape.length) {  // B\n            outputShape[i] = indexDataShape[i - axis];\n            indexCopyOps.push(`indexDataIdx[${i - axis}] = outputIdx[${i}];`);\n          } else {                                                       // C\n            outputShape[i] = inputShape[i - indexDataShape.length + 1];  // skip 1 for axis\n            indexCopyOps.push(`inputIdx[${i - indexDataShape.length + 1}] = outputIdx[${i}];`);\n          }\n        }\n      }\n\n      const orank = outputShape.length || 1;\n      const irank = inputShape.length;\n      const iDrank = indexDataShape.length || 1;\n      const shaderSource = `\n      float process(int outputIdx[${orank}]) {\n        int inputIdx[${irank}];\n        int indexDataIdx[${iDrank}];\n        indexDataIdx[0] = 0;\n        ${indexCopyOps.join('\\n        ')}\n        int idx = int(_B(indexDataIdx));\n        inputIdx[${axis}] = idx < 0 ? idx + ${inputShape[axis]} : idx;\n        return _A(inputIdx);\n      }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst createGatherProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): ProgramInfoLoader => {\n      const metadata = {...gatherProgramMetadata, cacheHint: attributes.cacheKey};\n      return {...metadata, get: () => createGatherProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Gather requires 2 inputs.');\n  }\n  const tensorRank = inputs[0].dims.length;\n  if (tensorRank < 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (axis < -tensorRank || axis > tensorRank - 1) {\n    throw new Error('Invalid axis.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invaid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invaid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {GemmUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport interface GemmAttributes extends AttributeWithCacheKey {\n  transA: boolean;\n  transB: boolean;\n  alpha: number;\n  beta: number;\n  isOptionalC: boolean;  // in opset 11, C becomes optional\n}\n\nexport const gemm: OperatorImplementation<GemmAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GemmAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(createGemmProgramInfoLoader(inputs, attributes), inputs);\n      return [output];\n    };\n\nconst parseGemmAttributes = (node: Graph.Node, isOptionalC: boolean): GemmAttributes => {\n  const transA = node.attributes.getInt('transA', 0) !== 0;\n  const transB = node.attributes.getInt('transB', 0) !== 0;\n  const alpha = node.attributes.getFloat('alpha', 1.0);\n  const beta = node.attributes.getFloat('beta', 1.0);\n  return createAttributeWithCacheKey({transA, transB, alpha, beta, isOptionalC});\n};\n\nexport const parseGemmAttributesV7: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n    parseGemmAttributes(node, false);\n\nexport const parseGemmAttributesV11: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n    parseGemmAttributes(node, true);\n\nconst createGemmProgramInfoLoader = (inputs: Tensor[], attributes: GemmAttributes): ProgramInfoLoader => {\n  const metadata = {\n    name: 'Gemm',\n    inputNames: inputs.length === 3 ? ['A', 'B', 'C'] : ['A', 'B'],\n    inputTypes: inputs.length === 3 ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                                      [TextureType.unpacked, TextureType.unpacked],\n    key: attributes.cacheKey\n  };\n\n  return {...metadata, get: () => createGemmProgramInfo(metadata, inputs, attributes)};\n};\n\nconst createGemmProgramInfo =\n    (metadata: ProgramMetadata, inputs: Tensor[], attributes: GemmAttributes): ProgramInfo => {\n      const aShape = inputs[0].dims.slice();\n      const bShape = inputs[1].dims.slice();\n      const [M, N] = GemmUtil.getShapeOfGemmResult(\n          aShape, attributes.transA, bShape, attributes.transB, inputs.length === 3 ? inputs[2].dims : undefined);\n      const outputShape = [M, N];\n      if (!outputShape) {\n        throw new Error('Can\\'t use gemm on the given tensors');\n      }\n      let sharedDim = aShape[aShape.length - 1];\n      let line = '';\n      if (attributes.transA) {\n        sharedDim = aShape[0];\n      }\n      if (attributes.transA && attributes.transB) {\n        line = 'value += _A_T(a) * _B_T(b);';\n      } else if (attributes.transA && !attributes.transB) {\n        line = 'value += _A_T(a) * _B(b);';\n      } else if (!attributes.transA && attributes.transB) {\n        line = 'value += _A(a) * _B_T(b);';\n      } else if (!attributes.transA && !attributes.transB) {\n        line = 'value += _A(a) * _B(b);';\n      }\n      const rank = outputShape.length;\n      const declareC = inputs.length === 3 ? `int c[${inputs[2].dims.length}];` : '';\n      const broadcastC = inputs.length === 3 ? 'bcastIndices_C(indices, c);' : '';\n      const calculateC = inputs.length === 3 ? 'value += beta * _C(c);' : '';\n      const shaderSource = `\n      float process(int indices[${rank}]) {\n          int a[${rank}];\n          int b[${rank}];\n          ${declareC}\n\n          copyVec(indices, a);\n          copyVec(indices, b);\n          ${broadcastC}\n\n          float value = 0.0;\n          for (int k=0; k<${sharedDim}; ++k) {\n              a[${rank - 1}] = k;\n              b[${rank - 2}] = k;\n              ${line}\n          }\n\n          value = value * alpha;\n          ${calculateC}\n          return value;\n      }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        variables: [\n          {name: 'alpha', type: 'float', data: attributes.alpha}, {name: 'beta', type: 'float', data: attributes.beta}\n        ],\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[], attributes: GemmAttributes): void => {\n  if (!inputs) {\n    throw new Error('Input is missing');\n  }\n  if (attributes.isOptionalC && (inputs.length < 2 || inputs.length > 3)) {\n    throw new Error('Invaid input shape.');\n  }\n  if (!attributes.isOptionalC && inputs.length !== 3) {\n    throw new Error('Gemm requires 3 inputs');\n  }\n\n  // 'C' can be of dimensionality 1 or 2 only\n  if (inputs.length === 3 && inputs[2].dims.length !== 1 && inputs[2].dims.length !== 2) {\n    throw new Error('Invalid input shape of C');\n  }\n\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64') ||\n      (inputs.length === 3 && inputs[2].type !== 'float32' && inputs[2].type !== 'float64')) {\n    throw new Error('Invalid input type.');\n  }\n\n  if ((inputs[0].type !== inputs[1].type) || (inputs.length === 3 && inputs[0].type !== inputs[2].type)) {\n    throw new Error('Input types are mismatched');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\nimport {unpackFromChannel} from './packing-utils';\n\nconst createPackedIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col (packed)',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed],\n  cacheHint,\n});\n\nconst createPackedIm2ColProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\n      const xshape = x.dims;\n      const wshape = w.dims;\n      const rowDim = 2;\n      const colDim = 3;\n      const rank = outputShape.length;\n      const im2colShape = [wshape[1] * wshape[2] * wshape[3], outputShape[2] * outputShape[3]];\n      const kernelSize = wshape[2] * wshape[3];\n      const unpackChannel = unpackFromChannel();\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      let unrolled = '';\n\n      for (let row = 0; row <= 1; row++) {\n        for (let col = 0; col <= 1; col++) {\n          unrolled += `\n            blockIndex = rc.x + ${col};\n            pos = rc.y + ${row};\n\n            if(blockIndex < ${im2colShape[1]} && pos < ${im2colShape[0]}) {\n              offsetY = int(blockIndex / (${outputShape[rank - 1]})) * ${attributes.strides[0]} -\n                ${attributes.pads[0]};\n              d0 = offsetY + ${attributes.dilations[0]} * (imod(pos, ${kernelSize}) / ${wshape[2]});\n\n              if(d0 < ${xshape[rowDim]} && d0 >= 0) {\n                offsetX = imod(blockIndex, ${outputShape[rank - 1]}) * ${attributes.strides[1]} -\n                  ${attributes.pads[1]};\n                d1 = offsetX + ${attributes.dilations[1]} * imod(imod(pos, ${kernelSize}), ${wshape[2]});\n\n                if(d1 < ${xshape[colDim]} && d1 >= 0) {\n\n                  ch = int(float(pos)/ ${kernelSize}.);\n                    innerDims = vec2(d0, d1);\n                    result[${row * 2 + col}] = getChannel(\n                      getA(0, ch, int(innerDims.x),\n                      int(innerDims.y)), innerDims);\n                }\n              }\n            }\n\n          `;\n        }\n      }\n\n      const shaderSource = `\n      ${unpackChannel}\n\n      void main() {\n        ivec2 rc = getOutputCoords();\n          vec4 result = vec4(0.0);\n          int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n          vec2 innerDims;\n          ${unrolled}\n          ${glsl.output} = result;\n      }\n            `;\n      return {\n        ...metadata,\n        output: {dims: im2colShape, type: x.type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const createPackedIm2ColProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\n     attributes: ConvAttributes): ProgramInfoLoader => {\n      const metadata = createPackedIm2ColProgramMetadata(attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createPackedIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\n\nconst createIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n  cacheHint,\n});\n\nconst createIm2ColProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\n      const xshape = x.dims;\n      const wshape = w.dims;\n\n      const rank = outputShape.length;\n      const im2colDims = calculateIm2ColDims(xshape, wshape, outputShape, 4);\n\n      const shaderSource = `\n        const int XC = ${xshape[1]};\n        const int XH = ${xshape[2]};\n        const int XW = ${xshape[3]};\n        const int KH = ${attributes.kernelShape[0]};\n        const int KW = ${attributes.kernelShape[1]};\n        const int dilationH = ${attributes.dilations[0]};\n        const int dilationW = ${attributes.dilations[1]};\n        const int strideH = ${attributes.strides[0]};\n        const int strideW = ${attributes.strides[1]};\n        const int padH = ${attributes.pads[0]};\n        const int padW = ${attributes.pads[1]};\n        const int KHKW = KH*KW;\n        const int XCKHKW = XC * KHKW;\n        const int outputChannels = 4;\n        vec4 process(int indices[${rank}]) {\n          int b  = indices[0]; // batch size\n          int oh = indices[1] * strideH - padH; //output height\n          int ow = indices[2] * strideW - padW; //output width\n          int p = indices[3] * outputChannels; //patch\n          vec4 value = vec4(0.0);\n          for(int i=0; i < outputChannels; ++i) {\n            if(p < XCKHKW) {\n              int patchC = p / KHKW;\n              int patchH = (p - patchC*KHKW) / KW;\n              int patchW = (p - patchC*KHKW) - patchH * KW;\n              int xh2 = oh + patchH * dilationH;\n              int xw2 = ow + patchW * dilationW;\n              int x[${xshape.length}];\n              x[0] = b;\n              x[1] = patchC;\n              x[2] = xh2;\n              x[3] = xw2;\n              if(xh2 >= 0 &&\n                  xh2 < XH &&\n                  xw2 >= 0 &&\n                  xw2 < XW) {\n                value[i] = _X(x);\n              }\n            }\n            ++p;\n          }\n          return value;\n        }\n        `;\n      return {\n        ...metadata,\n        output: {dims: im2colDims, type: x.type, textureType: TextureType.packedLastDimension},\n        shaderSource\n      };\n    };\n\nexport const createIm2ColProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\n     attributes: ConvAttributes): ProgramInfoLoader => {\n      const metadata = createIm2ColProgramMetadata(attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\n      };\n    };\n\n\nexport const calculateIm2ColDims =\n    (inputShape: readonly number[], kernelShape: readonly number[], outputShape: readonly number[], channels = 4):\n        number[] =>\n            [outputShape[0], outputShape[2], outputShape[3],\n             Math.ceil(inputShape[1] * kernelShape[2] * kernelShape[3] / channels)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport interface ImageScalerAttributes extends AttributeWithCacheKey {\n  scale: number;\n  bias: number[];\n}\n\nexport const imageScaler: OperatorImplementation<ImageScalerAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output =\n          inferenceHandler.run(createImageScalerProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n      return [output];\n    };\n\nexport const parseImageScalerAttributes: OperatorInitialization<ImageScalerAttributes> =\n    (node: Graph.Node): ImageScalerAttributes => {\n      const scale = node.attributes.getFloat('scale');\n      const bias = node.attributes.getFloats('bias');\n      return createAttributeWithCacheKey({scale, bias});\n    };\n\nconst imageScalerProgramMetadata = {\n  name: 'ImageScaler',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createImageScalerProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], attributes: ImageScalerAttributes):\n        ProgramInfo => {\n          const outputShape = inputs[0].dims.slice();\n          const rank = outputShape.length;\n          const getBiasMethod = createGetBiasMethod(attributes.bias.length);\n          const shaderSource = `\n      ${getBiasMethod}\n      float process(int indices[${rank}]) {\n        return _X(indices) * scale + getBias(bias, indices[1]);\n      }`;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            variables: [\n              {name: 'bias', type: 'float', arrayLength: attributes.bias.length, data: attributes.bias},\n              {name: 'scale', type: 'float', data: attributes.scale}\n            ],\n            shaderSource\n          };\n        };\n\nconst createImageScalerProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): ProgramInfoLoader => {\n      const metadata = {...imageScalerProgramMetadata, cacheHint: attributes.cacheKey};\n      return {...metadata, get: () => createImageScalerProgramInfo(handler, metadata, inputs, attributes)};\n    };\n\nconst createGetBiasMethod = (numChannels: number): string => {\n  const codeLines: string[] = [`float getBias(float bias[${numChannels}], int channel) {`];\n  for (let i = 0; i < numChannels; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (channel == ${i}) { return bias[${i}]; }`);\n    } else if (i === numChannels - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return bias[${i}]; }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (channel == ${i}) { return bias[${i}]; }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n  return codeLines.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('ImageScaler requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Invalid input shape.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport const instanceNormalization: OperatorImplementation<number> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], epsilon: number): Tensor[] => {\n      validateInputs(inputs);\n\n      const meanAndVariance = inferenceHandler.run(createMeanAndVarianceProgramInfoLoader(inputs[0]), inputs);\n      const output = inferenceHandler.run(\n          createComputeOutputProgramInfoLoader(inferenceHandler, inputs[0], epsilon, meanAndVariance.dims),\n          [inputs[0], meanAndVariance, inputs[1], inputs[2]]);\n      return [output];\n    };\n\nexport const parseInstanceNormalizationAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n    node.attributes.getFloat('epsilon', 1e-5);\n\nconst meanAndVarianceProgramMetadata = {\n  name: 'InstanceNormalization_MeanAndVariance',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createMeanAndVarianceProgramInfo = (metadata: ProgramMetadata, input: Tensor): ProgramInfo => {\n  const xDims = input.dims.slice();\n  const channel = xDims[1];\n  const channelSize = xDims[2] * xDims[3];\n  const outputShape = [xDims[0], channel];\n\n  const shaderSource = `\n      vec4 process(int[2] indices) {\n        vec4 v = vec4(0.0);\n        int a[4];\n        a[0] = indices[0];\n        a[1] = indices[1];\n        float temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += x;\n          }\n        }\n        float mean = temp / float(${channelSize});\n        temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += (x - mean) * (x - mean);\n          }\n        }\n        v.r = mean;\n        v.g = temp / float(${channelSize});\n\n        return v;\n      }`;\n  return {\n    ...metadata,\n    output: {dims: outputShape, type: input.type, textureType: TextureType.packedLastDimension},\n    shaderSource\n  };\n};\n\nconst createMeanAndVarianceProgramInfoLoader = (input: Tensor): ProgramInfoLoader => ({\n  ...meanAndVarianceProgramMetadata,\n  get: () => createMeanAndVarianceProgramInfo(meanAndVarianceProgramMetadata, input)\n});\n\nconst computeOutputProgramMetadata = {\n  name: 'InstanceNormalization_ComputeOutput',\n  inputNames: ['X', 'MeanAndVariance', 'Scale', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createComputeOutputProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, epsilon: number,\n     meanAndVarianceShape: readonly number[]): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(meanAndVarianceShape, TextureType.packedLastDimension);\n      const [meanAndVarianceWidth, meanAndVarianceHeight] = [textureWidth / 4, textureHeight];\n      const shaderSource = `\n      vec4 get_MeanAndVariance(int[2] mv) {\n        int offset = indicesToOffset_MeanAndVariance(mv);\n        vec2 coords = offsetToCoords(offset, ${meanAndVarianceWidth}, ${meanAndVarianceHeight});\n        return ${glsl.texture2D}(MeanAndVariance, coords);\n      }\n\n      float process(int[4] indices) {\n        int mv[2];\n        mv[0] = indices[0];\n        mv[1] = indices[1];\n        vec4 mean_and_variance = get_MeanAndVariance(mv);\n        float mean = mean_and_variance.r;\n        float variance = mean_and_variance.g;\n\n        int sb[1];\n        sb[0] = indices[1];\n        float scale = _Scale(sb);\n        float b = _B(sb);\n\n        return scale * (_X(indices) - mean) / sqrt(variance + epsilon) + b;\n      }`;\n      return {\n        ...metadata,\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n        variables: [{name: 'epsilon', type: 'float', data: epsilon}],\n        shaderSource\n      };\n    };\n\nconst createComputeOutputProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, epsilon: number, meanAndVarianceShape: readonly number[]):\n        ProgramInfoLoader => {\n          const metadata = {...computeOutputProgramMetadata, cacheHint: `${epsilon}`};\n          return {\n            ...metadata,\n            get: () => createComputeOutputProgramInfo(inferenceHandler, metadata, input, epsilon, meanAndVarianceShape)\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 3) {\n    throw new Error('InstanceNormalization requires 3 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n\n  // input should at least have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1]) {\n    throw new Error('Input shapes are mismatched.');\n  }\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n      (B.type !== 'float32' && B.type !== 'float64')) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Only support 4-D input shape.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {getActivationSnippet, InternalActivationAttributes} from './fuse-utils';\nimport {getBiasForMatmul} from './matmul';\n\nconst createPackedMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul (packed)',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias ? [TextureType.packed, TextureType.packed, TextureType.packed] :\n                        [TextureType.packed, TextureType.packed],\n  cacheHint\n});\n\nconst createPackedMatmulProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[],\n     activationAttributes: InternalActivationAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n      const aShape = inputs[0].dims;\n      const bShape = inputs[1].dims;\n      const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n\n      if (!outputShape) {\n        throw new Error('Can\\'t use matmul on the given tensors');\n      }\n      const sharedDim = aShape[aShape.length - 1];\n      const sharedDimIndex = Math.ceil(sharedDim / 2);\n      const aRank = aShape.length;\n      const bRank = bShape.length;\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const coordsDataType = getCoordsDataType(outputShape.length);\n      const outRank = outputShape.length;\n      const allGlChannels = getGlChannels();\n      const {activationFunction, applyActivation} = getActivationSnippet(activationAttributes);\n\n      const getBiasForMatmulSnippet =\n          hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, true)}` : '';\n\n      const getBcastedSamplerForMatmulSnippet =\n          isBroadcast ? `${getBcastSamplerForMatmul(coordsDataType, allGlChannels, inputs, outputShape)}` : '';\n\n      const getSamplerAInLoopSnippet = isBroadcast ? 'getAAtOutCoordsMatmul(i)' : `getA(${getA(allGlChannels, aRank)})`;\n      const getSamplerBInLoopSnippet = isBroadcast ? 'getBAtOutCoordsMatmul(i)' : `getB(${getB(allGlChannels, bRank)})`;\n      const getOutputCoordsSnippet = isBroadcast ? '' : `${coordsDataType} rc =\n          getOutputCoords(); int lastDim = rc.${allGlChannels[outRank - 1]}; rc.${allGlChannels[outRank - 1]} =\n          rc.${allGlChannels[outRank - 2]}; rc.${allGlChannels[outRank - 2]} = lastDim;\n      `;\n      const shaderSource = `\n            ${getBcastedSamplerForMatmulSnippet}\n            ${getBiasForMatmulSnippet}\n            ${activationFunction}\n            void main() {\n              ${getOutputCoordsSnippet}\n\n              vec4 value = vec4(0);\n              for (int i = 0; i < ${sharedDimIndex}; i++) {\n                vec4 a = ${getSamplerAInLoopSnippet};\n                vec4 b = ${getSamplerBInLoopSnippet};\n\n                value += (a.rrbb * b.rgrg);\n                value += (a.ggaa * b.baba);\n              }\n              ${processBias}\n              ${applyActivation}\n              ${glsl.output} = value;\n            }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const createPackedMatmulProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[],\n     activationAttributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createPackedMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n      return {\n        ...metadata,\n        get: () => createPackedMatmulProgramInfo(inferenceHandler, metadata, inputs, activationAttributes)\n      };\n    };\n\nfunction getBcastSamplerForMatmul(\n    coordsDataType: string, allGlChannels: readonly string[], inputs: Tensor[], outShape: readonly number[]): string {\n  let unpackedACoordsSnippet = [];\n  let unpackedBCoordsSnippet = [];\n\n  const inAShape = inputs[0].dims;\n  const inBShape = inputs[1].dims;\n\n  const inARank = inAShape.length;\n  const inBRank = inBShape.length;\n\n  const outRank = outShape.length;\n  const rankADiff = outRank - inARank;\n  const rankBDiff = outRank - inBRank;\n\n  unpackedACoordsSnippet = inAShape.map((s, i) => `coords.${allGlChannels[i + rankADiff]}`);\n  unpackedACoordsSnippet[inARank - 1] = 'i*2';\n  unpackedACoordsSnippet.join(', ');\n  unpackedBCoordsSnippet = inBShape.map((s, i) => `coords.${allGlChannels[i + rankBDiff]}`);\n  unpackedBCoordsSnippet[inBRank - 2] = 'i*2';\n  unpackedBCoordsSnippet.join(', ');\n\n  const broadcastADims = BroadcastUtil.getBroadcastDims(inAShape, outShape);\n  const broadcastBDims = BroadcastUtil.getBroadcastDims(inBShape, outShape);\n\n  const coordsASnippet = broadcastADims.map(d => `coords.${allGlChannels[d + rankADiff]} = 0;`).join('\\n');\n  const coordsBSnippet = broadcastBDims.map(d => `coords.${allGlChannels[d + rankBDiff]} = 0;`).join('\\n');\n  const swapDimSnippet = `int lastDim = coords.${allGlChannels[outRank - 1]};\n  coords.${allGlChannels[outRank - 1]} = coords.${allGlChannels[outRank - 2]};\n  coords.${allGlChannels[outRank - 2]} = lastDim;`;\n\n  const getBcastSamplerMatmulSource = `\nvec4 getAAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsASnippet}\n  vec4 outputValue = getA(${unpackedACoordsSnippet});\n  return outputValue;\n}\n\nvec4 getBAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsBSnippet}\n  vec4 outputValue = getB(${unpackedBCoordsSnippet});\n  return outputValue;\n}`;\n\n  return getBcastSamplerMatmulSource;\n}\n\nfunction getA(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += `rc.${allGlChannels[rank - 2]}, ` +\n      'i*2';\n  return res;\n}\n\nfunction getB(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += 'i*2, ' +\n      `rc.${allGlChannels[rank - 1]}`;\n  return res;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {getActivationSnippet, InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\n\nexport const matMul: OperatorImplementation<InternalActivationAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: InternalActivationAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      if (inferenceHandler.session.pack) {\n        return [inferenceHandler.run(\n            createPackedMatmulProgramInfoLoader(inferenceHandler, inputs, attributes), inputs)];\n      } else {\n        return [inferenceHandler.run(createMatmulProgramInfoLoader(inputs, attributes), inputs)];\n      }\n    };\n\nexport const parseMatMulAttributes: OperatorInitialization<InternalActivationAttributes> =\n    (node: Graph.Node): InternalActivationAttributes => parseInternalActivationAttributes(node.attributes);\n\nconst createMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nfunction createMatmulProgramInfo(\n    metadata: ProgramMetadata, inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfo {\n  const aShape = inputs[0].dims;\n  const bShape = inputs[1].dims;\n  const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n  if (!outputShape) {\n    throw new Error('Can\\'t use matmul on the given tensors');\n  }\n  const coordsDataType = getCoordsDataType(outputShape.length);\n  const allGlChannels = getGlChannels();\n  const {activationFunction, applyActivation} = getActivationSnippet(activationAttributes);\n\n  const hasBias = inputs.length > 2;\n  const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n  const getBiasForMatmulSnippet =\n      hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, false)}` : '';\n\n  const rank = outputShape.length;\n  const arank = aShape.length;\n  const brank = bShape.length;\n  const sharedDim = aShape[aShape.length - 1];\n  const shaderSource = `\n    ${activationFunction}\n    ${getBiasForMatmulSnippet}\n    float process(int indices[${rank}]) {\n        int a[${arank}];\n        int b[${brank}];\n        bcastMatmulIndices_A(indices, a);\n        bcastMatmulIndices_B(indices, b);\n\n        float value;\n        for (int k=0; k<${sharedDim}; ++k) {\n            a[${arank - 1}] = k;\n            b[${brank - 2}] = k;\n            value += _A(a) * _B(b);\n        }\n        ${processBias}\n        ${applyActivation}\n        return value;\n    }`;\n  return {\n    ...metadata,\n    output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n    shaderSource,\n  };\n}\n\nexport function createMatmulProgramInfoLoader(\n    inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfoLoader {\n  const metadata = createMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n  return {...metadata, get: () => createMatmulProgramInfo(metadata, inputs, activationAttributes)};\n}\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('MatMul requires 2 inputs.');\n  }\n\n  if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {\n    throw new Error('shared dimension does not match.');\n  }\n\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64')) {\n    throw new Error('inputs should be float type');\n  }\n\n  if (inputs[0].type !== inputs[1].type) {\n    throw new Error('inputs types should match');\n  }\n};\n\nexport function getBiasForMatmul(\n    coordsDataType: string, allGlChannels: readonly string[], inShape: readonly number[], outShape: readonly number[],\n    isPacked: boolean): string {\n  let unpackedCoordsSnippet = '';\n  const inRank = inShape.length;\n  const outRank = outShape.length;\n  const rankDiff = outRank - inRank;\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inShape.map((s, i) => `coords.${allGlChannels[i + rankDiff]}`).join(', ');\n  }\n  const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n  const coordsSnippet = broadcastDims.map(d => `coords.${allGlChannels[d + rankDiff]} = 0;`).join('\\n');\n  const inSize = ShapeUtil.size(inShape);\n  const isInputScalar = inSize === 1;\n  let output = 'vec4(outputValue.xx, outputValue.yy)';\n  if (isInputScalar) {\n    output = 'vec4(outputValue.x)';\n  }\n  const getBiasForMatmulSource = isPacked ? `\nvec4 getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  vec4 outputValue = getBias(${unpackedCoordsSnippet});\n  return ${output};\n}` :\n                                            `\nfloat getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  return getBias(coords.x);\n}`;\n\n  return getBiasForMatmulSource;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {getChannels} from './packing-utils';\n\nconst packProgramMetadata = {\n  name: 'pack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpackedReversed]\n};\n\nconst createPackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const inputShape = input.dims;\n\n  const inputRank = inputShape.length;\n  // createTextureLayoutFromShape won't change output rank. Need to verify by running tests\n  const outputRank = input.dims.length;\n\n  const coordsDataType = getCoordsDataType(outputRank);\n  const channels = getChannels('rc', outputRank);\n  const setup = getSetup(outputRank, channels, inputShape[inputShape.length - 2], inputShape[inputShape.length - 1]);\n\n  let reversedInputWH;\n  if (inputRank === 0) {\n    reversedInputWH = [1, 1];\n  } else if (inputRank === 1) {\n    reversedInputWH = [inputShape[0], 1];\n  } else {\n    reversedInputWH = [inputShape[outputRank - 1], inputShape[outputRank - 2]];\n  }\n  const outOfBoundsCondition = getOutOfBoundsCondition(outputRank, reversedInputWH, channels);\n  const output = getOutput(inputShape, channels);\n\n  const shaderSource = `\n        void main() {\n          ${coordsDataType} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            ${glsl.output} = vec4(0);\n          } else {\n            ${setup}\n\n            ${glsl.output} = vec4(${output});\n          }\n        }\n      `;\n  return {\n    ...packProgramMetadata,\n    hasMain: true,\n    output: {dims: input.dims, type: input.type, textureType: TextureType.packed},\n    shaderSource\n  };\n};\n\nexport const createPackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\n    ({...packProgramMetadata, get: () => createPackProgramInfo(handler, input)});\n\n/**\n * check output coordinate location and return false if it is outside input's width/height boundary\n */\nfunction getOutOfBoundsCondition(rank: number, shape: readonly number[], dims: string[]): string {\n  if (rank === 0) {\n    return 'false';\n  }\n  if (rank === 1) {\n    return `rc > ${shape[0]}`;\n  }\n\n  let cond = '';\n  for (let i = rank - 2; i < rank; i++) {\n    cond += `${dims[i]} >= ${shape[i - rank + 2]}`;\n    if (i < rank - 1) {\n      cond += '||';\n    }\n  }\n\n  return cond;\n}\n\n/**\n * code snippet to sample input texture with output coordiantes\n */\nfunction getOutput(shape: readonly number[], dims: string[]): string {\n  const rank = shape.length;\n\n  if (rank === 0) {\n    return 'getA(), 0, 0, 0';\n  }\n\n  if (rank === 1) {\n    return `getA(rc),\n            rc + 1 >= ${shape[0]} ? 0. : getA(rc + 1),\n            0, 0`;\n  }\n\n  const coord00 = 'r, c';\n  const coord01 = 'r, cp1';\n  const coord10 = 'rp1, c';\n  const coord11 = 'rp1, cp1';\n  let D = '';\n  if (rank > 2) {\n    for (let i = 0; i < rank - 2; ++i) {\n      D = D + `${dims[i]},`;\n    }\n  }\n  return `getA(${D}${coord00}),\n          rEdge ? 0. : getA(${D}${coord10}),\n          cEdge ? 0. : getA(${D}${coord01}),\n          rEdge || cEdge ? 0. : getA(${D}${coord11})`;\n}\n\n/**\n * code snippet to setup 4 coordinates and edge conditions\n */\nfunction getSetup(rank: number, dims: string[], rows: number, cols: number): string {\n  if (rank === 0 || rank === 1) {\n    return '';\n  }\n  // rank >= 2 for width+height pack.\n  else {\n    const setup = `\n    int r = ${dims[rank - 2]};\n    int c = ${dims[rank - 1]};\n    int rp1 = ${dims[rank - 2]} + 1;\n    int cp1 = ${dims[rank - 1]} + 1;\n    bool rEdge = rp1 >= ${cols};\n    bool cEdge = cp1 >= ${rows};\n    `;\n    return setup;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getGlChannels} from '../utils';\n\nexport function getVecChannels(name: string, rank: number): string[] {\n  return getGlChannels(rank).map(d => `${name}.${d}`);\n}\n\nexport function getChannels(name: string, rank: number): string[] {\n  if (rank === 1) {\n    return [name];\n  }\n  return getVecChannels(name, rank);\n}\n\nexport function unpackFromChannel(): string {\n  return `\n    float getChannel(vec4 frag, int dim) {\n      int modCoord = imod(dim, 2);\n      return modCoord == 0 ? frag.r : frag.g;\n    }\n\n    float getChannel(vec4 frag, vec2 innerDims) {\n      vec2 modCoord = mod(innerDims, 2.);\n      return modCoord.x == 0. ?\n        (modCoord.y == 0. ? frag.r : frag.g) :\n        (modCoord.y == 0. ? frag.b : frag.a);\n    }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl, Glsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface PadAttributes extends AttributeWithCacheKey {\n  readonly mode: string;\n  readonly pads: number[];\n  readonly value: number;\n}\n\nconst padProgramMetadata = {\n  name: 'Pad',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const padV2: OperatorImplementation<PadAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: PadAttributes): Tensor[] => {\n      validateInputsV2(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...padProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createPadProgramInfo(inferenceHandler, inputs[0], attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parsePadAttributesV2: OperatorInitialization<PadAttributes> = (node: Graph.Node): PadAttributes => {\n  const mode = node.attributes.getString('mode', 'constant');\n  const value = node.attributes.getFloat('value', 0.0);\n  const pads = node.attributes.getInts('pads');\n  return createAttributeWithCacheKey({mode, value, pads});\n};\n\nexport const padV11: OperatorImplementation<string> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): Tensor[] => {\n      validateInputsV11(inputs);\n      const attrubutes = generatePadAttributesFromInputs(inferenceHandler, inputs, mode);\n      return padV2(inferenceHandler, [inputs[0]], attrubutes);\n    };\n\nexport const parsePadAttributesV11: OperatorInitialization<string> = (node: Graph.Node): string =>\n    node.attributes.getString('mode', 'constant');\n\nconst generatePadAttributesFromInputs =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): PadAttributes => {\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n          (inputs.length >= 3 && !inferenceHandler.session.isInitializer(inputs[2].dataId))) {\n        throw new Error('dynamic pad attributes are not allowed');\n      }\n\n      const pads = Array.from(inputs[1].integerData);\n      const value = (inputs.length >= 3) ? inputs[2].floatData[0] : 0.0;\n\n      return createAttributeWithCacheKey({mode, pads, value});\n    };\n\nconst createPadProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): ProgramInfo => {\n      const outputShape = ShapeUtil.padShape(input.dims.slice(), attributes.pads);\n      const rank = outputShape.length;\n      const padFunction = getPadFunction(inferenceHandler, input, attributes);\n      const shaderSource = `\n      ${padFunction}\n      float process(int[${rank}] indices) {\n          return padA(indices);\n      }`;\n      return {\n        name: 'Pad',\n        inputNames: ['A'],\n        inputTypes: [TextureType.unpacked],\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputsV2 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pad requires 1 input');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst validateInputsV11 = (inputs: Tensor[]): void => {\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Pad requires 2 or 3 inputs');\n  }\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 3 && inputs[2].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst getPadFunction = (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): string => {\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  const [width, height] = inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n  const strides = ShapeUtil.computeStrides(input.dims);\n\n  switch (attributes.mode) {\n    case 'constant':\n      return getPadConstant(glsl, input.dims, strides, width, height, attributes.pads, attributes.value);\n    case 'reflect':\n      return getPadReflect(glsl, input.dims, strides, width, height, attributes.pads);\n    case 'edge':\n      return getPadEdge(glsl, input.dims, strides, width, height, attributes.pads);\n    default:\n      throw new Error('Invalid mode');\n  }\n};\n\nconst getPadConstant =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[],\n     value: number): string => {\n      const rank = shape.length;\n      let block = '';\n      for (let i = rank - 1; i >= 0; --i) {\n        block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  return constant;\n        if (k >= ${shape[i]}) return constant;\n        offset += k * ${strides[i]};\n        `;\n      }\n      return `\n      float padA(int m[${rank}]) {\n        const float constant = float(${value});\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n    };\n\nconst getPadReflect =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\n        string => {\n          const rank = shape.length;\n\n          let block = '';\n          for (let i = rank - 1; i >= 0; --i) {\n            block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0) { k = -k; }\n        {\n          const int _2n_1 = ${2 * (shape[i] - 1)};\n          k = int( mod( float(k), float(_2n_1) ) ) ;\n          if(k >= ${shape[i]}) { k = _2n_1 - k; }\n        }\n        offset += k * ${strides[i]};\n        `;\n          }\n          return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n        };\n\nconst getPadEdge =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\n        string => {\n          const rank = shape.length;\n\n          let block = '';\n          for (let i = rank - 1; i >= 0; --i) {\n            block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  k = 0;\n        if (k >= ${shape[i]}) k = ${shape[i] - 1};\n        offset += k * ${strides[i]};\n      `;\n          }\n          return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n        };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport interface AveragePoolAttributes extends AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly ceilMode: number;\n  readonly countIncludePad: boolean;\n  readonly kernelShape: readonly number[];\n  readonly strides: readonly number[];\n  readonly pads: readonly number[];\n}\n\nexport const averagePool: OperatorImplementation<AveragePoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata =\n          {name: 'AveragePool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\n    (node: Graph.Node): AveragePoolAttributes => {\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n      const kernelShape = node.attributes.getInts('kernel_shape');\n      const strides = node.attributes.getInts('strides', []);\n      const pads = node.attributes.getInts('pads', []);\n\n      // TODO: support attribute 'ceil_mode'\n      if (ceilMode !== 0) {\n        throw new Error('using ceil() in shape computation is not yet supported for AveragePool');\n      }\n\n      return createAttributeWithCacheKey({autoPad, ceilMode, countIncludePad, kernelShape, strides, pads});\n    };\n\nconst createAveragePoolProgramInfo =\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: AveragePoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n          const kernelSize = ShapeUtil.size(adjustedAttributes.kernelShape);\n          const op1 = 'value += _X(x);';\n          let op2 = '';\n          if (adjustedAttributes.countIncludePad) {\n            op2 += `value /= float(${kernelSize});`;\n          } else {\n            op2 += `value /= float(${kernelSize} - pad);`;\n          }\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '0.0');\n          const shaderSource = `\n        ${poolingCode}\n      `;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nexport const globalAveragePool: OperatorImplementation<AveragePoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata = {\n        name: 'GlobalAveragePool',\n        inputNames: ['X'],\n        inputTypes: [TextureType.unpacked],\n        cacheHint: `${attributes.countIncludePad}`\n      };\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, true, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseGlobalAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\n    (node: Graph.Node): AveragePoolAttributes => {\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n      return createAttributeWithCacheKey(\n          {autoPad: '', ceilMode: 0, countIncludePad, kernelShape: [], strides: [], pads: []});\n    };\n\nexport interface MaxPoolAttributes extends AveragePoolAttributes {\n  readonly storageOrder: number;\n  readonly dilations: number[];\n}\n\nexport const maxPool: OperatorImplementation<MaxPoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: MaxPoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata =\n          {name: 'MaxPool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createMaxPoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseMaxPoolAttributes: OperatorInitialization<MaxPoolAttributes> =\n    (node: Graph.Node): MaxPoolAttributes => {\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\n      const kernelShape = node.attributes.getInts('kernel_shape');\n      const strides = node.attributes.getInts('strides', []);\n      const pads = node.attributes.getInts('pads', []);\n      const storageOrder = node.attributes.getInt('storage_order', 0);\n      const dilations = node.attributes.getInts('dilations', []);\n\n      // TODO: support attribute 'ceil_mode' and 'storage_order'\n      if (storageOrder !== 0) {\n        throw new Error('column major storage order is not yet supported for MaxPool');\n      }\n      if (ceilMode !== 0) {\n        throw new Error('using ceil() in shape computation is not yet supported for MaxPool');\n      }\n\n      return createAttributeWithCacheKey(\n          {autoPad, ceilMode, countIncludePad: false, kernelShape, strides, pads, storageOrder, dilations});\n    };\n\nconst createMaxPoolProgramInfo =\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: MaxPoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n          const op1 = `\n      value = max(_X(x), value);\n    `;\n          const op2 = '';\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '-1e5');\n          const shaderSource = `\n      ${poolingCode}\n    `;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst getAdjustedPoolAttributesAndOutputShape =\n    (inputs: Tensor[], attributes: AveragePoolAttributes|MaxPoolAttributes, isGlobalOperator: boolean):\n        [AveragePoolAttributes|MaxPoolAttributes, number[]] => {\n          const inputShape = inputs[0].dims.slice();\n          const hasDilations = Object.hasOwnProperty.call(attributes, 'dilations');\n          const kernelShape = attributes.kernelShape.slice();\n          const strides = attributes.strides.slice();\n          const dilations: number[] = hasDilations ? (attributes as MaxPoolAttributes).dilations.slice() : [];\n          const pads = attributes.pads.slice();\n          PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShape, kernelShape, strides, dilations, pads);\n\n          const outputShape = PoolConvUtil.computePoolOutputShape(\n              isGlobalOperator, inputShape, strides, dilations, kernelShape, pads, attributes.autoPad);\n\n          const newAttributes = Object.assign({}, attributes);\n          if (hasDilations) {\n            Object.assign(newAttributes, {kernelShape, strides, pads, dilations, cacheKey: attributes.cacheKey});\n          } else {\n            Object.assign(newAttributes, {kernelShape, strides, pads, cacheKey: attributes.cacheKey});\n          }\n          return [newAttributes, outputShape];\n        };\n\nconst globalMaxPoolAttributes = {\n  autoPad: '',\n  ceilMode: 0,\n  countIncludePad: false,\n  kernelShape: [],\n  strides: [],\n  pads: [],\n  storageOrder: 0,\n  dilations: [],\n  cacheKey: ''\n};\n\nconst globalMaxPoolMetadata = {\n  name: 'GlobalMaxPool',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const globalMaxPool = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  const output = inferenceHandler.run(\n      {\n        ...globalMaxPoolMetadata,\n        get: () => createMaxPoolProgramInfo(inputs, globalMaxPoolMetadata, true, globalMaxPoolAttributes)\n      },\n      inputs);\n  return [output];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pool ops requires 1 input.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst generatePoolingCode =\n    (inputDims: readonly number[], attributes: AveragePoolAttributes, op1: string, op2: string, start: string):\n        string => {\n          const rank = inputDims.length;\n          if (attributes.kernelShape.length <= 2) {\n            const kw = attributes.kernelShape[attributes.kernelShape.length - 1];\n            const sw = attributes.strides[attributes.strides.length - 1];\n            const pwStart = attributes.pads[attributes.pads.length / 2 - 1];\n            const pwEnd = attributes.pads[attributes.pads.length - 1];\n            const dimW = inputDims[rank - 1];\n            let codeW = '';\n            let codeH = '';\n            let codeHEnd = '';\n            if (pwStart + pwEnd !== 0) {\n              codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            if (x[${rank} - 1] < 0 || x[${rank} - 1] >= ${dimW}) {\n              pad++;\n              continue;\n            }\n            ${op1}\n          }`;\n            } else {\n              codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            ${op1}\n          }`;\n            }\n\n            if (attributes.kernelShape.length === 2) {\n              const kh = attributes.kernelShape[attributes.kernelShape.length - 2];\n              const sh = attributes.strides[attributes.strides.length - 2];\n              const phStart = attributes.pads[attributes.pads.length / 2 - 2];\n              const phEnd = attributes.pads[attributes.pads.length - 2];\n              const dimH = inputDims[rank - 2];\n              if (phStart + phEnd !== 0) {\n                codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n              if (x[${rank} - 2] < 0 || x[${rank} - 2] >= ${dimH}) {\n                pad+= ${kw};\n                continue;\n              }\n          `;\n              } else {\n                codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n            `;\n              }\n              codeHEnd = `\n          }\n        `;\n            }\n\n            const poolingCode = `\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n\n          float value = ${start};\n          int pad = 0;\n          ${codeH}\n          ${codeW}\n          ${codeHEnd}\n          ${op2}\n          return value;\n        }\n      `;\n            return poolingCode;\n          } else {\n            const kernelSize = ShapeUtil.size(attributes.kernelShape);\n            const kernelStrides = ShapeUtil.computeStrides(attributes.kernelShape);\n            const stridesRank = kernelStrides.length;\n            const padsRank = attributes.pads.length;\n            const offsetToIndicesFunction = offsetToIndices(stridesRank);\n            const copyInputDims = copyArray(inputDims, 'inputDims');\n            const copyPads = copyArray(attributes.pads, 'pads');\n            const copyKernelStrides = copyArray(kernelStrides, 'kernelStrides');\n            const copyStrides = copyArray(attributes.strides, 'strides');\n            const hasPads = attributes.pads.reduce((sum, cur) => sum + cur);\n            let padCode = '';\n            if (hasPads) {\n              padCode = `\n            if (x[j] >= inputDims[j] || x[j] < 0) {\n              pad++;\n              isPad = true;\n              break;\n            }\n          }\n          if (!isPad) {\n            ${op1}\n          }`;\n            } else {\n              padCode = `\n          }\n          ${op1}\n        `;\n            }\n            const poolingCode = `\n        ${offsetToIndicesFunction}\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n          int offset[${stridesRank}];\n          int pads[${padsRank}];\n          int inputDims[${rank}];\n          int kernelStrides[${stridesRank}];\n          int strides[${stridesRank}];\n          ${copyPads}\n          ${copyInputDims}\n          ${copyStrides}\n          ${copyKernelStrides}\n\n          float value = ${start};\n          int pad = 0;\n          bool isPad = false;\n          for (int i = 0; i < ${kernelSize}; i++) {\n            offsetToIndices(i, kernelStrides, offset);\n            isPad = false;\n            for (int j = ${rank} - ${stridesRank}; j < ${rank}; j++) {\n              x[j] = indices[j] * strides[j - ${rank} + ${stridesRank}]\n                + offset[j - ${rank} + ${stridesRank}] - pads[j - 2];\n              ${padCode}\n          }\n          ${op2}\n\n          return value;\n        }\n      `;\n            return poolingCode;\n          }\n        };\n\nconst copyArray = (array: readonly number[], arrayName: string): string => {\n  let block = '';\n  for (let i = 0; i < array.length; i++) {\n    block += `\n      ${arrayName}[${i}] = ${array[i]};\n    `;\n  }\n  return block;\n};\n\nconst offsetToIndices = (rank: number): string => `\n  void offsetToIndices(int offset, int[${rank}] strides, out int[${rank}] indices) {\n    if (${rank} == 0) {\n      return;\n    }\n    for (int i = 0; i < ${rank} - 1; ++i) {\n      indices[i] = offset / strides[i];\n      offset -= indices[i] * strides[i];\n    }\n    indices[${rank} - 1] = offset;\n  }`;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport interface ReduceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly keepDims: boolean;\n}\n\n// return [init ops, reduce ops, final ops]\ntype ReduceOp = (inputs: Tensor[], axes: number[]) => string[];\n\nconst reduce =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string,\n     reduceOp: ReduceOp): Tensor[] => {\n      validateInputs(inputs);\n\n      const reduceProgramMetadata = {\n        name,\n        inputNames: ['A'],\n        inputTypes: [TextureType.unpacked],\n      };\n\n      const output = inferenceHandler.run(\n          {\n            ...reduceProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () =>\n                createReduceProgramInfo(inferenceHandler, inputs, attributes, name, reduceOp, reduceProgramMetadata)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseReduceAttributes: OperatorInitialization<ReduceAttributes> = (node: Graph.Node): ReduceAttributes => {\n  const axes = node.attributes.getInts('axes', []);\n  const keepDims = node.attributes.getInt('keepdims', 1) === 1;\n  return createAttributeWithCacheKey({axes, keepDims});\n};\n\nconst createReduceProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string, reduceOp: ReduceOp,\n     reduceProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const outputShape: number[] = [];\n      const iRank = inputs[0].dims.length || 1;\n\n      const idxCopy = [];  // copy output indexes to input indexes\n\n      const axes = ShapeUtil.normalizeAxes(attributes.axes, inputs[0].dims.length);\n      const ops = reduceOp(inputs, axes);\n      let reduceOps = ops[1];\n\n      for (let k = 0; k < inputs[0].dims.length; k++) {\n        // if this axis is reduced\n        if (axes.indexOf(k) >= 0 || axes.length === 0) {\n          if (attributes.keepDims) {\n            outputShape.push(1);\n          }  // else { remove the axis from outputShape; }\n\n          // loop over the d-th axis\n          reduceOps = `\n          for(int j${k} = 0; j${k} < ${inputs[0].dims[k]}; j${k}++) {\n            inputIdx[${k}] = j${k};\n            ${reduceOps}\n          }`;\n        } else {\n          idxCopy.push(`inputIdx[${k}] = outputIdx[${outputShape.length}];`);\n\n          outputShape.push(inputs[0].dims[k]);\n        }\n      }\n\n      const oRank = outputShape.length || 1;\n\n      const shaderSource = `\n      float process(int outputIdx[${oRank}]) {\n        float value;                 // final result\n        int inputIdx[${iRank}];      // addressing input data\n        ${idxCopy.join('\\n')}\n        ${ops[0]}       // init ops for reduce max/min\n        ${reduceOps}\n        ${ops[2]}       // final computation for reduce mean\n        return value;\n      }`;\n\n      return {\n        ...reduceProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Reduce op requires 1 input.');\n  }\n\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const reduceSum: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceSum', reduceOp);\n    };\n\nexport const reduceMean: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        let size = 1.0;\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            size *= inputs[0].dims[k];\n          }\n        }\n\n        return ['value = 0.0;', 'value += _A(inputIdx);', `value /= ${size}.;`];  // ensure real number with `.`\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMean', reduceOp);\n    };\n\nexport const reduceMax: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        const idxZero = [];\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n          }\n        }\n\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = max(value, _A(inputIdx));', ''];\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMax', reduceOp);\n    };\n\nexport const reduceMin: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        const idxZero = [];\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n          }\n        }\n\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = min(value, _A(inputIdx));', ''];\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMin', reduceOp);\n    };\n\nexport const reduceProd: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 1.0;', 'value *= _A(inputIdx);', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceProd', reduceOp);\n    };\n\nexport const reduceLogSum: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', 'value = log(value);'];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSum', reduceOp);\n    };\n\nexport const reduceLogSumSquare: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['float t; value = 0.0;', 't = _A(inputIdx); value += t * t;', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSumSquare', reduceOp);\n    };","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {unpackFromChannel} from './packing-utils';\n\nconst createPackedReshape3DProgramMetadata = (outputShape3D: readonly number[]) =>\n    ({name: 'Reshape (packed)', inputTypes: [TextureType.packed], inputNames: ['A'], cacheHint: `${outputShape3D}`});\n\nconst createPackedReshape3DProgramInfo =\n    (handler: WebGLInferenceHandler, input3D: Tensor, metadata: ProgramMetadata, outputShape3D: readonly number[]):\n        ProgramInfo => {\n          const inputShape3D = input3D.dims as [number, number, number];\n          const squeezedOutputShape = outputShape3D as [number, number, number];\n\n          let mainLoop = '';\n          for (let i = 0; i < 4; i++) {\n            let outputCoords = '';\n            switch (i) {\n              case 0:\n                outputCoords = 'outputCoords = rc;';\n                break;\n              case 1:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z);';\n                break;\n              case 2:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y, rc.z+1);';\n                break;\n              case 3:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z+1);';\n                break;\n              default:\n                throw new Error();\n            }\n\n            mainLoop += `\n        ${outputCoords}\n        ${i > 0 ? 'if(outputCoords.y < rows && outputCoords.z < cols){' : ''}\n          int flattenedIndex = getFlattenedIndex(outputCoords);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flattenedIndex);\n          vec2 innerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] = getChannel(getA(inputRC.x, inputRC.y, inputRC.z), innerDims);\n\n        ${i > 0 ? '}' : ''}\n      `;\n          }\n          const glsl = getGlsl(handler.session.backend.glContext.version);\n\n          const shaderSource = `\n      ${getReshapedInputCoords(inputShape3D)}\n      ${getFlattenedIndexFrom3D(squeezedOutputShape)}\n      ${unpackFromChannel()}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.0);\n\n        ivec3 outputCoords;\n        int rows = ${squeezedOutputShape[2]};\n        int cols = ${squeezedOutputShape[1]};\n\n        ${mainLoop}\n        ${glsl.output} = result;\n      }\n    `;\n\n          return {\n            ...metadata,\n            output: {dims: squeezedOutputShape, type: input3D.type, textureType: TextureType.packed},\n            shaderSource,\n            hasMain: true\n          };\n        };\n\nexport const createPackedReshape3DProgramInfoLoader =\n    (handler: WebGLInferenceHandler, input3D: Tensor, outputShape3D: readonly number[]): ProgramInfoLoader => {\n      const metadata = createPackedReshape3DProgramMetadata(outputShape3D);\n      return {...metadata, get: () => createPackedReshape3DProgramInfo(handler, input3D, metadata, outputShape3D)};\n    };\n\nexport function processDims3D(shape: ArrayLike<number>): [number, number, number] {\n  if (shape.length === 0) {\n    return [1, 1, 1];\n  }\n  // TODO: squeeze other shapes to 2D case\n  let batch = 1;\n  for (let i = 0; i < shape.length - 2; ++i) {\n    batch *= shape[i];\n  }\n  return [batch, shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\n\n// For packed reshape, we need to re-arrange texel data for output shape.\n// Our pack is designed to pack a 2x2 tile in last h and w dimension, so\n// for the reshaped new tensor, we just need to re-arrange the last h and\n// w dimension. For any shape that is not in 3D, i.e. [batch, W, H], we\n// first convert it to 3D by collapsing other dimension to batch dim, then\n// process with the last two dimensions.\n// Note: we only need the shape tensor to calculate output shape, so the\n// content in shape tensor is never uploaded to GPU. It is always kept in CPU.\n// TODO: optimize the algorithm -- in some cases, if the last two dims are\n// the same between input shape and output shape, the packed reshape can be\n// treated as no-op.\nexport function isReshapeCheap(dims: readonly number[], reshapedDims: readonly number[]) {\n  let isCheapReshape = false;\n  if (dims.length === 0 || reshapedDims.length === 0) {  // scalar\n    isCheapReshape = true;\n  } else if (dims.length < 2 || reshapedDims.length < 2) {  // 1D\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1];\n  } else {  // 2D +\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1] &&\n        dims[dims.length - 2] === reshapedDims[reshapedDims.length - 2];\n  }\n\n  return isCheapReshape;\n}\n\nfunction getReshapedInputCoords(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n  const coords = ['b', 'r', 'c'];\n  const index = 'index';\n  const coordsFromIndexSnippet = strides\n                                     .map((stride, i) => {\n                                       const line1 = `int ${coords[i]} = ${index} / ${stride}`;\n                                       const line2 = i === strides.length - 1 ?\n                                           `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\n                                           `index -= ${coords[i]} * ${stride}`;\n                                       return `${line1}; ${line2};`;\n                                     })\n                                     .join('');\n\n  return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(b, r, c);\n    }\n  `;\n}\n\nfunction getFlattenedIndexFrom3D(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n\n  return `\n  int getFlattenedIndex(ivec3 coords) {\n    // reverse y, z order\n    return coords.x * ${strides[0]} + coords.z * ${strides[1]} + coords.y;\n  }\n`;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const reshape = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const reshapedDims = ShapeUtil.calculateReshapedDims(inputs[0].dims, inputs[1].integerData);\n  if (handler.session.pack) {\n    return [handler.reshapePacked(inputs[0], reshapedDims)];\n  } else {\n    return [handler.reshapeUnpacked(inputs[0], reshapedDims)];\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {unpackFromChannel} from './packing-utils';\nimport {parseUpsampleAttributes, scalesValidation, UpsampleAttributes, validateInputs} from './upsample';\n\nconst resizeProgramMetadata = {\n  name: 'Resize',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed]\n};\n\nexport const resize: OperatorImplementation<UpsampleAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(\n          {\n            ...resizeProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createPackedResizeProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseResizeAttributesV10: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 10);\n\nexport const parseResizeAttributesV11: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 11);\n\nconst createPackedResizeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [scales, outputShape] = prepareInputs(inputs, attributes);\n\n      const isSame =\n          scales.every((s: number) => s === 1) && attributes.coordinateTransformMode !== 'tf_crop_and_resize';\n      if (isSame) {\n        return {\n          ...resizeProgramMetadata,\n          output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n          hasMain: true,\n          shaderSource: `void main() {\n                    vec4 v = ${glsl.texture2D}(X, TexCoords);\n                    ${glsl.output} = v;\n                }`\n        };\n      }\n\n      const dim = outputShape.length;\n      if (dim < 2) {\n        throw new Error(`output dimension should be at least 2, but got ${dim}`);\n      }\n\n      const outputHeight = outputShape[dim - 2];\n      const outputWidth = outputShape[dim - 1];\n\n      const inputShape = inputs[0].dims;\n      if (dim !== inputShape.length) {\n        throw new Error(`output dimension should match input ${inputShape.length}, but got ${dim}`);\n      }\n      const inputHeight = inputShape[dim - 2];\n      const inputWidth = inputShape[dim - 1];\n\n      const scalesHeight = scales[dim - 2];\n      const scalesWidth = scales[dim - 1];\n\n      let getSourceFracIndex = '';\n\n      if (attributes.mode !== 'linear') {\n        // TODO: support other modes\n        throw new Error(`resize (packed) does not support mode: '${attributes.mode}'`);\n      }\n      switch (attributes.coordinateTransformMode) {\n        case 'asymmetric':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return vec4(coords) / scaleWHWH;\n                    }\n                `;\n          break;\n        case 'half_pixel':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return (vec4(coords) + 0.5) / scaleWHWH - 0.5;\n                    }\n                `;\n          break;\n        case 'pytorch_half_pixel':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        vec4 fcoords = vec4(coords);\n                        return vec4(\n                            ${outputWidth}.0 > 1.0 ? (fcoords.x + 0.5) / scaleWHWH.x - 0.5 : 0.0,\n                            ${outputHeight}.0 > 1.0 ? (fcoords.y + 0.5) / scaleWHWH.y - 0.5 : 0.0,\n                            ${outputWidth}.0 > 1.0 ? (fcoords.z + 0.5) / scaleWHWH.z - 0.5 : 0.0,\n                            ${outputHeight}.0 > 1.0 ? (fcoords.w + 0.5) / scaleWHWH.w - 0.5 : 0.0\n                          );\n                    }\n                `;\n          break;\n        case 'align_corners':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        vec4 resized = vec4(${outputWidth}.0 - 1.0, ${outputHeight}.0 - 1.0, ${outputWidth}.0 - 1.0,\n                            ${outputHeight}.0 - 1.0);\n                        vec4 original = vec4(${inputWidth}.0 - 1.0, ${inputHeight}.0 - 1.0, ${inputWidth}.0 - 1.0,\n                            ${inputHeight}.0 - 1.0);\n                        vec4 new_scale = original / resized;\n                        return vec4(coords) * new_scale;\n                    }\n                `;\n          break;\n        default:\n          // TODO:supporting other coordinateTransformModes\n          throw new Error(`resize (packed) does not support coordinateTransformMode: \\\n                                '${attributes.coordinateTransformMode}'`);\n      }\n\n      const coordsDataType = getCoordsDataType(dim);\n      const unpackChannel = unpackFromChannel();\n      const shaderSource = `\n            const vec2 inputWH = vec2(${inputHeight}.0, ${inputWidth}.0);\n            const vec4 scaleWHWH = vec4(float(${scalesHeight}), float(${scalesWidth}), float(${scalesHeight}), float(${\n          scalesWidth}));\n            ${unpackChannel}\n            ${getSourceFracIndex}\n            float getAValue(int x10, int r, int c, int d) {\n                return getChannel(getA(x10, r, c, d), vec2(c, d));\n            }\n            void main() {\n                ${coordsDataType} rc = getOutputCoords();\n\n                int batch = rc[0];\n                int depth = rc[1];\n\n                // retrieve the 4 coordinates that is used in the 4 packed output values.\n                ivec4 coords = ivec4(rc.wz, rc.w + 1, rc.z + 1);\n\n                // calculate the source index in fraction\n                vec4 sourceFrac = getSourceFracIndex(coords);\n\n                // get the lower and upper bound of the 4 values that will be packed into one texel.\n                ivec4 x00 = ivec4(max(sourceFrac.xy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xy)));\n                ivec4 x01 = ivec4(max(sourceFrac.xw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xw)));\n                ivec4 x10 = ivec4(max(sourceFrac.zy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zy)));\n                ivec4 x11 = ivec4(max(sourceFrac.zw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zw)));\n\n                bool hasNextRow = rc.w < ${outputHeight - 1};\n                bool hasNextCol = rc.z < ${outputWidth - 1};\n\n                // pack x00, x01, x10, x11's top-left corner into one vec4 structure\n                vec4 topLeft = vec4(\n                    getAValue(batch, depth, x00.x, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's top-right corner into one vec4 structure\n                vec4 topRight = vec4(\n                    getAValue(batch, depth, x00.x, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.w) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-left corner into one vec4 structure\n                vec4 bottomLeft = vec4(\n                    getAValue(batch, depth, x00.z, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-right corner into one vec4 structure\n                vec4 bottomRight = vec4(\n                    getAValue(batch, depth, x00.z, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.w) : 0.0);\n\n                // calculate the interpolation fraction on u and v direction\n                vec4 frac = vec4(sourceFrac) - floor(sourceFrac);\n                vec4 clampFrac = clamp(frac, vec4(0.0), vec4(1.0));\n\n                vec4 top = mix(topLeft, topRight, clampFrac.ywyw);\n                vec4 bottom = mix(bottomLeft, bottomRight, clampFrac.ywyw);\n                vec4 newValue = mix(top, bottom, clampFrac.xxzz);\n\n                ${glsl.output} = vec4(newValue);\n            }\n        `;\n      return {\n        ...resizeProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        hasMain: true,\n        shaderSource\n      };\n    };\n\n\nconst prepareInputs = (inputs: Tensor[], attributes: UpsampleAttributes): [readonly number[], readonly number[]] => {\n  const x = inputs[0];\n  const xDims = x.dims;\n\n  let scales = attributes.scales;\n  let outputSizes: number[]|undefined;\n  if (scales.length === 0) {\n    const scalesTensor = inputs[attributes.scalesInputIdx];\n    if (scalesTensor && scalesTensor.size !== 0) {\n      if (inputs[attributes.sizesInputIdx]) {\n        throw new Error('Only one of scales or sizes must be provided as input.');\n      }\n      scales = parseScalesData(scalesTensor, attributes.mode, attributes.isResize);\n    } else {\n      const sizesTensor = inputs[attributes.sizesInputIdx];\n      if (!sizesTensor || sizesTensor.size === 0) {\n        throw new Error('Either scales or sizes MUST be provided as input.');\n      }\n\n      outputSizes = Array.from(sizesTensor.integerData);\n      scales = parseScalesDataFromOutputSize(outputSizes, xDims, attributes.mode, attributes.isResize);\n    }\n  } else {\n    if (inputs[attributes.sizesInputIdx]) {\n      throw new Error('Only one of scales or sizes must be provided as input.');\n    }\n  }\n\n  const yDims = outputSizes || (xDims.map((dim, i) => Math.floor(dim * scales[i])));\n\n  return [scales, yDims];\n};\n\nconst parseScalesData = (scale: Tensor, mode: string, isResize: boolean): number[] => {\n  const scales = Array.from(scale.floatData);\n  scalesValidation(scales, mode, isResize);\n  return scales;\n};\n\nconst parseScalesDataFromOutputSize =\n    (yDims: readonly number[], xDims: readonly number[], mode: string, isResize: boolean): number[] => {\n      const length = xDims.length;\n      const scales = new Array<number>(length);\n\n      for (let i = 0, end = length; i < end; i++) {\n        if (xDims[i] === 0) {\n          if (yDims[i] !== 0) {\n            throw new Error('Input dim is zero but required output dim is non-zero.');\n          }\n          scales[i] = 1;\n        } else {\n          scales[i] = yDims[i] / xDims[i];\n        }\n      }\n      scalesValidation(scales, mode, isResize);\n      return scales;\n    };\n\n// roi data is not used yet. but leave here for future usage.\n// const getRoi = (inputs: Tensor[], attributes: UpsampleAttributes) : number[] => {\n//     let roi: number[] = [];\n//     if (attributes.needRoiInput) {\n//         if (attributes.roiInputIdx <= 0) {\n//             throw new Error('Invalid roi input index.');\n//         }\n//         const roiTensor = inputs[attributes.roiInputIdx];\n//         roi = roiTensor.size > 0 ? Array.from(roiTensor.floatData) : [];\n//     } else {\n//         roi = new Array(inputs[0].dims.length * 2).fill(0);\n//     }\n//     return roi;\n// };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const shape = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  return [new Tensor([inputs[0].dims.length], 'int32', undefined, undefined, new Int32Array(inputs[0].dims))];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Shape requires 1 input.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface SliceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly ends: number[];\n  readonly starts: number[];\n}\n\nconst sliceProgramMetadata = {\n  name: 'Slice',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const slice: OperatorImplementation<SliceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SliceAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...sliceProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseSliceAttributes: OperatorInitialization<SliceAttributes> = (node: Graph.Node): SliceAttributes => {\n  const starts = node.attributes.getInts('starts');\n  const ends = node.attributes.getInts('ends');\n  const axes = node.attributes.getInts('axes', []);\n  return createAttributeWithCacheKey({starts, ends, axes});\n};\n\nconst createSliceProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SliceAttributes): ProgramInfo => {\n      const axes = (attributes.axes.length === 0) ? input.dims.slice(0).map((val, i) => i) : attributes.axes;\n      const normalizedAxes = ShapeUtil.normalizeAxes(axes, input.dims.length);\n      const starts = attributes.starts.map((start, i) => {\n        if (start > input.dims[normalizedAxes[i]] - 1) {\n          return input.dims[normalizedAxes[i]];\n        }\n        return ShapeUtil.normalizeAxis(start, input.dims[normalizedAxes[i]]);\n      });\n      const ends = attributes.ends.map((end, i) => {\n        if (end > input.dims[normalizedAxes[i]] - 1) {\n          return input.dims[normalizedAxes[i]];\n        }\n        return ShapeUtil.normalizeAxis(end, input.dims[normalizedAxes[i]]);\n      });\n\n      const outputShape = input.dims.slice();\n\n      const sliceOps: string[] = [];\n      for (let i = 0; i < normalizedAxes.length; i++) {\n        outputShape[normalizedAxes[i]] = ends[i] - starts[i];\n        if (starts[i] > 0) {\n          sliceOps.push(`outputIdx[${normalizedAxes[i]}] += ${starts[i]};`);\n        }  // else { sliceOps.push(`outputIdx[${normalizedAxes[i]}] += 0;`); }\n      }\n\n      const rank = outputShape.length;\n      const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        ${sliceOps.join('\\n      ')}\n        return _A(outputIdx);\n      }`;\n      return {\n        ...sliceProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Slice requires 1 input.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const sliceV10 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV10(inputs);\n  const attributes = generateSliceAttributesFromInputs(inferenceHandler, inputs);\n  const output = inferenceHandler.run(\n      {\n        ...sliceProgramMetadata,\n        cacheHint: attributes.cacheKey,\n        get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\n      },\n      [inputs[0]]);\n  return [output];\n};\n\nconst generateSliceAttributesFromInputs =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): SliceAttributes => {\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n          !inferenceHandler.session.isInitializer(inputs[2].dataId) ||\n          (inputs.length >= 4 && !inferenceHandler.session.isInitializer(inputs[3].dataId)) ||\n          (inputs.length >= 5 && !inferenceHandler.session.isInitializer(inputs[4].dataId))) {\n        throw new Error('dynamic slice attributes are not allowed');\n      }\n\n      if (inputs.length >= 5 && inputs[4].integerData.some((i: number) => i !== 1)) {\n        throw new Error('currently non-1 steps is not supported for Slice');\n      }\n\n      const starts = Array.from(inputs[1].integerData);\n      const ends = Array.from(inputs[2].integerData);\n      const axes = inputs.length >= 4 ? Array.from(inputs[3].integerData) : [];\n      const cacheKey = `${axes};${starts};${ends}`;\n      return {starts, ends, axes, cacheKey};\n    };\n\nconst validateInputsV10 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 3 || inputs.length > 5) {\n    throw new Error('Invalid input number.');\n  }\n  if (inputs[1].type !== 'int32' || inputs[1].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[2].type !== 'int32' || inputs[2].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 4 && (inputs[3].type !== 'int32' || inputs[3].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 5 && (inputs[4].type !== 'int32' || inputs[4].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nimport {transpose, TransposeAttributes} from './transpose';\n\nexport interface SoftmaxAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nconst softmaxComputeMaxProgramMetadata = {\n  name: 'SoftmaxComputeMax',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst softmaxComputeScaleProgramMetadata = {\n  name: 'SoftmaxComputeScale',\n  inputNames: ['A', 'Max'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst softmaxProgramMetadata = {\n  name: 'SoftMax',\n  inputNames: ['A', 'Max', 'Norm'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked],\n};\n\nexport const softmax: OperatorImplementation<SoftmaxAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const inputShape = inputs[0].dims.slice();\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n      const logicalRowCount = ShapeUtil.sizeToDimension(inputShape, axis);\n      const featureCount = ShapeUtil.sizeFromDimension(inputShape, axis);\n\n      const output = computeSoftmax(inferenceHandler, inputs, attributes, logicalRowCount, featureCount);\n      return output;\n    };\n\nexport const parseSoftmaxAttributes: OperatorInitialization<SoftmaxAttributes> =\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 1)});\n\nexport const parseSoftmaxAttributesV13: OperatorInitialization<SoftmaxAttributes> =\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', -1)});\n\n// The \"semantic\" meaning of axis has changed in opset-13.\n// Please compare: https://github.com/onnx/onnx/blob/main/docs/Operators.md#Softmax\n// with https://github.com/onnx/onnx/blob/main/docs/Changelog.md#Softmax-11 for detailed explanations\n// To account for the opset-13 behavior, our plan will be to transpose the \"axis\" dim to the innermost dim\n// and perform softmax and then reverse the transpose. We can skip the transposing aspect if the axis is already\n// the innermost dim\nexport const softmaxV13: OperatorImplementation<SoftmaxAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const inputShape = inputs[0].dims.slice();\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n      const rank = inputShape.length;\n\n      const isTransposeRequired = (axis !== rank - 1) ? true : false;\n      const transposedInputShape: number[] = [];\n      let perm: number[] = [];\n      let transposedInputs: Tensor[] = [];\n      let transposeAttribute: TransposeAttributes;\n\n      if (isTransposeRequired) {\n        perm = Array.from({length: rank}).map((_, i) => i);\n\n        // swap the innermost dim with the dim corresponding to axis\n        perm[axis] = rank - 1;\n        perm[rank - 1] = axis;\n\n        perm.map(p => transposedInputShape.push(inputShape[p]));\n\n        transposeAttribute = createAttributeWithCacheKey({perm});\n        transposedInputs = transpose(inferenceHandler, inputs, transposeAttribute);\n      }\n\n      const logicalRowCount = isTransposeRequired ? ShapeUtil.sizeToDimension(transposedInputShape, rank - 1) :\n                                                    ShapeUtil.sizeToDimension(inputShape, rank - 1);\n      const featureCount = isTransposeRequired ? ShapeUtil.sizeFromDimension(transposedInputShape, rank - 1) :\n                                                 ShapeUtil.sizeFromDimension(inputShape, rank - 1);\n\n      const output = computeSoftmax(\n          inferenceHandler, isTransposeRequired ? transposedInputs : inputs, attributes, logicalRowCount, featureCount);\n\n      if (isTransposeRequired) {\n        const reversedOutput = transpose(inferenceHandler, output, transposeAttribute!);\n        return reversedOutput;\n      } else {\n        return output;\n      }\n    };\n\nconst computeSoftmax =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes, logicalRowCount: number,\n     featureCount: number): Tensor[] => {\n      const computeMaxProgramInfo =\n          createComputeMaxProgramInfo(inferenceHandler, inputs[0], logicalRowCount, featureCount, [logicalRowCount]);\n      const max = inferenceHandler.run(\n          {...softmaxComputeMaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeMaxProgramInfo},\n          inputs);\n\n      const computeScaleProgramInfo = createComputScaleProgramInfo(\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\n          [logicalRowCount]);\n      const scale = inferenceHandler.run(\n          {...softmaxComputeScaleProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeScaleProgramInfo},\n          [inputs[0], max]);\n\n      const softMaxProgramInfo = createSoftMaxProgramInfo(\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\n          computeScaleProgramInfo.output.dims);\n      const output = inferenceHandler.run(\n          {...softmaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => softMaxProgramInfo},\n          [inputs[0], max, scale]);\n      return [output];\n    };\n\n/**\n * Create a texture that contains the maximum value of each of the 'N' rows\n */\nconst createComputeMaxProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     outputShape: number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = outputShape.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (outputShape.length !== 1) {\n        throw new Error('Dimensionality of the output should be 1');\n      }\n\n      if (outputShape[0] !== logicalRowCount) {\n        throw new Error('Shape of the output should be equal to logical row count');\n      }\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float max = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset, ${textureWidth},\n        ${textureHeight} )));\n        for(int i=1; i<${featureCount}; ++i)\n        {\n          float current = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight})));\n          if(current > max)\n          max = current;\n        }\n\n        return max;\n      }`;\n      return {\n        ...softmaxComputeMaxProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\n/**\n * Create a texture that contains the normalization factor for each of the 'N' rows\n */\nconst createComputScaleProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     maxElementPerLogicalRow: readonly number[], outputShape: number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = outputShape.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (outputShape.length !== 1) {\n        throw new Error('Dimensionality of the output should be 1');\n      }\n\n      if (outputShape[0] !== logicalRowCount) {\n        throw new Error('Shape of the output should be equal to logical row count');\n      }\n\n      if (maxElementPerLogicalRow.length !== 1) {\n        throw new Error('Dimensionality of the intermediate results should be 1');\n      }\n\n      if (maxElementPerLogicalRow[0] !== logicalRowCount) {\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\n      }\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float norm_factor = 0.0;\n        float max = _Max(indices);\n        for(int i=0; i<${featureCount}; ++i)\n        {\n          norm_factor += exp(getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight}))) - max);\n        }\n\n        return norm_factor;\n      }`;\n      return {\n        ...softmaxComputeScaleProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst createSoftMaxProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     maxElementPerLogicalRow: readonly number[], normalizationPerLogicalRow: readonly number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = input.dims.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (maxElementPerLogicalRow.length !== 1 || normalizationPerLogicalRow.length !== 1) {\n        throw new Error('Dimensionality of the intermediate results should be 1');\n      }\n\n      if (maxElementPerLogicalRow[0] !== logicalRowCount || normalizationPerLogicalRow[0] !== logicalRowCount) {\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\n      }\n\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n\n      // get offset of current logical tensor index from the 2-D texture coordinates (TexCoords)\n      int offset = coordsToOffset(TexCoords, ${textureWidth}, ${textureHeight});\n\n      //determine the logical row for this index\n      int logical_row_index[1];\n      logical_row_index[0] = offset / ${featureCount};\n\n      float norm_factor = _Norm(logical_row_index);\n\n      // avoid possible division by 0\n      // if norm_facor is 0, all elements are zero\n      // if so, return 0\n      if(norm_factor == 0.0)\n        return 0.0;\n\n      return exp(_A(indices) - _Max(logical_row_index)) / norm_factor;\n    }`;\n      return {\n        ...softmaxProgramMetadata,\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Softmax requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil, SplitUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface SplitAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n  readonly split: number[];\n  readonly numOutputs: number;\n}\n\nconst splitProgramMetadata = {\n  name: 'Split',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const split: OperatorImplementation<SplitAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SplitAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputs[0].dims.length);\n      const count = getProgramCount(inferenceHandler, inputs, axis, attributes);\n      const output: Tensor[] = [];\n      for (let i = 0; i < count; ++i) {\n        output.push(inferenceHandler.run(\n            {\n              ...splitProgramMetadata,\n              cacheHint: `${attributes.cacheKey};${i}`,\n              get: () => createSplitProgramInfo(inferenceHandler, inputs[0], attributes, axis, i)\n            },\n            inputs));\n      }\n\n      return output;\n    };\n\nexport const parseSplitAttributes: OperatorInitialization<SplitAttributes> = (node: Graph.Node): SplitAttributes => {\n  const axis = node.attributes.getInt('axis', 0);\n  const split = node.attributes.getInts('split', []);\n  const numOutputs = node.outputs.length;\n  return createAttributeWithCacheKey({axis, split, numOutputs});\n};\n\nconst getProgramCount =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number, attributes: SplitAttributes): number => {\n      const [, offsets] = SplitUtil.splitShape(inputs[0].dims, axis, attributes.split, attributes.numOutputs);\n      return offsets.length;\n    };\n\nconst createSplitProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SplitAttributes, axis: number, index: number):\n        ProgramInfo => {\n          const [shapes, offsets] = SplitUtil.splitShape(input.dims, axis, attributes.split, attributes.numOutputs);\n          const offset = offsets[index];\n          const outputShape = shapes[index];\n          const rank = outputShape.length;\n          const shaderSource = `\n      float process(int indices[${rank}]) {\n        indices[${axis}] += ${offset};\n        return _A(indices);\n      }\n    `;\n          return {\n            ...splitProgramMetadata,\n            cacheHint: `${attributes.cacheKey}:${index}`,\n            output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Split requires one input.');\n  }\n\n  if (inputs[0].type !== 'int8' && inputs[0].type !== 'uint8' && inputs[0].type !== 'int16' &&\n      inputs[0].type !== 'uint16' && inputs[0].type !== 'int32' && inputs[0].type !== 'uint32' &&\n      inputs[0].type !== 'float32' && inputs[0].type !== 'float64' && inputs[0].type !== 'bool') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const squeeze: OperatorImplementation<number[]> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\n      validateInputs(inputs);\n      const outputShape = ShapeUtil.squeezeShape(inputs[0].dims, axes);\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n      return [output];\n    };\n\nexport const squeezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return squeeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseSqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n    node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Squeeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Squeeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport const sum = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const sumProgramMetadata = {\n    name: 'Sum',\n    inputNames: inputs.map((v, i) => `X${i}`),\n    inputTypes: new Array(inputs.length).fill(TextureType.unpacked)\n  };\n\n  const output = inferenceHandler.run(\n      {...sumProgramMetadata, get: () => createSumProgramInfo(inferenceHandler, inputs, sumProgramMetadata)}, inputs);\n  return [output];\n};\n\nconst createSumProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], sumProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const outputShape = inputs[0].dims.slice();\n      const sumLine = inputs.map((v, i) => `${glsl.texture2D}(X${i},TexCoords)`).join(' + ');\n      const shaderSource = `\n      void main() {\n        vec4 result = ${sumLine};\n        ${glsl.output} = result;\n      }\n    `;\n      return {\n        ...sumProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        hasMain: true,\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length === 0) {\n    throw new Error('Sum requires inputs.');\n  }\n\n  const length = inputs[0].dims.length;\n  for (let i = 1; i < inputs.length; i++) {\n    if (length !== inputs[i].dims.length) {\n      throw new Error('Input shapes are mismatched.');\n    }\n\n    for (let j = 0; j < length; j++) {\n      if (inputs[0].dims[j] !== inputs[i].dims[j]) {\n        throw new Error('Input shapes are not matched.');\n      }\n    }\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n  for (let i = 1; i < inputs.length; i++) {\n    if (inputs[0].type !== inputs[i].type) {\n      throw new Error('Input types are not matched.');\n    }\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {NUMBER_TYPES} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport const tile = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const tileProgramMetadata = {\n    name: 'Tile',\n    inputNames: ['A'],\n    inputTypes: [TextureType.unpacked],\n  };\n\n  const output = inferenceHandler.run(\n      {...tileProgramMetadata, get: () => createTileProgramInfo(inferenceHandler, inputs, tileProgramMetadata)},\n      inputs);\n  return [output];\n};\n\nconst createTileProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], tileProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      const outputShape = new Array(inputShape.length);\n\n      const tileOps: string[] = [];\n      for (let i = 0; i < inputShape.length; i++) {\n        outputShape[i] = inputShape[i] * inputs[1].numberData[i];\n        tileOps.push(`inputIdx[${i}] = int(mod(float(outputIdx[${i}]), ${inputShape[i]}.));`);\n      }\n\n      const rank = outputShape.length;\n      const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        int inputIdx[${rank}];\n        ${tileOps.join('\\n')}\n        return _A(inputIdx);\n      }\n    `;\n      return {\n        ...tileProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Tile requires 2 input.');\n  }\n  if (inputs[1].dims.length !== 1) {\n    throw new Error('The second input shape must 1 dimension.');\n  }\n  if (inputs[1].dims[0] !== inputs[0].dims.length) {\n    throw new Error('Invalid input shape.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invalid repeat type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface TransposeAttributes extends AttributeWithCacheKey {\n  readonly perm: number[];\n}\n\nconst transposeProgramMetadata = {\n  name: 'Transpose',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const transpose: OperatorImplementation<TransposeAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: TransposeAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...transposeProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createTransposeProgramInfo(inferenceHandler, inputs[0], attributes.perm)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseTransposeAttributes: OperatorInitialization<TransposeAttributes> =\n    (node: Graph.Node): TransposeAttributes => createAttributeWithCacheKey({perm: node.attributes.getInts('perm', [])});\n\nconst createTransposeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, perm: number[]): ProgramInfo => {\n      const inputShape = input.dims;\n      perm = getAdjustedPerm(inputShape, perm);\n      const unpackedOutputShape = getOutputShape(inputShape, perm);\n      const rank = inputShape.length;\n      // A dims=[${inputs[0].dims.toString()}]\n      // out Dims=[${unpackedOutputShape.toString()}]\n      // based on perm=[${perm.toString()}]\n      const shaderSource = `\n      ${getPermFunctionBody('perm', perm, rank)}\n      float process(int indices[${rank}]) {\n        int a[${rank}];\n        perm(a, indices);\n        return _A(a);\n      }`;\n      return {\n        ...transposeProgramMetadata,\n        output: {dims: unpackedOutputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst getAdjustedPerm = (inputShape: readonly number[], perm: number[]): number[] => {\n  if (perm && perm.length !== inputShape.length) {\n    perm = [...(inputShape.keys())].reverse();\n  }\n  return perm;\n};\n\nconst getOutputShape = (inputShape: readonly number[], perm: number[]): readonly number[] => {\n  perm = getAdjustedPerm(inputShape, perm);\n  return ShapeUtil.sortBasedOnPerm(inputShape, perm);\n};\n\nconst getPermFunctionBody = (name: string, perm: number[], rank: number): string => {\n  const reverseFunc = [];\n  reverseFunc.push(`void ${name}(out int a[${rank}], int src[${rank}]) {`);\n  for (let i = 0; i < rank; ++i) {\n    reverseFunc.push(`\\ta[${perm[i]}]=src[${i}];`);\n  }\n  reverseFunc.push('\\t}');\n  return reverseFunc.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Transpose requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('input should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {TextureData, TextureType} from '../types';\n\nexport const encodeAsUint8 = (inferenceHandler: WebGLInferenceHandler, input: TextureData): TextureData => {\n  const outputShape = input.shape;\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  /**\n   * https://github.com/tensorflow/tfjs-core/blob/master/src/kernels/webgl/encode_float_gpu.ts\n   */\n  const shaderSource = `\n    const float FLOAT_MAX = 1.70141184e38;\n    const float FLOAT_MIN = 1.17549435e-38;\n\n    bool isNaN(float val) {\n      return (val < 1.0 || 0.0 < val || val == 0.0) ? false : true;\n    }\n\n    highp vec4 encodeAsUint8(highp float v) {\n      if (isNaN(v)) {\n        return vec4(255, 255, 255, 255);\n      }\n\n      highp float av = abs(v);\n\n      if(av < FLOAT_MIN) {\n        return vec4(0.0, 0.0, 0.0, 0.0);\n      } else if(v > FLOAT_MAX) {\n        return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n      } else if(v < -FLOAT_MAX) {\n        return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n      }\n\n      highp vec4 c = vec4(0,0,0,0);\n\n      highp float e = floor(log2(av));\n      highp float m = exp2(fract(log2(av))) - 1.0;\n\n      c[2] = floor(128.0 * m);\n      m -= c[2] / 128.0;\n      c[1] = floor(32768.0 * m);\n      m -= c[1] / 32768.0;\n      c[0] = floor(8388608.0 * m);\n\n      highp float ebias = e + 127.0;\n      c[3] = floor(ebias / 2.0);\n      ebias -= c[3] * 2.0;\n      c[2] += floor(ebias) * 128.0;\n\n      c[3] += 128.0 * step(0.0, -v);\n\n      return c / 255.0;\n    }\n\n    void main() {\n      float value = ${glsl.texture2D}(X,TexCoords).r;\n      ${glsl.output} = encodeAsUint8(value);\n    }`;\n  const programInfo = {\n    name: 'Uint8Encode',\n    inputTypes: [TextureType.unpacked],\n    inputNames: ['X'],\n    output: {dims: outputShape, type: input.tensor.type, textureType: TextureType.downloadUint8AsFloat},\n    shaderSource,\n    hasMain: true\n  };\n  return inferenceHandler.executeProgram(programInfo, [input.tensor]);\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {Tensor} from '../../../tensor';\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport function glslAbs(): GlslValueFunction {\n  return glslBuiltinUnary('abs');\n}\nexport function glslAcos(): GlslValueFunction {\n  return glslBuiltinUnary('acos');\n}\nexport function glslAsin(): GlslValueFunction {\n  return glslBuiltinUnary('asin');\n}\nexport function glslAtan(): GlslValueFunction {\n  return glslBuiltinUnary('atan');\n}\nexport function glslCeil(): GlslValueFunction {\n  return glslBuiltinUnary('ceil');\n}\nexport function glslCos(): GlslValueFunction {\n  return glslBuiltinUnary('cos');\n}\nexport function glslElu(alpha: number): GlslValueFunction {\n  const name = 'elu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a >= 0.0 ? a: (exp(a) - 1.0) * alpha;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslExp(): GlslValueFunction {\n  return glslBuiltinUnary('exp');\n}\nexport function glslFloor(): GlslValueFunction {\n  return glslBuiltinUnary('floor');\n}\nexport function glslClip(min: number, max: number): GlslValueFunction {\n  const name = 'clip';\n  const body = `\n  const float min = float(${min});\n  const float max = float(${max});\n\n  float ${name}_(float a) {\n    return clamp(a, min, max);\n  }\n  vec4 ${name}_(vec4 v) {\n    return clamp(v, min, max);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslIdentity(): GlslValueFunction {\n  const name = 'indentity';\n  const body = `\n  float ${name}_(float a) {\n    return a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLeakyRelu(alpha: number): GlslValueFunction {\n  const name = 'leakyRelu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a < 0.0 ? a * alpha : a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLog(): GlslValueFunction {\n  return glslBuiltinUnary('log');\n}\nexport function glslNeg(): GlslValueFunction {\n  const name = 'neg';\n  const body = `\n  float ${name}_(float a) {\n    return -a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return -v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslNot(): GlslValueFunction {\n  const name = 'not';\n  const body = `\n  float ${name}_(float a) {\n    return float( ! bool(a) );\n  }\n  bool ${name}_(bool a) {\n    return !a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(!bool(v.x), !bool(v.y), !bool(v.z), !bool(v.w));\n  }\n  bvec4 ${name}_(bvec4 v) {\n    return bvec4(!v.x, !v.y, !v.z, !v.w);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSin(): GlslValueFunction {\n  return glslBuiltinUnary('sin');\n}\nexport function glslRelu(): GlslValueFunction {\n  const name = 'relu';\n  const body = `\n  float ${name}_(float a) {\n    return max( a, 0.0 );\n  }\n  vec4 ${name}_(vec4 v) {\n    return max( v, 0.0 );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSigmoid(): GlslValueFunction {\n  const name = 'sigmoid';\n  const body = `\n  float ${name}_(float a) {\n    return 1.0 / (1.0 + exp(-a));\n  }\n  vec4 ${name}_(vec4 v) {\n    return 1.0 / (1.0 + exp(-v));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSqrt(): GlslValueFunction {\n  return glslBuiltinUnary('sqrt');\n}\nexport function glslTan(): GlslValueFunction {\n  return glslBuiltinUnary('tan');\n}\nexport function glslTanh(): GlslValueFunction {\n  const name = 'tanh';\n  const body = `\n  float ${name}_(float a) {\n    a = clamp(a, -10., 10.);\n    a = exp(2.*a);\n    return (a - 1.) / (a + 1.);\n  }\n  vec4 ${name}_(vec4 v) {\n    v = clamp(v, -10., 10.);\n    v = exp(2.*v);\n    return (v - 1.) / (v + 1.);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nfunction glslBuiltinUnary(name: string): GlslValueFunction {\n  const body = `\n  float ${name}_(float a) {\n    return ${name}(a);\n  }\n  vec4 ${name}_(vec4 v) {\n    return ${name}(v);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\n/////\n/////\n/////\n\nconst createElementwiseProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, glslFunc: GlslValueFunction):\n        ProgramInfo => {\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n          const glsl = getGlsl(handler.session.backend.glContext.version);\n          return {\n            ...metadata,\n            output: {dims: input.dims, type: input.type, textureType},\n            shaderSource: `\n     ${glslFunc.body}\n     void main() {\n       vec4 v = ${glsl.texture2D}(A, TexCoords);\n       v = ${glslFunc.name}_(v);\n       ${glsl.output} = v;\n     }\n     `,\n            hasMain: true\n          };\n        };\n\nconst createElementwiseProgramInfoLoader =\n    (handler: WebGLInferenceHandler, input: Tensor, glslFunc: GlslValueFunction, cacheKey?: string):\n        ProgramInfoLoader => {\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n          const metadata = {name: glslFunc.name, inputTypes: [textureType], inputNames: ['A'], cacheHint: cacheKey};\n          return {...metadata, get: () => createElementwiseProgramInfo(handler, metadata, input, glslFunc)};\n        };\n\nexport const abs = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAbs()), inputs)];\n\nexport const acos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAcos()), inputs)];\n\nexport const asin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAsin()), inputs)];\n\nexport const atan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAtan()), inputs)];\n\nexport interface ClipAttributes extends AttributeWithCacheKey {\n  readonly min: number;\n  readonly max: number;\n}\n\nexport const clip =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ClipAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(\n            handler, inputs[0], glslClip(attributes.min, attributes.max), attributes.cacheKey),\n        inputs)];\n\nexport const parseClipAttributes = (node: Graph.Node): ClipAttributes => createAttributeWithCacheKey(\n    {min: node.attributes.getFloat('min', MIN_CLIP), max: node.attributes.getFloat('max', MAX_CLIP)});\n\nexport const clipV11 = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const attributes = generateClipAttributesFromInputs(handler, inputs);\n  return clip(handler, [inputs[0]], attributes);\n};\n\nconst generateClipAttributesFromInputs = (handler: WebGLInferenceHandler, inputs: Tensor[]): ClipAttributes => {\n  if (inputs.length >= 3 &&\n      (!handler.session.isInitializer(inputs[1].dataId) || !handler.session.isInitializer(inputs[2].dataId))) {\n    throw new Error('dynamic clip attributes are not allowed');\n  }\n\n  const min = (inputs.length >= 3) ? inputs[1].numberData[0] : MIN_CLIP;\n  const max = (inputs.length >= 3) ? inputs[2].numberData[0] : MAX_CLIP;\n  return createAttributeWithCacheKey({min, max});\n};\n\nexport const ceil = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCeil()), inputs)];\n\nexport const cos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCos()), inputs)];\n\nexport interface EluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const elu =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: EluAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslElu(attributes.alpha), attributes.cacheKey),\n        inputs)];\n\nexport const parseEluAttributes = (node: Graph.Node): EluAttributes =>\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 1.0)});\n\nexport const exp = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslExp()), inputs)];\n\nexport const floor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslFloor()), inputs)];\n\nexport const identity = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslIdentity()), inputs)];\n\nexport interface LeakyReluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const leakyRelu =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: LeakyReluAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslLeakyRelu(attributes.alpha), attributes.cacheKey),\n        inputs)];\n\nexport const parseLeakyReluAttributes = (node: Graph.Node): LeakyReluAttributes =>\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 0.01)});\n\nexport const log = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslLog()), inputs)];\n\nexport const neg = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNeg()), inputs)];\n\nexport const not = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNot()), inputs)];\n\nexport const relu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslRelu()), inputs)];\n\nexport const sigmoid = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSigmoid()), inputs)];\n\nexport const sin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSin()), inputs)];\n\nexport const sqrt = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSqrt()), inputs)];\n\nexport const tan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTan()), inputs)];\n\nexport const tanh = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTanh()), inputs)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nconst unpackProgramMetadata = {\n  name: 'unpack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed]\n};\n\nexport const createUnpackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const rank = input.dims.length;\n\n  const channels = getChannels('rc', rank);\n  const innerDims = channels.slice(-2);\n  const coordsDataType = getCoordsDataType(rank);\n  const unpackChannel = unpackFromChannel();\n  const isScalar = (input.dims.length === 0);\n  const sourceCoords = isScalar ? '' : getSourceCoords(rank, channels);\n  const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const shaderSource = `\n    ${unpackChannel}\n    void main() {\n      ${coordsDataType} rc = getOutputCoords();\n\n       // Sample the texture with the coords to get the rgba channel value.\n       vec4 packedInput = getA(${sourceCoords});\n\n       ${glsl.output} = vec4(getChannel(packedInput, ${coords}), 0, 0, 0);\n     }\n   `;\n\n  return {\n    ...unpackProgramMetadata,\n    hasMain: true,\n    output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n    shaderSource\n  };\n};\n\nexport const createUnpackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\n    ({...unpackProgramMetadata, get: () => createUnpackProgramInfo(handler, input)});\n\nfunction getSourceCoords(rank: number, dims: string[]): string {\n  if (rank === 1) {\n    return 'rc';\n  }\n\n  let coords = '';\n  for (let i = 0; i < rank; i++) {\n    coords += dims[i];\n    if (i < rank - 1) {\n      coords += ',';\n    }\n  }\n  return coords;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const unsqueeze: OperatorImplementation<number[]> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\n      validateInputs(inputs);\n      const outputShape = ShapeUtil.unsqueezeShape(inputs[0].dims, axes);\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n      return [output];\n    };\n\nexport const unsqueezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return unsqueeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseUnsqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n    node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Unsqueeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Unsqueeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface UpsampleAttributes extends AttributeWithCacheKey {\n  readonly opset: number;\n  readonly isResize: boolean;\n  readonly mode: string;\n  readonly scales: number[];\n  readonly extrapolationValue: number;\n  readonly coordinateTransformMode: string;\n  readonly useExtrapolation: boolean;\n  readonly needRoiInput: boolean;\n  readonly nearestMode: string;\n  readonly cubicCoefficientA: number;\n  readonly excludeOutside: boolean;\n  readonly useNearest2xOptimization: boolean;\n  readonly roiInputIdx: number;\n  readonly scalesInputIdx: number;\n  readonly sizesInputIdx: number;\n}\n\nconst upsampleProgramMetadata = {\n  name: 'Upsample',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const upsample: OperatorImplementation<UpsampleAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(\n          {\n            ...upsampleProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createUpsampleProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseUpsampleAttributesV7: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 7);\n\nexport const parseUpsampleAttributesV9: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 9);\n\nexport const parseUpsampleAttributes = (node: Graph.Node, opset: number): UpsampleAttributes => {\n  const isResize = (opset >= 10);\n\n  // processing node attributes\n  const mode = node.attributes.getString('mode', 'nearest');\n  if (mode !== 'nearest' && mode !== 'linear' && (opset < 11 || mode !== 'cubic')) {\n    throw new Error(`unrecognized mode: ${mode}`);\n  }\n\n  let scales: number[] = [];\n  if (opset < 9) {\n    scales = node.attributes.getFloats('scales');\n    scalesValidation(scales, mode, isResize);\n  }\n\n  const extrapolationValue = node.attributes.getFloat('extrapolation_value', 0.0);\n\n  const coordinateTransformMode =\n      opset > 10 ? node.attributes.getString('coordinate_transformation_mode', 'half_pixel') : 'asymmetric';\n  if ([\n        'asymmetric', 'pytorch_half_pixel', 'tf_half_pixel_for_nn', 'align_corners', 'tf_crop_and_resize', 'half_pixel'\n      ].indexOf(coordinateTransformMode) === -1) {\n    throw new Error(`coordinate_transform_mode '${coordinateTransformMode}' is not supported`);\n  }\n  const needRoiInput = (coordinateTransformMode === 'tf_crop_and_resize');\n  const useExtrapolation = needRoiInput;\n\n  const nearestMode =\n      (mode === 'nearest' && opset >= 11) ? node.attributes.getString('nearest_mode', 'round_prefer_floor') : '';\n  if (['round_prefer_floor', 'round_prefer_ceil', 'floor', 'ceil', ''].indexOf(nearestMode) === -1) {\n    throw new Error(`nearest_mode '${nearestMode}' is not supported`);\n  }\n\n  const cubicCoefficientA = node.attributes.getFloat('cubic_coeff_a', -0.75);\n  const excludeOutside = node.attributes.getInt('exclude_outside', 0) !== 0;\n  if (excludeOutside && mode !== 'cubic') {\n    throw new Error('exclude_outside can be set to 1 only when mode is CUBIC.');\n  }\n\n  const useNearest2xOptimization =\n      (opset < 11) ? true : (mode === 'nearest' && coordinateTransformMode === 'asymmetric' && nearestMode === 'floor');\n\n  let roiInputIdx = 0;\n  let scalesInputIdx = 0;\n  let sizesInputIdx = 0;\n\n  if (opset > 10) {\n    // handle when roiInput is not given\n    if (node.inputs.length > 2) {\n      roiInputIdx = 1;\n      scalesInputIdx = 2;\n      sizesInputIdx = 3;\n    } else {\n      scalesInputIdx = 1;\n      sizesInputIdx = 2;\n    }\n  } else if (opset === 9) {\n    scalesInputIdx = 1;\n  }\n\n  return createAttributeWithCacheKey({\n    opset,\n    isResize,\n    mode,\n    scales,\n    extrapolationValue,\n    coordinateTransformMode,\n    useExtrapolation,\n    needRoiInput,\n    nearestMode,\n    cubicCoefficientA,\n    excludeOutside,\n    useNearest2xOptimization,\n    roiInputIdx,\n    scalesInputIdx,\n    sizesInputIdx\n  });\n};\n\nconst createUpsampleProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [inputWidth, inputHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(inputs[0].dims, TextureType.unpacked);\n\n      const outputShape = inputs[0].dims.map((dim, i) => Math.floor(dim * attributes.scales[i]));\n      const [outputWidth, outputHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(outputShape, TextureType.unpacked);\n      const dim = outputShape.length;\n\n      const outputPitches = new Array<number>(dim);\n      const inputPitches = new Array<number>(dim);\n      let precalculatedPitches = `\n      int output_pitches[${dim}];\n      int input_pitches[${dim}];\n      `;\n      for (let d = dim - 1; d >= 0; d--) {\n        outputPitches[d] = (d === dim - 1) ? 1 : outputPitches[d + 1] * outputShape[d + 1];\n        inputPitches[d] = (d === dim - 1) ? 1 : inputPitches[d + 1] * inputs[0].dims[d + 1];\n\n        precalculatedPitches += `\n        output_pitches[${d}] = ${outputPitches[d]};\n        input_pitches[${d}] = ${inputPitches[d]};\n        `;\n      }\n      const getInputFloatFunction = `\n      float getInputFloat(int index) {\n        vec2 coords = offsetToCoords(index, ${inputWidth}, ${inputHeight});\n        float value = getColorAsFloat(${glsl.texture2D}(X, coords));\n        return value;\n      }\n      `;\n\n      const shaderSource = attributes.mode === 'nearest' ?\n          // nearest\n          `\n    ${getInputFloatFunction}\n    float process(int indices[${dim}]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int d, m;\n      for (int dim = 0; dim < ${dim}; ++dim) {\n        d = output_index / output_pitches[dim];\n        m = output_index - d * output_pitches[dim];\n        output_index = m;\n\n        if (scales[dim] != 1 && d > 0) {\n          int d2 = d / scales[dim];\n          m = d - d2 * scales[dim];\n          d = d2;\n        }\n        input_index += input_pitches[dim] * d;\n      }\n\n      return getInputFloat(input_index);\n    }` :\n          dim === 4 ?\n          // bilinear 4D\n              `\n    ${getInputFloatFunction}\n    float process(int indices[4]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1, index_of_dim2, index_of_dim3;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m / output_pitches[1];\n      m = m - index_of_dim1 * output_pitches[1];\n      index_of_dim2 = m / output_pitches[2];\n      m = m - index_of_dim2 * output_pitches[2];\n      index_of_dim3 = m;\n\n      int index_of_input_dim2, index_of_input_dim3, x_offset, y_offset;\n      index_of_input_dim2 = index_of_dim2 / scales[2];\n      y_offset = index_of_dim2 - index_of_input_dim2 * scales[2];\n      index_of_input_dim3 = index_of_dim3 / scales[3];\n      x_offset = index_of_dim3 - index_of_input_dim3 * scales[3];\n\n      input_index = index_of_dim0 * input_pitches[0] +\n            index_of_dim1 * input_pitches[1] +\n            index_of_input_dim2 * input_pitches[2] +\n            index_of_input_dim3;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim2 = false;\n      if (index_of_input_dim2 == (${inputs[0].dims[2]} - 1)) {\n        // It's the end in dimension 2\n        x01 = x00;\n        end_of_dim2 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[2]);\n      }\n\n      if (index_of_input_dim3 == (input_pitches[2] - 1)) {\n        // It's the end in dimension 3\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim2 ? x10 : getInputFloat(input_index + input_pitches[2] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[2]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[2]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[3]);\n    }` :\n              // bilinear 2D\n              `\n    ${getInputFloatFunction}\n    float process(int indices[2]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m;\n\n      int index_of_input_dim0, index_of_input_dim1, x_offset, y_offset;\n      index_of_input_dim0 = index_of_dim0 / scales[0];\n      y_offset = index_of_dim0 - index_of_input_dim0 * scales[0];\n      index_of_input_dim1 = index_of_dim1 / scales[1];\n      x_offset = index_of_dim1 - index_of_input_dim1 * scales[1];\n\n      input_index = index_of_input_dim0 * input_pitches[0] + index_of_input_dim1;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim0 = false;\n      if (index_of_input_dim0 == (${inputs[0].dims[0]} - 1)) {\n        // It's the end in dimension 0\n        x01 = x00;\n        end_of_dim0 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[0]);\n      }\n\n      if (index_of_input_dim1 == (input_pitches[0] - 1)) {\n        // It's the end in dimension 1\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim0 ? x10 : getInputFloat(input_index + input_pitches[0] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[0]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[0]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[1]);\n    }`;\n      return {\n        ...upsampleProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        variables: [{\n          name: 'scales',\n          type: 'int',\n          arrayLength: attributes.scales.length,\n          data: attributes.scales.map(x => Math.ceil(x))\n        }]\n      };\n    };\n\nexport const validateInputs = (inputs: Tensor[], attribute: UpsampleAttributes): void => {\n  if (!inputs || (attribute.opset < 9 && inputs.length !== 1) ||\n      (attribute.opset >= 9 && attribute.opset < 11 && inputs.length !== 2) ||\n      (attribute.opset >= 11 && inputs.length < 2)) {\n    throw new Error('invalid inputs.');\n  }\n\n  if (attribute.scales.length > 0 && inputs[0].dims.length !== attribute.scales.length) {\n    throw new Error('Invalid input shape.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input tensor types.');\n  }\n};\n\nexport const scalesValidation = (scales: number[], mode: string, isResize: boolean): void => {\n  if (!isResize) {\n    for (const scale of scales) {\n      if (scale < 1) {\n        throw new Error('Scale value should be greater than or equal to 1.');\n      }\n    }\n  } else {\n    for (const scale of scales) {\n      if (scale <= 0) {\n        throw new Error('Scale value should be greater than 0.');\n      }\n    }\n  }\n  if (mode === 'linear' || mode === 'cubic') {\n    if (scales.length !== 2 && (scales.length !== 4 || scales[0] !== 1 || scales[1] !== 1)) {\n      throw new Error(`'Linear' mode and 'Cubic' mode only support 2-D inputs ('Bilinear', 'Bicubic') \\\n        or 4-D inputs with the corresponding outermost 2 scale values being 1 \\\n        in the ${isResize ? 'Resize' : 'Upsample'} opeartor.`);\n    }\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {Logger, Profiler} from '../../instrument';\n\nimport {GlslPreprocessor} from './glsl-preprocessor';\nimport {getVertexShaderSource} from './glsl-source';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {Artifact, ProgramInfo, ProgramVariable, TextureData, TextureLayout, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * ProgramManager is the main class behind running computations\n * It builds ProgramInfo's into Artifacts\n * It compiles given ProgramInfo's into WebGL Prorams (cached as Artifacts)\n * Uses the artifact to run the computation by calling Draw on\n * the WebGL drawing buffer\n * ProgramManager automatically maps (binds) input variables to their\n * corresponding Location's in the binary program\n */\nexport class ProgramManager {\n  repo: Map<unknown, Artifact>;  // this should be per-session object\n  vertexShader: WebGLShader;\n  attributesBound: boolean;\n\n  constructor(\n      public profiler: Readonly<Profiler>, public glContext: WebGLContext,\n      public textureLayoutStrategy: TextureLayoutStrategy) {\n    this.repo = new Map();\n    this.attributesBound = false;\n  }\n  getArtifact(key: unknown): Artifact|undefined {\n    return this.repo.get(key);\n  }\n  setArtifact(key: unknown, artifact: Artifact): void {\n    this.repo.set(key, artifact);\n  }\n  run(buildArtifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    this.profiler.event('op', `ProgramManager.run ${buildArtifact.programInfo.name ?? 'unknown kernel'}`, () => {\n      const gl = this.glContext.gl;\n      const program = buildArtifact.program;\n      gl.useProgram(program);\n      try {\n        this.bindOutput(output);\n        if (!this.attributesBound) {\n          this.bindAttributes(buildArtifact.attribLocations);\n        }\n        this.bindUniforms(buildArtifact.uniformLocations, buildArtifact.programInfo.variables ?? [], inputs);\n      } catch (err) {\n        Logger.error('ProgramManager', buildArtifact.programInfo.shaderSource);\n        throw err;\n      }\n      this.profiler.event('backend', 'GlContext.draw()', () => {\n        this.glContext.draw();\n      });\n    }, this.glContext);\n  }\n  dispose(): void {\n    if (this.vertexShader) {\n      this.glContext.deleteShader(this.vertexShader);\n    }\n    this.repo.forEach(a => this.glContext.deleteProgram(a.program));\n  }\n  build(programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[], outputTextureLayout: TextureLayout): Artifact {\n    return this.profiler.event('backend', 'ProgramManager.build', () => {\n      const preprocessor = new GlslPreprocessor(this.glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n      const fragScript = preprocessor.preprocess();\n      const program = this.compile(fragScript);\n      const artifact = {\n        programInfo,\n        program,\n        uniformLocations: this.getUniformLocations(\n            program, preprocessor.context.programInfo.inputNames, preprocessor.context.programInfo.variables),\n        attribLocations: this.getAttribLocations(program)\n      };\n      return artifact;\n    });\n  }\n  protected compile(fragShaderScript: string): WebGLProgram {\n    if (!this.vertexShader) {\n      Logger.verbose('ProrgramManager', 'Compiling and caching Vertex shader for the first time');\n      const vertexShaderScript = getVertexShaderSource(this.glContext.version);\n      this.vertexShader = this.glContext.compileShader(vertexShaderScript, this.glContext.gl.VERTEX_SHADER);\n    }\n    if (env.debug) {\n      Logger.verbose('ProrgramManager', `FragShader:\n${fragShaderScript}\n`);\n    }\n    const fragShader = this.glContext.compileShader(fragShaderScript, this.glContext.gl.FRAGMENT_SHADER);\n    const program = this.glContext.createProgram(this.vertexShader, fragShader);\n    this.glContext.deleteShader(fragShader);\n    return program;\n  }\n  bindOutput(td: TextureData): void {\n    const width = td.width;\n    const height = td.height;\n    Logger.verbose(\n        'ProrgramManager',\n        `Binding output texture to Framebuffer: w/h=${width}/${height}, shape=${td.shape}, type=${td.tensor.type}`);\n    this.glContext.attachFramebuffer(td.texture, width, height);\n  }\n  bindAttributes(attribLocations: Artifact.AttribLocations): void {\n    const positionHandle = attribLocations.position;\n    const textureCoordHandle = attribLocations.textureCoord;\n    this.glContext.setVertexAttributes(positionHandle, textureCoordHandle);\n    this.attributesBound = true;\n  }\n  bindUniforms(uniformLocations: Artifact.UniformLocations, variables: ProgramVariable[], textures: TextureData[]):\n      void {\n    const gl = this.glContext.gl;\n    let texturePosition = 0;\n    for (const {name, type, location, arrayLength} of uniformLocations) {\n      const value = variables.find(v => v.name === name)?.data;\n      if (type !== 'sampler2D' && !value) {\n        throw new Error(`variable '${name}' does not have data defined in program info`);\n      }\n      switch (type) {\n        case 'sampler2D':\n          this.bindTexture(textures[texturePosition], location, texturePosition);\n          texturePosition++;\n          break;\n        case 'float':\n          if (arrayLength) {\n            gl.uniform1fv(location, value as number[]);\n          } else {\n            gl.uniform1f(location, value as number);\n          }\n          break;\n        case 'int':\n          if (arrayLength) {\n            gl.uniform1iv(location, value as number[]);\n          } else {\n            gl.uniform1i(location, value as number);\n          }\n          break;\n        default:\n          throw new Error(`Uniform not implemented: ${type}`);\n      }\n    }\n  }\n  bindTexture(td: TextureData, uniformHandle: WebGLUniformLocation, position: number): void {\n    this.glContext.bindTextureToUniform(td.texture, position, uniformHandle);\n  }\n  getAttribLocations(program: WebGLProgram): Artifact.AttribLocations {\n    return {\n      position: this.getAttribLocation(program, 'position'),\n      textureCoord: this.getAttribLocation(program, 'textureCoord')\n    };\n  }\n  getUniformLocations(program: WebGLProgram, samplers?: string[], variables?: VariableInfo[]):\n      Artifact.UniformLocations {\n    const uniformLocations: Artifact.UniformLocations = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLocations.push({name: sampler, type: 'sampler2D', location: this.getUniformLocation(program, sampler)});\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLocations.push({...variable, location: this.getUniformLocation(program, variable.name)});\n      }\n    }\n    return uniformLocations;\n  }\n  getUniformLocation(program: WebGLProgram, name: string): WebGLUniformLocation {\n    const gl = this.glContext.gl;\n    const reference = gl.getUniformLocation(program, name);\n    if (reference === null) {\n      throw new Error(`Uniform ${name} not found.`);\n    }\n    return reference;\n  }\n  getAttribLocation(program: WebGLProgram, name: string): number {\n    const gl = this.glContext.gl;\n    const attributeLocation: number = gl.getAttribLocation(program, name);\n    return attributeLocation;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from '../../backend';\nimport {Graph} from '../../graph';\nimport {Logger} from '../../instrument';\nimport {Operator} from '../../operators';\nimport {OpSet, resolveOperator} from '../../opset';\nimport {Session} from '../../session';\nimport {Tensor} from '../../tensor';\nimport {WebGLBackend} from '../backend-webgl';\n\nimport {WebGLInferenceHandler} from './inference-handler';\nimport {WEBGL_OP_RESOLVE_RULES} from './op-resolve-rules';\nimport {ProgramManager} from './program-manager';\nimport {PreferLogicalStrategy, TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureManager} from './texture-manager';\nimport {TextureData} from './types';\n\nexport class WebGLSessionHandler implements SessionHandler {\n  programManager: ProgramManager;\n  textureManager: TextureManager;\n  layoutStrategy: TextureLayoutStrategy;\n  packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  pack2unpackMap: Map<Tensor.Id, Tensor.Id>;\n  unpack2packMap: Map<Tensor.Id, Tensor.Id>;\n  initializers: Set<Tensor.Id>;\n  pack?: boolean;\n\n  constructor(public readonly backend: WebGLBackend, public readonly context: Session.Context) {\n    this.layoutStrategy = new PreferLogicalStrategy(backend.glContext.maxTextureSize);\n    this.programManager = new ProgramManager(this.context.profiler, backend.glContext, this.layoutStrategy);\n    this.textureManager = new TextureManager(\n        backend.glContext, this.layoutStrategy, this.context.profiler,\n        {reuseTextures: backend.textureCacheMode === 'full'});\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n    this.pack = backend.pack;\n    this.pack2unpackMap = new Map();\n    this.unpack2packMap = new Map();\n  }\n\n  createInferenceHandler() {\n    return new WebGLInferenceHandler(this);\n  }\n  onGraphInitialized(graph: Graph): void {\n    const initializers = graph.getValues().filter(v => v.from === -1 && v.tensor).map(v => v.tensor!.dataId);\n    this.initializers = new Set(initializers);\n  }\n  isInitializer(tensorId: Tensor.Id): boolean {\n    return this.initializers ? this.initializers.has(tensorId) : false;\n  }\n  addInitializer(tensorId: Tensor.Id): void {\n    this.initializers.add(tensorId);\n  }\n  getTextureData(tensorId: Tensor.Id, isPacked: boolean): TextureData|undefined {\n    if (isPacked) {\n      return this.packedTextureDataCache.get(tensorId);\n    } else {\n      return this.unpackedTextureDataCache.get(tensorId);\n    }\n  }\n  setTextureData(tensorId: Tensor.Id, textureData: TextureData, isPacked = false): void {\n    Logger.verbose('WebGLSessionHandler', 'Storing Texture data in cache');\n    if (isPacked) {\n      this.packedTextureDataCache.set(tensorId, textureData);\n    } else {\n      this.unpackedTextureDataCache.set(tensorId, textureData);\n    }\n  }\n  dispose(): void {\n    this.programManager.dispose();\n    this.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.unpackedTextureDataCache = new Map();\n  }\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator {\n    const op = resolveOperator(node, opsets, WEBGL_OP_RESOLVE_RULES);\n    return {impl: op.opImpl, context: op.opInit ? op.opInit(node, graph) : node};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nexport declare namespace Encoder {\n  export interface DataTypeMap {\n    float: Float32Array;\n    byte: Uint8Array;\n    int: Uint32Array;\n  }\n  export type DataType = keyof DataTypeMap;\n  type DataArrayType = DataTypeMap[DataType];\n\n  /* eslint-disable @typescript-eslint/naming-convention */\n  export const enum Usage {\n    Default = 0,\n    UploadOnly,\n    Download4BytesAsFloat32,\n  }\n}\n\n/**\n * Abstraction for mapping data types to texture texlets\n * Encoding means how a Float32 is mapped to 1 or 4 channels for each texlet\n * Decoding means how a texlet's channels are mapped to a resulting Float32\n */\nexport interface DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType;\n  allocate(size: number): Encoder.DataArrayType;\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Encoder.DataArrayType;\n}\n/**\n * WebGL2 data encoder\n * Uses R32F as the format for texlet\n */\nexport class RedFloat32DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGL2RenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.R32F;\n      this.format = gl.RED;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA32F;\n      this.format = gl.RGBA;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType {\n    let result: Float32Array;\n    let source: Float32Array;\n    if (src.constructor !== Float32Array) {\n      Logger.warning('Encoder', 'data was not of type Float32; creating new Float32Array');\n      source = new Float32Array(src);\n    }\n    if (textureSize * this.channelSize > src.length) {\n      Logger.warning('Encoder', 'Source data too small. Allocating larger array');\n      source = src as Float32Array;\n      result = this.allocate(textureSize * this.channelSize) as Float32Array;\n      source.forEach((v, i) => result[i] = v);\n    } else {\n      source = src as Float32Array;\n      result = source;\n    }\n    return result;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n/**\n * Data encoder for WebGL 1 with support for floating point texture\n */\nexport class RGBAFloatDataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGLRenderingContext, channels = 1, textureType?: number) {\n    if (channels !== 1 && channels !== 4) {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n    this.internalFormat = gl.RGBA;\n    this.format = gl.RGBA;\n    this.channelSize = channels;\n    this.textureType = textureType || gl.FLOAT;\n  }\n  encode(src: Float32Array, textureSize: number): Encoder.DataArrayType {\n    let dest = src;\n    if (this.channelSize === 1) {\n      Logger.verbose('Encoder', 'Exploding into a larger array');\n      dest = this.allocate(textureSize) as Float32Array;\n      src.forEach((v, i) => dest[i * 4] = v);\n    }\n    return dest;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n\nexport class Uint8DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize = 4;\n  constructor(gl: WebGLRenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.ALPHA;\n      this.format = gl.ALPHA;  // not tested\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA;\n      this.format = gl.RGBA;\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Uint8Array, _textureSize: number): Encoder.DataArrayType {\n    return new Uint8Array(src.buffer, src.byteOffset, src.byteLength);\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Uint8Array(size * this.channelSize);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Uint8Array {\n    if (buffer instanceof Uint8Array) {\n      return buffer.subarray(0, dataSize);\n    }\n    throw new Error(`Invalid array type: ${buffer.constructor}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\nimport {assert} from '../../util';\n\n/** Layout preferences */\nexport interface WidthHeightPrefs {\n  breakAxis?: number;\n  isPacked?: boolean;\n  reverseWH?: boolean;\n}\n/**\n * TextureLayoutStrategy is an abstraction for different plans\n * for mapping n-dimensional arrays to 2D textures (and back)\n */\nexport interface TextureLayoutStrategy {\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number];\n}\n\n/**\n * This strategy try to find the minimal max(W,H) that fulfills (W * H == totalSize)\n */\nexport class AlwaysKeepOriginalSizeStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    // scalar tensor\n    if (shape.length === 0) {\n      return [1, 1];\n    }\n    const maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    const totalSize = shape.reduce((a, b) => a * b);\n\n    let width = Math.floor(Math.sqrt(totalSize));\n\n    for (; width < maxTextureSize && width < totalSize; width++) {\n      if (totalSize % width === 0) {\n        break;\n      }\n    }\n\n    if (width >= maxTextureSize || totalSize % width !== 0) {\n      throw new Error(`The given dimensions are outside this GPU's boundaries: ${shape}`);\n    }\n    return [width, totalSize / width];\n  }\n}\n\nexport class PreferLogicalStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const wh = this.computeTexture(shape, prefs);\n    if (prefs && prefs.isPacked) {\n      wh[0] /= 2;\n      wh[1] /= 2;\n    }\n    if (prefs && prefs.reverseWH) {\n      return [wh[1], wh[0]];\n    }\n    return wh;\n  }\n\n  computeTexture(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const isPacked = prefs && prefs.isPacked;\n    // scalar tensor\n    if (shape.length === 0) {\n      return isPacked ? [2, 2] : [1, 1];\n    }\n    let maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    let logShape = shape.slice(0);\n    if (isPacked) {\n      maxTextureSize = maxTextureSize * 2;\n\n      // This logic ensures we accurately count the number of packed texels needed\n      // to accommodate the tensor. We can only pack values in the same texel if\n      // they are from adjacent pairs of rows/cols within the same batch. So if a\n      // tensor has 3 rows, we pretend it has 4 rows in order to account for the\n      // fact that the texels containing the third row are half empty.\n      logShape = logShape.map(\n          (d, i) => i >= logShape.length - 2 ? (logShape[i] % 2 === 0 ? logShape[i] : logShape[i] + 1) : logShape[i]);\n\n      // Packed texture height is at least 2 (the channel height of a single\n      // texel).\n      if (logShape.length === 1) {\n        logShape = [2, logShape[0]];\n      }\n    }\n\n    // If logical shape is 2, we don't squeeze, since we want to match physical.\n    if (logShape.length !== 2) {\n      const squeezeResult = squeezeShape(logShape);\n      logShape = squeezeResult.newShape;\n    }\n\n    const size = sizeFromShape(logShape);\n    if (logShape.length <= 1 && size <= maxTextureSize) {\n      return [1, size];\n    } else if (logShape.length === 2 && logShape[0] <= maxTextureSize && logShape[1] <= maxTextureSize) {\n      return logShape as [number, number];\n    } else if (logShape.length === 3 && logShape[0] * logShape[1] <= maxTextureSize && logShape[2] <= maxTextureSize) {\n      return [logShape[0] * logShape[1], logShape[2]];\n    } else if (logShape.length === 3 && logShape[0] <= maxTextureSize && logShape[1] * logShape[2] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2]];\n    } else if (\n        logShape.length === 4 && logShape[0] * logShape[1] * logShape[2] <= maxTextureSize &&\n        logShape[3] <= maxTextureSize) {\n      return [logShape[0] * logShape[1] * logShape[2], logShape[3]];\n    } else if (\n        logShape.length === 4 && logShape[0] <= maxTextureSize &&\n        logShape[1] * logShape[2] * logShape[3] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2] * logShape[3]];\n    } else {\n      if (isPacked) {\n        // For packed textures size equals the number of channels required to\n        // accommodate the texture data. However in order to squarify such that\n        // inner dimensions stay even, we rewrite size to equal the number of\n        // texels. Then in the return statement we rehydrate the squarified\n        // dimensions to channel units.\n        return sizeToSquarishShape(size / 4).map(d => d * 2) as [number, number];\n      }\n      return sizeToSquarishShape(size);\n    }\n  }\n}\n\nexport function squeezeShape(shape: number[], axis?: number[]): {newShape: number[]; keptDims: number[]} {\n  const newShape: number[] = [];\n  const keptDims: number[] = [];\n  const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\n  const axes = (axis == null || isEmptyArray) ? null : parseAxisParam(axis, shape).sort();\n  let j = 0;\n  for (let i = 0; i < shape.length; ++i) {\n    if (axes != null) {\n      if (axes[j] === i && shape[i] !== 1) {\n        throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\n      }\n      if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\n        newShape.push(shape[i]);\n        keptDims.push(i);\n      }\n      if (axes[j] <= i) {\n        j++;\n      }\n    }\n    if (shape[i] !== 1) {\n      newShape.push(shape[i]);\n      keptDims.push(i);\n    }\n  }\n  return {newShape, keptDims};\n}\n\nexport function parseAxisParam(axis: number|number[], shape: number[]): number[] {\n  const rank = shape.length;\n\n  // Normalize input\n  axis = axis == null ? shape.map((s, i) => i) : ([] as number[]).concat(axis);\n\n  // Check for valid range\n  assert(\n      axis.every(ax => ax >= -rank && ax < rank),\n      () => `All values in axis param must be in range [-${rank}, ${rank}) but ` +\n          `got axis ${axis}`);\n\n  // Check for only integers\n  assert(\n      axis.every(isInt),\n      () => 'All values in axis param must be integers but ' +\n          `got axis ${axis}`);\n\n  // Handle negative axis.\n  return axis.map(a => a < 0 ? rank + a : a);\n}\nexport function isInt(a: number): boolean {\n  return a % 1 === 0;\n}\nexport function sizeFromShape(shape: number[]): number {\n  if (shape.length === 0) {\n    // Scalar.\n    return 1;\n  }\n  let size = shape[0];\n  for (let i = 1; i < shape.length; i++) {\n    size *= shape[i];\n  }\n  return size;\n}\nexport function getRowsCols(shape: number[]): [number, number] {\n  if (shape.length === 0) {\n    throw Error('Cannot get rows and columns of an empty shape array.');\n  }\n\n  return [shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\nexport function sizeToSquarishShape(size: number): [number, number] {\n  const width = Math.ceil(Math.sqrt(size));\n  return [width, Math.ceil(size / width)];\n}\nexport function getBatchDim(shape: number[], dimsToSkip = 2): number {\n  return sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ShapeUtil} from '../../util';\n\nimport {TextureLayoutStrategy, WidthHeightPrefs} from './texture-layout-strategy';\nimport {TextureLayout, TextureType} from './types';\n\nexport const createTextureLayoutFromTextureType =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[],\n     textureType: TextureType): TextureLayout => {\n      const channel = (textureType === TextureType.unpacked || textureType === TextureType.unpackedReversed) ? 1 : 4;\n      const isPacked = textureType === TextureType.packed;\n      const reverseWH = (textureType === TextureType.unpackedReversed || textureType === TextureType.packed);\n      const breakAxis = textureType === TextureType.packedLastDimension ? shape.length - 1 : undefined;\n      const unpackedShape = textureType === TextureType.packedLastDimension ?\n          shape.map((d, i) => i === shape.length - 1 ? d * 4 : d) :\n          undefined;\n      return createTextureLayoutFromShape(\n          textureLayoutStrategy, shape, channel, unpackedShape, {isPacked, reverseWH, breakAxis});\n    };\n\nexport const calculateTextureWidthAndHeight =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], textureType: TextureType):\n        [number, number] => {\n          const layout = createTextureLayoutFromTextureType(textureLayoutStrategy, shape, textureType);\n          return [layout.width, layout.height];\n        };\n\n/**\n * Create a TextureLayout object from shape.\n */\nexport const createTextureLayoutFromShape =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], channels: 1|4 = 1,\n     unpackedShape?: readonly number[], prefs?: WidthHeightPrefs): TextureLayout => {\n      const isPacked = !!(prefs && prefs.isPacked);\n      const [width, height] = textureLayoutStrategy.computeTextureWH(isPacked ? unpackedShape || shape : shape, prefs);\n      const rank = shape.length;\n      let inferredDims = shape.slice(0);\n      if (rank === 0) {\n        inferredDims = [1];\n      }\n      if (channels === 1) {\n        // unpackedShape will take `shape` and not `inferredDims` so as to create a scalar Tensor if need be\n        unpackedShape = shape;\n      } else if (isPacked) {\n        if (channels !== 4) {\n          throw new Error('a packed texture must be 4-channel');\n        }\n        unpackedShape = shape;\n        if (rank > 0) {\n          inferredDims[rank - 1] = Math.ceil(inferredDims[rank - 1] / 2);\n        }\n        if (rank > 1) {\n          inferredDims[rank - 2] = Math.ceil(inferredDims[rank - 2] / 2);\n        }\n      } else if (!unpackedShape) {\n        throw new Error('Unpacked shape is needed when using channels > 1');\n      }\n      return {\n        width,\n        height,\n        channels,\n        isPacked,\n        shape: inferredDims,\n        strides: ShapeUtil.computeStrides(inferredDims),\n        unpackedShape,\n        reversedWH: (prefs && prefs.reverseWH)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger, Profiler} from '../../instrument';\nimport {Tensor} from '../../tensor';\n\nimport {Encoder} from './texture-data-encoder';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureData, TextureLayout} from './types';\nimport {WebGLContext} from './webgl-context';\n\nexport interface TextureManagerConfig {\n  reuseTextures?: boolean;\n}\n\n/**\n * TextureManager is the mainly responsible for caching Textures\n * Textures are cached in 2 levels:\n *   1. the texures which are associated with a dataId (from Tensor)\n *    Caching these is crucial to performance. These are In-use Textures\n *   2. textures which are not in use by any current ProgramInfo/Tensor\n *     These are called Free Textures\n * TextureManager is also used to help creating textures. For this it\n * uses WebGLContext and TextureLayoutStrategy\n */\nexport class TextureManager {\n  private readonly inUseTextures: Map<string, WebGLTexture[]>;\n  private readonly idleTextures: Map<string, WebGLTexture[]>;\n  private readonly textureLookup: Map<WebGLTexture, string>;\n  private readonly pendingRead: Map<Tensor.Id, Array<(arr: Tensor.NumberType) => void>> = new Map();\n\n  constructor(\n      public glContext: WebGLContext, public layoutStrategy: TextureLayoutStrategy, public profiler: Readonly<Profiler>,\n      private config: TextureManagerConfig) {\n    if (config.reuseTextures) {\n      this.inUseTextures = new Map();\n      this.idleTextures = new Map();\n      this.textureLookup = new Map();\n    }\n  }\n  createTextureFromLayout(\n      dataType: Tensor.DataType, layout: TextureLayout, data?: Tensor.NumberType, usage?: Encoder.Usage) {\n    const textureDataType = this.toEncoderType(dataType);\n\n    const encoder = this.glContext.getEncoder(textureDataType, layout.channels || 1, usage);\n    if (layout.isPacked && usage === Encoder.Usage.UploadOnly) {\n      throw new Error('not implemented');\n    }\n    const width = layout.width;\n    const height = layout.height;\n\n    let key: string|undefined;\n    let inUseTextures: WebGLTexture[]|undefined;\n    if (this.config.reuseTextures) {\n      key = `${width}x${height}_${encoder.format}_${encoder.internalFormat}_${encoder.textureType}`;\n      inUseTextures = this.inUseTextures.get(key);\n      if (!inUseTextures) {\n        inUseTextures = [];\n        this.inUseTextures.set(key, inUseTextures);\n      }\n\n      const idleTextures = this.idleTextures.get(key);\n      if (idleTextures && idleTextures.length > 0) {\n        const texture = idleTextures.pop()!;\n        inUseTextures.push(texture);\n        if (usage === Encoder.Usage.UploadOnly) {\n          this.glContext.updateTexture(texture, width, height, encoder, this.toTextureData(dataType, data)!);\n        }\n        return texture;\n      }\n    }\n\n    Logger.verbose('TextureManager', `Creating new texture of size ${layout.width}x${layout.height}`);\n    const texture = this.glContext.allocateTexture(width, height, encoder, this.toTextureData(dataType, data));\n\n    if (this.config.reuseTextures) {\n      inUseTextures!.push(texture);\n      this.textureLookup.set(texture, key!);\n    }\n    return texture;\n  }\n  readTexture(td: TextureData, dataType: Tensor.DataType, channels?: number): Tensor.NumberType {\n    if (!channels) {\n      channels = 1;\n    }\n    return this.profiler.event('backend', 'TextureManager.readTexture', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      return this.toTensorData(dataType, data);\n    });\n  }\n  async readTextureAsync(td: TextureData, dataType: Tensor.DataType, channels?: number): Promise<Tensor.NumberType> {\n    const dataId = td.tensor.dataId;\n    if (!channels) {\n      channels = 1;\n    }\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise<Tensor.NumberType>(resolve => subscribers?.push(resolve));\n    }\n    return this.profiler.event('backend', 'TextureManager.readTextureAsync', async () => {\n      this.pendingRead.set(dataId, []);\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      // add a fence waiting for the data to be ready\n      await this.glContext.createAndWaitForFence();\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      const tensorData = this.toTensorData(dataType, data);\n      const subscribers = this.pendingRead.get(dataId);\n      this.pendingRead.delete(dataId);\n      subscribers?.forEach(resolve => resolve(tensorData));\n      return tensorData;\n    });\n  }\n  readUint8TextureAsFloat(td: TextureData): Float32Array {\n    return this.profiler.event('backend', 'TextureManager.readUint8TextureAsFloat', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b);\n      const data = this.glContext.readTexture(td.texture, td.width, td.height, dataSize * 4, 'byte', 4);\n      return new Float32Array(data.buffer, data.byteOffset, dataSize);\n    });\n  }\n  releaseTexture(textureData: TextureData, deleteTexture?: boolean): void {\n    let key: string|undefined;\n    if (this.config.reuseTextures) {\n      key = this.textureLookup.get(textureData.texture);\n      if (key) {\n        if (deleteTexture) {\n          this.textureLookup.delete(key);\n        }\n        const inUseTextures = this.inUseTextures.get(key);\n        if (inUseTextures) {\n          const index = inUseTextures.indexOf(textureData.texture);\n          if (index !== -1) {\n            inUseTextures.splice(index, 1);\n            let idleTextures = this.idleTextures.get(key);\n            if (!idleTextures) {\n              idleTextures = [];\n              this.idleTextures.set(key, idleTextures);\n            }\n            idleTextures.push(textureData.texture);\n          }\n        }\n      }\n    }\n\n    if (!key || deleteTexture) {\n      Logger.verbose('TextureManager', `Deleting texture of size ${textureData.width}x${textureData.height}`);\n      this.glContext.deleteTexture(textureData.texture);\n    }\n  }\n  toTensorData(dataType: Tensor.DataType, data: Encoder.DataArrayType): Tensor.NumberType {\n    switch (dataType) {\n      case 'int16':\n        return data instanceof Int16Array ? data : Int16Array.from(data);\n      case 'int32':\n        return data instanceof Int32Array ? data : Int32Array.from(data);\n      case 'int8':\n        return data instanceof Int8Array ? data : Int8Array.from(data);\n      case 'uint16':\n        return data instanceof Uint16Array ? data : Uint16Array.from(data);\n      case 'uint32':\n        return data instanceof Uint32Array ? data : Uint32Array.from(data);\n      case 'uint8':\n      case 'bool':\n        return data instanceof Uint8Array ? data : Uint8Array.from(data);\n      case 'float32':\n        return data instanceof Float32Array ? data : Float32Array.from(data);\n      case 'float64':\n        return data instanceof Float64Array ? data : Float64Array.from(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n  }\n  toTextureData(dataType: Tensor.DataType, data: Tensor.NumberType|undefined): Encoder.DataArrayType|undefined {\n    if (!data) {\n      return undefined;\n    }\n    return (data instanceof Float32Array) ? data : new Float32Array(data);\n    /*\n    switch (dataType) {\n      case 'int16':\n      case 'int32':\n      case 'uint16':\n      case 'uint32':\n        return (data.constructor === Uint32Array) ? data as Uint32Array : new Uint32Array(data);\n      case 'int8':\n      case 'uint8':\n      case 'bool':\n        return (data.constructor === Uint8Array) ? data as Uint8Array : new Uint8Array(data);\n      case 'float32':\n      case 'float64':\n        return (data.constructor === Float32Array) ? data as Float32Array : new Float32Array(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n    */\n  }\n  toEncoderType(_dataType: Tensor.DataType): Encoder.DataType {\n    return 'float';\n    // switch (dataType) {\n    //   case 'int16':\n    //   case 'int32':\n    //   case 'uint16':\n    //   case 'uint32':\n    //     return 'int';\n    //   case 'uint8':\n    //   case 'bool':\n    //     return 'byte';\n    //   case 'float32':\n    //   case 'float64':\n    //     return 'float';\n    //   default:\n    //     throw new Error(`TensorData type ${dataType} is not supported`);\n    // }\n  }\n  clearActiveTextures(): void {\n    this.glContext.clearActiveTextures();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../tensor';\n\n/**\n * Layout info is used for mapping n-dimensional array to 2D textures\n * The layout is created by the TextureLayoutStrategy based on\n * the Tensor's dimensions and strides\n */\nexport interface TextureLayout {\n  width: number;\n  height: number;\n  /**\n   * specify the number of value that encoded in a single pixel\n   */\n  channels: 1|2|3|4;\n  /**\n   * whether in packed mode or not\n   */\n  isPacked?: boolean;\n  /**\n   * the normalized shape\n   */\n  shape: readonly number[];\n  /**\n   * the stride of each dimensions, calculated according to shape\n   */\n  strides: readonly number[];\n  /**\n   * the original shape(dims) of the corresponding tensor\n   */\n  unpackedShape: readonly number[];\n\n  reversedWH?: boolean;\n}\nexport interface TextureData extends TextureLayout {\n  tensor: Tensor;\n  texture: WebGLTexture;\n}\n\nexport enum TextureType {\n  unpacked,              // <-- normal unpacked texture\n  unpackedReversed,      // <-- unpacked texture used in old ONNX.js implementation (deprecated)\n  packed,                // <-- normal packed texture\n  downloadUint8AsFloat,  // <-- ONLY used in texture downloading for iOS devices\n  packedLastDimension    // <-- ONLY used in old ONNX.js Conv implementation for input W (deprecated)\n}\n\nexport interface TensorInfo {\n  id?: Tensor.Id;\n  dims: readonly number[];\n  type: Tensor.DataType;\n  textureType: TextureType;\n}\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n/**\n * A set of metadata of a shader program.\n */\nexport interface ProgramMetadata {\n  /**\n   * the name of the program. used for debugging and profiling\n   */\n  name: string;\n  /**\n   * texture types for each input\n   */\n  inputTypes: TextureType[];\n  /**\n   * names of each input\n   */\n  inputNames: string[];\n  /**\n   * an optional string as a cache hint in the artifact cache\n   */\n  cacheHint?: string;\n}\n\n/**\n * A ProgramInfoLoader allows\n */\nexport interface ProgramInfoLoader extends ProgramMetadata {\n  /**\n   * a function to get the program info\n   */\n  get(): ProgramInfo;\n}\n\n/**\n * A set of data that represent a shader program\n */\nexport interface ProgramInfo extends ProgramMetadata {\n  /**\n   * information of uniform variables\n   */\n  variables?: ProgramVariable[];\n  /**\n   * tensor info for output\n   */\n  output: TensorInfo;\n  /**\n   * the shader's processing source code\n   */\n  shaderSource: string;\n  /**\n   * whether the shader source contains a customized main function implementation\n   */\n  hasMain?: boolean;\n}\n\nexport interface VariableInfo {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n/**\n * Information of uniforms that shader uses\n */\nexport interface UniformInfo {\n  type: 'sampler2D'|VariableInfo['type'];\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface UniformLocation extends UniformInfo {\n  location: WebGLUniformLocation;\n}\n\n/**\n * Artifact is the result of compilation\n * It does not contain input of output data\n * However anything that could be run as a \"program\"\n */\nexport interface Artifact {\n  programInfo: ProgramInfo;\n  program: WebGLProgram;\n  uniformLocations: UniformLocation[];\n  attribLocations: {position: number; textureCoord: number};\n}\nexport declare namespace Artifact {\n  type UniformLocations = Artifact['uniformLocations'];\n  type AttribLocations = Artifact['attribLocations'];\n}\n\nexport interface UniformData {\n  [name: string]: number|number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {assert} from '../../util';\n/**\n * Given a non RGBA shape calculate the R version\n * It is assumed that the dimensions are multiples of given channels\n * NOTE: it is always the last dim that gets packed.\n * @param unpackedShape original shape to create a packed version from\n */\nexport function getPackedShape(unpackedShape: readonly number[]): readonly number[] {\n  const len = unpackedShape.length;\n  return unpackedShape.slice(0, len - 1).concat(unpackedShape[len - 1] / 4);\n}\n\nexport async function repeatedTry(\n    checkFn: () => boolean, delayFn = (_counter: number) => 0, maxCounter?: number): Promise<void> {\n  return new Promise<void>((resolve, reject) => {\n    let tryCount = 0;\n\n    const tryFn = () => {\n      if (checkFn()) {\n        resolve();\n        return;\n      }\n\n      tryCount++;\n\n      const nextBackoff = delayFn(tryCount);\n\n      if (maxCounter != null && tryCount >= maxCounter) {\n        reject();\n        return;\n      }\n      setTimeout(tryFn, nextBackoff);\n    };\n\n    tryFn();\n  });\n}\n\n/**\n * Generates the function name from an input sampler name.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerName(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1);\n}\n\n/**\n * Generates the function name from an input sampler name at output coordinates.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1) + 'AtOutCoords';\n}\n\n/** Returns a new input shape (a copy) that has a squeezed logical shape. */\nexport function squeezeInputShape(inputShape: readonly number[], squeezedShape: number[]): number[] {\n  // Deep copy.\n  let newInputShape: number[] = JSON.parse(JSON.stringify(inputShape));\n  newInputShape = squeezedShape;\n  return newInputShape;\n}\n\n/** Returns a list of squeezed parameters for shader functions */\nexport function getSqueezedParams(params: string[], keptDims: number[]): string {\n  return keptDims.map(d => params[d]).join(', ');\n}\n\n/** Returns the data type for different ranks. */\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n\nexport function getGlChannels(rank = 6): string[] {\n  return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nimport {WebGLContext} from './webgl-context';\n\nconst cache: {[contextId: string]: WebGLContext} = {};\n\n/**\n * This factory function creates proper WebGLRenderingContext based on\n * the current browsers capabilities\n * The order is from higher/most recent versions to most basic\n */\nexport function createWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\n  let context: WebGLContext|undefined;\n  if ((!contextId || contextId === 'webgl2') && 'webgl2' in cache) {\n    context = cache.webgl2;\n  } else if ((!contextId || contextId === 'webgl') && 'webgl' in cache) {\n    context = cache.webgl;\n  }\n\n  context = context || createNewWebGLContext(contextId);\n  contextId = contextId || context.version === 1 ? 'webgl' : 'webgl2';\n  const gl = context.gl;\n\n  cache[contextId] = context;\n\n  if (gl.isContextLost()) {\n    delete cache[contextId];\n    return createWebGLContext(contextId);\n  }\n\n  gl.disable(gl.DEPTH_TEST);\n  gl.disable(gl.STENCIL_TEST);\n  gl.disable(gl.BLEND);\n  gl.disable(gl.DITHER);\n  gl.disable(gl.POLYGON_OFFSET_FILL);\n  gl.disable(gl.SAMPLE_COVERAGE);\n  gl.enable(gl.SCISSOR_TEST);\n  gl.enable(gl.CULL_FACE);\n  gl.cullFace(gl.BACK);\n\n  return context;\n}\n\nexport function createNewWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\n  const canvas = createCanvas();\n  const contextAttributes: WebGLContextAttributes = {\n    alpha: false,\n    depth: false,\n    antialias: false,\n    stencil: false,\n    preserveDrawingBuffer: false,\n    premultipliedAlpha: false,\n    failIfMajorPerformanceCaveat: false\n  };\n  let gl: WebGLRenderingContext|null;\n  const ca = contextAttributes;\n  if (!contextId || contextId === 'webgl2') {\n    gl = canvas.getContext('webgl2', ca);\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 2);\n      } catch (err) {\n        Logger.warning('GlContextFactory', `failed to create WebGLContext using contextId 'webgl2'. Error: ${err}`);\n      }\n    }\n  }\n  if (!contextId || contextId === 'webgl') {\n    gl = canvas.getContext('webgl', ca) || canvas.getContext('experimental-webgl', ca) as WebGLRenderingContext;\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 1);\n      } catch (err) {\n        Logger.warning(\n            'GlContextFactory',\n            `failed to create WebGLContext using contextId 'webgl' or 'experimental-webgl'. Error: ${err}`);\n      }\n    }\n  }\n\n  throw new Error('WebGL is not supported');\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\ndeclare let OffscreenCanvas: {new (width: number, height: number): HTMLCanvasElement};\n\nfunction createCanvas(): HTMLCanvasElement {\n  if (typeof document === 'undefined') {\n    if (typeof OffscreenCanvas === 'undefined') {\n      throw new TypeError('failed to create canvas: OffscreenCanvas is not supported');\n    }\n    return new OffscreenCanvas(1, 1);\n  }\n  const canvas: HTMLCanvasElement = document.createElement('canvas');\n  canvas.width = 1;\n  canvas.height = 1;\n  return canvas;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport * as DataEncoders from './texture-data-encoder';\nimport {DataEncoder, Encoder} from './texture-data-encoder';\nimport {repeatedTry} from './utils';\n\nexport interface FenceContext {\n  query: WebGLSync|null;\n  isFencePassed(): boolean;\n}\n\ntype PollItem = {\n  isDoneFn: () => boolean; resolveFn: () => void;\n};\n\nexport function linearSearchLastTrue(arr: Array<() => boolean>): number {\n  let i = 0;\n  for (; i < arr.length; ++i) {\n    const isDone = arr[i]();\n    if (!isDone) {\n      break;\n    }\n  }\n  return i - 1;\n}\n\n/**\n * Abstraction and wrapper around WebGLRenderingContext and its operations\n */\nexport class WebGLContext {\n  gl: WebGLRenderingContext;\n  version: 1|2;\n\n  private vertexbuffer: WebGLBuffer;\n  private framebuffer: WebGLFramebuffer;\n\n  // WebGL flags and vital parameters\n  private isFloatTextureAttachableToFrameBuffer: boolean;\n  isFloat32DownloadSupported: boolean;\n  isRenderFloat32Supported: boolean;\n  isBlendSupported: boolean;\n  maxTextureSize: number;\n  // private maxCombinedTextureImageUnits: number;\n  private maxTextureImageUnits: number;\n  // private maxCubeMapTextureSize: number;\n  // private shadingLanguageVersion: string;\n  // private webglVendor: string;\n  // private webglVersion: string;\n\n  // WebGL2 flags and vital parameters\n  // private max3DTextureSize: number;\n  // private maxArrayTextureLayers: number;\n  // private maxColorAttachments: number;\n  // private maxDrawBuffers: number;\n\n  // WebGL extensions\n  // eslint-disable-next-line camelcase\n  textureFloatExtension: OES_texture_float|null;\n  // eslint-disable-next-line camelcase\n  textureHalfFloatExtension: OES_texture_half_float|null;\n\n  // WebGL2 extensions\n  colorBufferFloatExtension: unknown|null;\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  disjointTimerQueryWebgl2Extension: {TIME_ELAPSED_EXT: GLenum; GPU_DISJOINT_EXT: GLenum}|null;\n\n  private disposed: boolean;\n  private frameBufferBound = false;\n\n  constructor(gl: WebGLRenderingContext, version: 1|2) {\n    this.gl = gl;\n    this.version = version;\n\n    this.getExtensions();\n    this.vertexbuffer = this.createVertexbuffer();\n    this.framebuffer = this.createFramebuffer();\n    this.queryVitalParameters();\n  }\n\n  allocateTexture(width: number, height: number, encoder: DataEncoder, data?: Encoder.DataArrayType): WebGLTexture {\n    const gl = this.gl;\n    // create the texture\n    const texture = gl.createTexture();\n    // bind the texture so the following methods effect this texture.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    const buffer = data ? encoder.encode(data, width * height) : null;\n    gl.texImage2D(\n        gl.TEXTURE_2D,\n        0,  // Level of detail.\n        encoder.internalFormat, width, height,\n        0,  // Always 0 in OpenGL ES.\n        encoder.format, encoder.textureType, buffer);\n    this.checkError();\n    return texture as WebGLTexture;\n  }\n  updateTexture(\n      texture: WebGLTexture, width: number, height: number, encoder: DataEncoder, data: Encoder.DataArrayType): void {\n    const gl = this.gl;\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    const buffer = encoder.encode(data, width * height);\n    gl.texSubImage2D(\n        gl.TEXTURE_2D,\n        0,  // level\n        0,  // xoffset\n        0,  // yoffset\n        width, height, encoder.format, encoder.textureType, buffer);\n    this.checkError();\n  }\n  attachFramebuffer(texture: WebGLTexture, width: number, height: number): void {\n    const gl = this.gl;\n    // Make it the target for framebuffer operations - including rendering.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    this.checkError();\n    gl.viewport(0, 0, width, height);\n    gl.scissor(0, 0, width, height);\n  }\n  readTexture(\n      texture: WebGLTexture, width: number, height: number, dataSize: number, dataType: Encoder.DataType,\n      channels: number): Encoder.DataArrayType {\n    const gl = this.gl;\n    if (!channels) {\n      channels = 1;\n    }\n    if (!this.frameBufferBound) {\n      this.attachFramebuffer(texture, width, height);\n    }\n    const encoder = this.getEncoder(dataType, channels);\n    const buffer = encoder.allocate(width * height);\n    // bind texture to framebuffer\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    // TODO: Check if framebuffer is ready\n    gl.readPixels(0, 0, width, height, gl.RGBA, encoder.textureType, buffer);\n    this.checkError();\n    // unbind FB\n    return encoder.decode(buffer, dataSize);\n  }\n\n  isFramebufferReady(): boolean {\n    // TODO: Implement logic to check if the framebuffer is ready\n    return true;\n  }\n  getActiveTexture(): string {\n    const gl = this.gl;\n    const n = gl.getParameter(this.gl.ACTIVE_TEXTURE);\n    return `TEXTURE${(n - gl.TEXTURE0)}`;\n  }\n  getTextureBinding(): WebGLTexture {\n    return this.gl.getParameter(this.gl.TEXTURE_BINDING_2D);\n  }\n  getFramebufferBinding(): WebGLFramebuffer {\n    return this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING);\n  }\n  setVertexAttributes(positionHandle: number, textureCoordHandle: number): void {\n    const gl = this.gl;\n    gl.vertexAttribPointer(positionHandle, 3, gl.FLOAT, false, 20, 0);\n    gl.enableVertexAttribArray(positionHandle);\n    if (textureCoordHandle !== -1) {\n      gl.vertexAttribPointer(textureCoordHandle, 2, gl.FLOAT, false, 20, 12);\n      gl.enableVertexAttribArray(textureCoordHandle);\n    }\n    this.checkError();\n  }\n  createProgram(\n      vertexShader: WebGLShader,\n      fragShader: WebGLShader,\n      ): WebGLProgram {\n    const gl = this.gl;\n    const program = gl.createProgram()!;\n\n    // the program consists of our shaders\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragShader);\n    gl.linkProgram(program);\n    return program;\n  }\n  compileShader(shaderSource: string, shaderType: number): WebGLShader {\n    const gl = this.gl;\n    const shader = gl.createShader(shaderType);\n    if (!shader) {\n      throw new Error(`createShader() returned null with type ${shaderType}`);\n    }\n\n    gl.shaderSource(shader, shaderSource);\n    gl.compileShader(shader);\n    if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false) {\n      throw new Error(`Failed to compile shader: ${gl.getShaderInfoLog(shader)}\nShader source:\n${shaderSource}`);\n    }\n    return shader;\n  }\n  deleteShader(shader: WebGLShader): void {\n    this.gl.deleteShader(shader);\n  }\n  bindTextureToUniform(texture: WebGLTexture, position: number, uniformHandle: WebGLUniformLocation): void {\n    const gl = this.gl;\n    gl.activeTexture(gl.TEXTURE0 + position);\n    this.checkError();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    this.checkError();\n    gl.uniform1i(uniformHandle, position);\n    this.checkError();\n  }\n  draw(): void {\n    this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);\n    this.checkError();\n  }\n  checkError(): void {\n    if (env.debug) {\n      const gl = this.gl;\n      const error = gl.getError();\n      let label = '';\n      switch (error) {\n        case (gl.NO_ERROR):\n          return;\n        case (gl.INVALID_ENUM):\n          label = 'INVALID_ENUM';\n          break;\n        case (gl.INVALID_VALUE):\n          label = 'INVALID_VALUE';\n          break;\n        case (gl.INVALID_OPERATION):\n          label = 'INVALID_OPERATION';\n          break;\n        case (gl.INVALID_FRAMEBUFFER_OPERATION):\n          label = 'INVALID_FRAMEBUFFER_OPERATION';\n          break;\n        case (gl.OUT_OF_MEMORY):\n          label = 'OUT_OF_MEMORY';\n          break;\n        case (gl.CONTEXT_LOST_WEBGL):\n          label = 'CONTEXT_LOST_WEBGL';\n          break;\n        default:\n          label = `Unknown WebGL Error: ${error.toString(16)}`;\n      }\n      throw new Error(label);\n    }\n  }\n  deleteTexture(texture: WebGLTexture): void {\n    this.gl.deleteTexture(texture);\n  }\n  deleteProgram(program: WebGLProgram): void {\n    this.gl.deleteProgram(program);\n  }\n  getEncoder(dataType: Encoder.DataType, channels: number, usage: Encoder.Usage = Encoder.Usage.Default): DataEncoder {\n    if (this.version === 2) {\n      return new DataEncoders.RedFloat32DataEncoder(this.gl as WebGL2RenderingContext, channels);\n    }\n\n    switch (dataType) {\n      case 'float':\n        if (usage === Encoder.Usage.UploadOnly || this.isRenderFloat32Supported) {\n          return new DataEncoders.RGBAFloatDataEncoder(this.gl, channels);\n        } else {\n          return new DataEncoders.RGBAFloatDataEncoder(\n              this.gl, channels, this.textureHalfFloatExtension!.HALF_FLOAT_OES);\n        }\n      case 'int':\n        throw new Error('not implemented');\n      case 'byte':\n        return new DataEncoders.Uint8DataEncoder(this.gl, channels);\n      default:\n        throw new Error(`Invalid dataType: ${dataType}`);\n    }\n  }\n  clearActiveTextures(): void {\n    const gl = this.gl;\n    for (let unit = 0; unit < this.maxTextureImageUnits; ++unit) {\n      gl.activeTexture(gl.TEXTURE0 + unit);\n      gl.bindTexture(gl.TEXTURE_2D, null);\n    }\n  }\n  dispose(): void {\n    if (this.disposed) {\n      return;\n    }\n    const gl = this.gl;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteFramebuffer(this.framebuffer);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    gl.deleteBuffer(this.vertexbuffer);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n    gl.finish();\n    this.disposed = true;\n  }\n\n  private createDefaultGeometry(): Float32Array {\n    // Sets of x,y,z(=0),s,t coordinates.\n    return new Float32Array([\n      -1.0, 1.0,  0.0, 0.0, 1.0,  // upper left\n      -1.0, -1.0, 0.0, 0.0, 0.0,  // lower left\n      1.0,  1.0,  0.0, 1.0, 1.0,  // upper right\n      1.0,  -1.0, 0.0, 1.0, 0.0   // lower right\n    ]);\n  }\n  private createVertexbuffer(): WebGLBuffer {\n    const gl = this.gl;\n    const buffer = gl.createBuffer();\n    if (!buffer) {\n      throw new Error('createBuffer() returned null');\n    }\n    const geometry = this.createDefaultGeometry();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, geometry, gl.STATIC_DRAW);\n    this.checkError();\n    return buffer;\n  }\n  private createFramebuffer(): WebGLFramebuffer {\n    const fb = this.gl.createFramebuffer();\n    if (!fb) {\n      throw new Error('createFramebuffer returned null');\n    }\n    return fb;\n  }\n\n  private queryVitalParameters(): void {\n    const gl = this.gl;\n\n    this.isFloatTextureAttachableToFrameBuffer = this.checkFloatTextureAttachableToFrameBuffer();\n    this.isRenderFloat32Supported = this.checkRenderFloat32();\n    this.isFloat32DownloadSupported = this.checkFloat32Download();\n\n    if (this.version === 1 && !this.textureHalfFloatExtension && !this.isRenderFloat32Supported) {\n      throw new Error('both float32 and float16 TextureType are not supported');\n    }\n\n    this.isBlendSupported = !this.isRenderFloat32Supported || this.checkFloat32Blend();\n\n    // this.maxCombinedTextureImageUnits = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n    this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    this.maxTextureImageUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n    // this.maxCubeMapTextureSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n    // this.shadingLanguageVersion = gl.getParameter(gl.SHADING_LANGUAGE_VERSION);\n    // this.webglVendor = gl.getParameter(gl.VENDOR);\n    // this.webglVersion = gl.getParameter(gl.VERSION);\n\n    if (this.version === 2) {\n      // this.max3DTextureSize = gl.getParameter(WebGL2RenderingContext.MAX_3D_TEXTURE_SIZE);\n      // this.maxArrayTextureLayers = gl.getParameter(WebGL2RenderingContext.MAX_ARRAY_TEXTURE_LAYERS);\n      // this.maxColorAttachments = gl.getParameter(WebGL2RenderingContext.MAX_COLOR_ATTACHMENTS);\n      // this.maxDrawBuffers = gl.getParameter(WebGL2RenderingContext.MAX_DRAW_BUFFERS);\n    }\n  }\n  private getExtensions(): void {\n    if (this.version === 2) {\n      this.colorBufferFloatExtension = this.gl.getExtension('EXT_color_buffer_float');\n      this.disjointTimerQueryWebgl2Extension = this.gl.getExtension('EXT_disjoint_timer_query_webgl2');\n    } else {\n      this.textureFloatExtension = this.gl.getExtension('OES_texture_float');\n      this.textureHalfFloatExtension = this.gl.getExtension('OES_texture_half_float');\n    }\n  }\n\n  private checkFloatTextureAttachableToFrameBuffer(): boolean {\n    // test whether Float32 texture is supported:\n    // STEP.1 create a float texture\n    const gl = this.gl;\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n    // STEP.2 bind a frame buffer\n    const frameBuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    // STEP.3 attach texture to framebuffer\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    // STEP.4 test whether framebuffer is complete\n    const isComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteTexture(texture);\n    gl.deleteFramebuffer(frameBuffer);\n    return isComplete;\n  }\n\n  private checkRenderFloat32(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  private checkFloat32Download(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n      if (!this.gl.getExtension('WEBGL_color_buffer_float')) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  /**\n   * Check whether GL_BLEND is supported\n   */\n  private checkFloat32Blend(): boolean {\n    // it looks like currently (2019-05-08) there is no easy way to detect whether BLEND is supported\n    // https://github.com/microsoft/onnxjs/issues/145\n\n    const gl = this.gl;\n\n    let texture: WebGLTexture|null|undefined;\n    let frameBuffer: WebGLFramebuffer|null|undefined;\n    let vertexShader: WebGLShader|null|undefined;\n    let fragmentShader: WebGLShader|null|undefined;\n    let program: WebGLProgram|null|undefined;\n\n    try {\n      texture = gl.createTexture();\n      frameBuffer = gl.createFramebuffer();\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n\n      gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n      gl.enable(gl.BLEND);\n\n      vertexShader = gl.createShader(gl.VERTEX_SHADER);\n      if (!vertexShader) {\n        return false;\n      }\n      gl.shaderSource(vertexShader, 'void main(){}');\n      gl.compileShader(vertexShader);\n\n      fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n      if (!fragmentShader) {\n        return false;\n      }\n      gl.shaderSource(fragmentShader, 'precision highp float;void main(){gl_FragColor=vec4(0.5);}');\n      gl.compileShader(fragmentShader);\n\n      program = gl.createProgram();\n      if (!program) {\n        return false;\n      }\n      gl.attachShader(program, vertexShader);\n      gl.attachShader(program, fragmentShader);\n      gl.linkProgram(program);\n      gl.useProgram(program);\n\n      gl.drawArrays(gl.POINTS, 0, 1);\n      return gl.getError() === gl.NO_ERROR;\n\n    } finally {\n      gl.disable(gl.BLEND);\n\n      if (program) {\n        gl.deleteProgram(program);\n      }\n      if (vertexShader) {\n        gl.deleteShader(vertexShader);\n      }\n      if (fragmentShader) {\n        gl.deleteShader(fragmentShader);\n      }\n      if (frameBuffer) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.deleteFramebuffer(frameBuffer);\n      }\n      if (texture) {\n        gl.bindTexture(gl.TEXTURE_2D, null);\n        gl.deleteTexture(texture);\n      }\n    }\n  }\n\n  beginTimer(): WebGLQuery {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      const query = gl2.createQuery() as WebGLQuery;\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported.');\n    }\n  }\n\n  endTimer() {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n  }\n\n  isTimerResultAvailable(query: WebGLQuery): boolean {\n    let available = false, disjoint = false;\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n      disjoint = gl2.getParameter(ext.GPU_DISJOINT_EXT);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n\n    return available && !disjoint;\n  }\n\n  getTimerResult(query: WebGLQuery): number {\n    let timeElapsed = 0;\n    if (this.version === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      timeElapsed = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n      gl2.deleteQuery(query);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n    // return miliseconds\n    return timeElapsed / 1000000;\n  }\n\n  async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\n    await repeatedTry(() => this.isTimerResultAvailable(query));\n    return this.getTimerResult(query);\n  }\n\n  public async createAndWaitForFence(): Promise<void> {\n    const fenceContext = this.createFence(this.gl);\n    return this.pollFence(fenceContext);\n  }\n\n  private createFence(gl: WebGLRenderingContext): FenceContext {\n    let isFencePassed: () => boolean;\n    const gl2 = gl as WebGL2RenderingContext;\n    const query = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n    gl.flush();\n    if (query === null) {\n      isFencePassed = () => true;\n    } else {\n      isFencePassed = () => {\n        const status = gl2.clientWaitSync(query, 0, 0);\n        return status === gl2.ALREADY_SIGNALED || status === gl2.CONDITION_SATISFIED;\n      };\n    }\n    return {query, isFencePassed};\n  }\n\n  async pollFence(fenceContext: FenceContext) {\n    return new Promise<void>(resolve => {\n      void this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n    });\n  }\n\n  private itemsToPoll: PollItem[] = [];\n\n  pollItems(): void {\n    // Find the last query that has finished.\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n    for (let i = 0; i <= index; ++i) {\n      const {resolveFn} = this.itemsToPoll[i];\n      resolveFn();\n    }\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n  }\n\n  private async addItemToPoll(isDoneFn: () => boolean, resolveFn: () => void) {\n    this.itemsToPoll.push({isDoneFn, resolveFn});\n    if (this.itemsToPoll.length > 1) {\n      // We already have a running loop that polls.\n      return;\n    }\n    // Start a new loop that polls.\n    await repeatedTry(() => {\n      this.pollItems();\n      // End the loop if no more items to poll.\n      return this.itemsToPoll.length === 0;\n    });\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from './backend';\nimport {Graph} from './graph';\nimport {Logger, Profiler} from './instrument';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nclass KernelOp {\n  constructor(public op: Operator, public node: Graph.Node) {}\n}\n\nexport class ExecutionPlan {\n  constructor(private graph: Graph, ops: Operator[], private profiler: Readonly<Profiler>) {\n    this.initialize(ops);\n  }\n\n  initialize(ops: Operator[]) {\n    this.profiler.event('session', 'ExecutionPlan.initialize', () => {\n      const graphNodes = this.graph.getNodes();\n      if (graphNodes.length !== ops.length) {\n        throw new Error('The size of nodes and OPs do not match.');\n      }\n\n      this._ops = ops.map((op, i) => new KernelOp(op, graphNodes[i]));\n      this.reset();\n\n      // look for starter node(s)\n      this._starter = [];\n      this._ops.forEach((op, i) => {\n        let resolved = true;\n        for (const input of op.node.inputs) {\n          if (\n              !this._values[input]                                   // not an initialized input\n              && this.graph.getInputIndices().indexOf(input) === -1  // not model input\n          ) {\n            resolved = false;\n            break;\n          }\n        }\n        if (resolved) {\n          this._starter.push(i);\n        }\n      });\n    });\n  }\n\n  reset() {\n    this._values = this.graph.getValues().map(i => i.tensor);\n  }\n\n  async execute(sessionHandler: SessionHandler, modelInputs: Tensor[]): Promise<Tensor[]> {\n    return this.profiler.event('session', 'ExecutionPlan.execute', async () => {\n      // reset mediem result\n      this.reset();\n\n      // create inference handler\n      const inferenceHandler = sessionHandler.createInferenceHandler();\n\n      // populate inputs value\n      const graphInputs = this.graph.getInputIndices();\n      if (modelInputs.length !== graphInputs.length) {\n        throw new Error(`number of input tensors don't match the number of inputs to the model: actual: ${\n            modelInputs.length} expected: ${graphInputs.length}`);\n      }\n\n      modelInputs.forEach((input, i) => {\n        const index = graphInputs[i];\n        this._values[index] = input;\n      });\n\n      // prepare running sequence\n      const sequence: number[] = this._starter.slice(0);\n\n      // execution iterations\n      const graphValues = this.graph.getValues();\n      const graphNodes = this.graph.getNodes();\n\n      let rear = 0;\n      while (rear < sequence.length) {\n        const thisOpIndex = sequence[rear++];\n        const thisOp = this._ops[thisOpIndex];\n\n        // check input\n        const inputList = thisOp.node.inputs.map(i => this._values[i]);\n        if (inputList.indexOf(undefined) !== -1) {\n          throw new Error(`unresolved input detected: op: ${thisOp.node}`);\n        }\n\n        // run\n        const inputTensors = inputList as Tensor[];\n        Logger.verbose(\n            'ExecPlan',\n            `Runing op:${thisOp.node.name} (${\n                inputTensors.map((t, i) => `'${thisOp.node.inputs[i]}': ${t.type}[${t.dims.join(',')}]`).join(', ')})`);\n\n        const outputList = await this.profiler.event(\n            'node', thisOp.node.name, async () => thisOp.op.impl(inferenceHandler, inputTensors, thisOp.op.context));\n\n        // check output\n        if (outputList.length !== thisOp.node.outputs.length) {\n          throw new Error('the size of output does not match model definition.');\n        }\n\n        // fill value\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          if (this._values[j]) {\n            throw new Error(`output [${j}] already has value: op:${thisOp.node.name}`);\n          }\n          this._values[j] = output;\n        });\n\n        // resolve downstream nodes\n        const downstreamNodes = new Set<number>();\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          for (const currentDownstreamNodeIndex of graphValues[j].to) {\n            const currentDownstreamNode = graphNodes[currentDownstreamNodeIndex];\n            let resolved = true;\n            for (const k of currentDownstreamNode.inputs) {\n              if (!this._values[k]) {\n                resolved = false;\n                break;\n              }\n            }\n            if (resolved) {\n              downstreamNodes.add(currentDownstreamNodeIndex);\n            }\n          }\n        });\n        sequence.push(...downstreamNodes);\n      }\n\n      const output: Tensor[] = [];\n      for (let i = 0; i < this.graph.getOutputIndices().length; i++) {\n        const outputIndex = this.graph.getOutputIndices()[i];\n        const outputTensor = this._values[outputIndex];\n        if (outputTensor === undefined) {\n          throw new Error(`required output [${outputIndex}] does not have value`);\n        }\n        if (outputIndex === 0) {\n          await outputTensor.getData();\n        } else {\n          // eslint-disable-next-line no-unused-expressions\n          outputTensor.data;\n        }\n        output.push(outputTensor);\n      }\n      Logger.verbose('ExecPlan', 'disposing of inferenceHandler');\n      inferenceHandler.dispose();\n      return output;\n    });\n  }\n\n  _values: Array<Tensor|undefined>;\n  _ops: KernelOp[];\n  _starter: number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {onnx} from 'onnx-proto';\n\nimport {Attribute} from './attribute';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {Tensor} from './tensor';\nimport {LongUtil, MAX_CLIP, MIN_CLIP, ProtoUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Graph {\n  export interface Shape {\n    readonly dims: readonly number[];\n  }\n  export interface ValueType {\n    readonly tensorType: Tensor.DataType;\n    readonly shape: Shape;\n  }\n  export interface Value {\n    // the tensor data. empty for non-initialized inputs\n    readonly tensor?: Tensor;\n\n    // index to the Node where the value comes from. -1 for initializer.\n    readonly from: number;\n\n    // indices to the Nodes where the values go to.\n    readonly to: readonly number[];\n\n    // value type specification. empty for non-input values.\n    readonly type?: ValueType;\n  }\n  export interface Node {\n    // name of the node\n    readonly name: string;\n\n    // the operator type\n    readonly opType: string;\n\n    // indices to the Values where the inputs come from.\n    readonly inputs: readonly number[];\n\n    // indices to the Values where the outpus go to.\n    readonly outputs: readonly number[];\n\n    // the attributes that used by the operator\n    readonly attributes: Attribute;\n  }\n\n  /**\n   * a Transformer is an instance that allows all possible transformation operations that applied to a graph\n   */\n  export interface Transformer {\n    removeAllIdentityNodes(): void;\n    removeAllDropoutNodes(): void;\n    fuseConvActivationNodes(): void;\n    // TODO: add generic functions to manipulate the graph\n  }\n\n  // an initializer can use transformer to transform the graph\n  export interface Initializer {\n    transformGraph(transformer: Transformer): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Graph {\n  getInputIndices(): readonly number[];\n  getInputNames(): readonly string[];\n  getOutputIndices(): readonly number[];\n  getOutputNames(): readonly string[];\n  getValues(): readonly Graph.Value[];\n  getNodes(): readonly Graph.Node[];\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-redeclare\nexport const Graph = {\n  /**\n   * construct a graph from a graph protobuf type\n   */\n  from: (graphProto: onnx.IGraphProto|ortFbs.Graph, initializer?: Graph.Initializer) =>\n      new GraphImpl(graphProto, initializer),\n};\n\nclass Value implements Graph.Value {\n  constructor(valueInfo?: onnx.IValueInfoProto) {\n    this._from = undefined;\n    this._to = [];\n    this.tensor = undefined;\n    this.type = undefined;\n\n    if (valueInfo) {\n      this.type = ProtoUtil.tensorValueTypeFromProto(valueInfo.type!.tensorType!);\n    }\n  }\n\n  _from?: number;  // -1 represent from initializer\n  get from() {\n    return this._from!;\n  }\n  _to: number[];\n  get to() {\n    return this._to;\n  }\n  type?: Graph.ValueType;\n  tensor?: Tensor;\n}\n\nclass Node implements Graph.Node {\n  constructor(_nodeProto: onnx.INodeProto|ortFbs.Node, name?: string) {\n    if (_nodeProto instanceof onnx.NodeProto) {\n      this.name = _nodeProto.name;\n      this.opType = _nodeProto.opType;\n      this.attributes = new Attribute(_nodeProto.attribute);\n    } else if (_nodeProto instanceof ortFbs.Node) {\n      this.name = name ?? _nodeProto.name()!;\n      this.opType = _nodeProto.opType()!;\n      this.attributes = new Attribute(ProtoUtil.tensorAttributesFromORTFormat(_nodeProto));\n    }\n\n    this.inputs = [];\n    this.outputs = [];\n    this.executeNode = true;\n  }\n\n  name: string;\n  opType: string;\n  inputs: number[];\n  outputs: number[];\n  attributes: Attribute;\n  executeNode: boolean;\n}\n\nclass GraphImpl implements Graph, Graph.Transformer {\n  private _allData: Value[];\n\n  private _allInputIndices: number[];\n  private _allInputNames: string[];\n\n  private _allOutputIndices: number[];\n  private _allOutputNames: string[];\n\n  private _nodes: Node[];\n\n  constructor(graph: onnx.IGraphProto|ortFbs.Graph, graphInitializer?: Graph.Initializer) {\n    if (!graph) {\n      throw new TypeError('graph is empty');\n    }\n\n    // build the graph - will throw exceptions if something fatal is detected\n    this.buildGraph(graph);\n\n    // execute any transformation logic for the graph (if applicable)\n    this.transformGraph(graphInitializer);\n\n    // check for cycles and other inconsistencies - will throw exceptions if something fatal is detected\n    this.checkIsAcyclic();\n  }\n\n  getInputIndices(): readonly number[] {\n    return this._allInputIndices;\n  }\n\n  getInputNames(): readonly string[] {\n    return this._allInputNames;\n  }\n\n  getOutputIndices(): readonly number[] {\n    return this._allOutputIndices;\n  }\n\n  getOutputNames(): readonly string[] {\n    return this._allOutputNames;\n  }\n\n  getValues(): readonly Graph.Value[] {\n    return this._allData;\n  }\n\n  getNodes(): readonly Graph.Node[] {\n    return this._nodes;\n  }\n\n  private buildGraph(graph: onnx.IGraphProto|ortFbs.Graph) {\n    // build the graph - will throw exceptions if something fatal is detected\n    if (graph instanceof onnx.GraphProto) {\n      this.buildGraphFromOnnxFormat(graph);\n    } else if (graph instanceof ortFbs.Graph) {\n      this.buildGraphFromOrtFormat(graph);\n    } else {\n      throw new TypeError('Graph type is not supported.');\n    }\n  }\n  private buildGraphFromOnnxFormat(graph: onnx.IGraphProto) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    if (!graph.input) {\n      throw new Error('missing information in graph: input');\n    }\n    const inputValueNames = [];\n    for (const i of graph.input) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated input name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      inputValueNames.push(i.name!);\n    }\n\n    // scan all initializers\n    if (!graph.initializer) {\n      throw new Error('missing information in graph: initializer');\n    }\n    for (const i of graph.initializer) {\n      let index = dataIndices.get(i.name!);\n      if (index === undefined) {\n        const value = new Value();\n        value.type = {\n          shape: {dims: ProtoUtil.tensorDimsFromProto(i.dims!)},\n          tensorType: ProtoUtil.tensorDataTypeFromProto(i.dataType!)\n        };\n        index = this._allData.push(value) - 1;\n        dataIndices.set(i.name!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromProto(i);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    if (!graph.output) {\n      throw new Error('missing information in graph: output');\n    }\n    for (const i of graph.output) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated output name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(i.name!);\n    }\n\n    // scan all nodes\n    if (!graph.node) {\n      throw new Error('missing information in graph: node');\n    }\n    for (const nodeProto of graph.node) {\n      if (!nodeProto.name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          const name = `unnamed_${nodeProto.opType}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            nodeProto.name = name;\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(nodeProto.name)) {\n        throw new Error(`duplicated node name: ${nodeProto.name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto)) - 1;\n      nodesIndices.set(nodeProto.name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n      if (!nodeProto.output) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (const output of nodeProto.output) {\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType === 'Constant') {\n          if (!nodeProto.attribute || nodeProto.attribute.length !== 1 || !nodeProto.attribute[0].t) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (!nodeProto.output || nodeProto.output.length !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromProto(nodeProto.attribute[0].t);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n\n      if (!nodeProto.input) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (const input of nodeProto.input) {\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          // handle exception when opset > 9 and roi not given\n          if (input === '' && nodeProto.input.length === 3 && nodeProto.opType === 'Resize') {\n            continue;\n          }\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto.name}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n\n    return true;\n  }\n\n  private buildGraphFromOrtFormat(graph: ortFbs.Graph) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    const inputValueNames = [];\n    for (let i = 0; i < graph.inputsLength(); i++) {\n      const inputName = graph.inputs(i);\n      if (dataIndices.has(inputName)) {\n        throw new Error(`duplicated input name: ${inputName}`);\n      }\n      // Find the input typeInfo from nodeargs\n      for (let j = 0; j < graph.nodeArgsLength(); j++) {\n        if (graph.nodeArgs(j)?.name() === inputName) {\n          const value = new Value();\n          const valueType = graph.nodeArgs(j)?.type()?.valueType();\n          if (valueType !== ortFbs.TypeInfoValue.tensor_type) {\n            throw new Error('Unexpected value type for the nodeArg.');\n          }\n          const valueInfo = graph.nodeArgs(j)!.type()!.value(new ortFbs.TensorTypeAndShape())!;\n          const type = ProtoUtil.tensorDataTypeFromProto(valueInfo.elemType());\n          const shape = valueInfo.shape()!;\n          const dims = [];\n          for (let k = 0; k < shape.dimLength()!; k++) {\n            dims.push(LongUtil.longToNumber(shape.dim(k)!.value()!.dimValue()!));\n          }\n          value.type = {shape: {dims}, tensorType: type};\n          const currentIndex = this._allData.push(value) - 1;\n          dataIndices.set(inputName, currentIndex);\n          inputValueNames.push(inputName);\n        }\n      }\n    }\n    // check initializers\n    for (let i = 0; i < graph.initializersLength(); i++) {\n      const initializer = graph.initializers(i)!;\n      let index = dataIndices.get(initializer.name()!);\n      if (index === undefined) {\n        const value = new Value();\n        const dims = ProtoUtil.tensorDimsFromORTFormat(initializer);\n        const type = ProtoUtil.tensorDataTypeFromProto(initializer.dataType());\n        value.type = {shape: {dims}, tensorType: type};\n        index = this._allData.push(value) - 1;\n        dataIndices.set(initializer.name()!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromOrtTensor(initializer);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    for (let i = 0; i < graph.outputsLength(); i++) {\n      const outputName = graph.outputs(i);\n      if (dataIndices.has(outputName)) {\n        throw new Error(`duplicated output name: ${outputName}`);\n      }\n      const currentIndex = this._allData.push(new Value()) - 1;\n      dataIndices.set(outputName, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(outputName);\n    }\n\n    // scan all nodes\n    if (!graph.nodes) {\n      throw new Error('missing information in graph: node');\n    }\n    for (let i = 0; i < graph.nodesLength(); i++) {\n      const nodeProto = graph.nodes(i);\n      let name = nodeProto!.name();\n      if (!name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          name = `unnamed_${nodeProto!.opType()}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            // an unique name is found. break.\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(name)) {\n        throw new Error(`duplicated node name: ${name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto!, name)) - 1;\n      nodesIndices.set(name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i);\n      if (nodeProto == null) {\n        throw new Error(`No node exists at index ${i}`);\n      }\n      if (nodeProto?.outputsLength() === 0) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto?.outputsLength(); j++) {\n        const output = nodeProto?.outputs(j);\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType() === 'Constant') {\n          if (nodeProto.attributesLength() !== 1 || !nodeProto.attributes(0)!.t()) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (nodeProto.outputsLength() !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromOrtTensor(nodeProto.attributes(0)!.t()!);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i)!;\n\n      if (nodeProto.inputsLength() === 0) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto.inputsLength()!; j++) {\n        const input = nodeProto.inputs(j)!;\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto!.name()}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n  }\n\n  private checkIsAcyclic() {\n    // go through the graph and check for cycles or other fatal inconsistencies\n    const starters: Set<number> = new Set<number>();\n    this._allInputIndices.forEach(i => {\n      const data = this._allData[i];\n      data._to.forEach(j => {\n        starters.add(j);\n      });\n    });\n\n    // Iterative DFS to check for cycles\n    const nodesStack = Array.from(starters);\n    const nodesState = new Array<string>(this._nodes.length).fill('white');\n\n    while (nodesStack.length > 0) {\n      const nodeIndex = nodesStack.pop()!;\n      // this node has now been processed completely. Mark this node 'black' to denote this.\n      if (nodesState[nodeIndex] === 'gray') {\n        nodesState[nodeIndex] = 'black';\n      } else {\n        // this node is under processing stage. mark this node 'gray' to denote this.\n        nodesStack.push(nodeIndex);\n        nodesState[nodeIndex] = 'gray';\n\n        this._nodes[nodeIndex].outputs.forEach((outgoingEdgeIndex) => {\n          const data = this._allData[outgoingEdgeIndex];\n          if (typeof data.tensor !== 'undefined') {\n            throw new Error('node outputs should not be initialized');\n          }\n          if (data._from !== nodeIndex) {\n            throw new Error('from property of the Value object doesn\\'t match index of Node being processed');\n          }\n          data._to.forEach((downstreamNodeIndex) => {\n            // back edge found - cyclic\n            if (nodesState[downstreamNodeIndex] === 'gray') {\n              throw new Error('model graph is cyclic');\n            }\n            // tree edge found - continue processing by adding it to stack\n            else if (nodesState[downstreamNodeIndex] === 'white') {\n              nodesStack.push(downstreamNodeIndex);\n            }\n          });\n        });\n      }\n    }\n  }\n\n  private transformGraph(graphInitializer?: Graph.Initializer): void {\n    // apply common transform\n    this.removeAllIdentityNodes();\n    this.removeAllDropoutNodes();\n    this.fuseConvActivationNodes();\n    // apply initializer specific transform\n    if (graphInitializer) {\n      graphInitializer.transformGraph(this);\n    }\n\n    // finalize graph\n    this.finalizeGraph();\n  }\n\n  /**\n   * finalize the graph.\n   *\n   * this function should be called after all the transformation completed.\n   * this function removes all unnecessary nodes and values from the graph\n   */\n  finalizeGraph() {\n    let offset = 0;\n    // delete all nodes that are not being executed\n    for (let i = 0; i < this._nodes.length; i++) {\n      if (!this._nodes[i].executeNode) {\n        // delete this node and shift all subsequent nodes up\n        offset++;\n        // delete all output values\n        this._nodes[i].outputs.forEach(ind => {\n          this._allData[ind]._from = -2;\n        });\n        this._nodes.splice(i, 1);\n        i--;\n        continue;\n      }\n      if (offset > 0) {\n        // update the value table\n        this._nodes[i].inputs.forEach(value => {\n          const ind = this._allData[value]._to.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allData[value]._to[ind] = i;\n          }\n        });\n        this._nodes[i].outputs.forEach(value => {\n          if (this._allData[value]._from && this._allData[value]._from! === i + offset) {\n            this._allData[value]._from! = i;\n          }\n        });\n      }\n    }\n    offset = 0;\n    // delete all values that are not being referenced\n    for (let i = 0; i < this._allData.length; i++) {\n      // if current value is neither linked to next node, nor an output value, remove it.\n      if (this._allData[i].from === -2 && this._allOutputIndices.indexOf(i + offset) === -1) {\n        offset++;\n        this._allData.splice(i, 1);\n        i--;\n        continue;\n      }\n      if (offset > 0) {\n        let ind = -1;\n        // if current value is neither an input value nor an initializer, find the node it's\n        // coming from and update the corresponding node output\n        if (this._allData[i].from !== undefined && this._allData[i].from !== -1) {\n          ind = this._nodes[this._allData[i].from].outputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[this._allData[i].from].outputs[ind] = i;\n          }\n        } else {\n          // if current value is an input value, update its reference in inputIndices\n          ind = this._allInputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allInputIndices[ind] = i;\n          }\n        }\n\n        // find the node that the current value is linking to and update its input reference\n        this._allData[i].to.forEach(node => {\n          ind = this._nodes[node].inputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[node].inputs[ind] = i;\n          }\n        });\n        if (this._allData[i].to.length === 0) {\n          // if current value is a graph output, update its reference in outputIndices\n          ind = this._allOutputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allOutputIndices[ind] = i;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete the specifed node. Assume the node has one incoming input and the first output connected to other nodes.\n   * An input validation must be done before calling this function.\n   * @param nodeIndex The index of node to be deleted\n   */\n  private deleteNode(nodeIndex: number) {\n    const node = this._nodes[nodeIndex];\n    if (node.outputs.length > 1) {\n      for (let i = 1; i < node.outputs.length; i++) {\n        if (this._allData[node.outputs[i]].to.length > 0) {\n          throw new Error('Node deletion with more than one output connected to other nodes is not supported. ');\n        }\n      }\n    }\n\n    // this node wil not be executed\n    node.executeNode = false;\n    const inputValueIndex = node.inputs[0];\n    const outputValueIndex = node.outputs[0];\n    const nodesConsumingOutput = this._allData[outputValueIndex].to;\n\n    // remove this node from the to property of the input Value\n    const delIndex = this._allData[inputValueIndex].to.indexOf(nodeIndex);\n    // should not happen\n    if (delIndex === -1) {\n      throw new Error('The Value object doesn\\'t have the current Node in it\\'s \\'to\\' property ');\n    }\n    this._allData[inputValueIndex].to.splice(delIndex, 1);\n\n    // clear node indices consuming this output Value\n    this._allData[outputValueIndex]._to = [];\n\n    // if the output of this node is a graph output, adjust the index appropriately\n    const index = this._allOutputIndices.indexOf(outputValueIndex);\n    if (index !== -1) {\n      this._allOutputIndices[index] = inputValueIndex;\n    }\n\n    // override the inputs for nodes consuming this node's output with the input to this node\n    if (nodesConsumingOutput && nodesConsumingOutput.length > 0) {\n      for (const nodeIndex of nodesConsumingOutput) {\n        const replaceIndex = this._nodes[nodeIndex].inputs.indexOf(outputValueIndex);\n        // should not happen\n        if (replaceIndex === -1) {\n          throw new Error('The Node object doesn\\'t have the output Value in it\\'s \\'inputs\\' property ');\n        }\n        this._nodes[nodeIndex].inputs[replaceIndex] = inputValueIndex;\n        this._allData[inputValueIndex].to.push(nodeIndex);\n      }\n    }\n  }\n\n  removeAllDropoutNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Dropout' nodes so that no time is wasted in execution\n      if (node.opType === 'Dropout') {\n        // the node should have exactly 1 input and 1 or 2 outputs\n        if (node.inputs.length !== 1) {\n          throw new Error('Dropout nodes should only contain one input. ');\n        }\n        if (node.outputs.length !== 1 && node.outputs.length !== 2) {\n          throw new Error('Dropout nodes should contain either 1 or 2 output(s)');\n        }\n        // the second output should not be referenced by any other node\n        if (node.outputs.length === 2 && this._allData[node.outputs[1]]._to.length !== 0) {\n          throw new Error('Dropout nodes\\'s second output should not be referenced by other nodes');\n        }\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  removeAllIdentityNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Identity' nodes so that no time is wasted in execution\n      if (node.opType === 'Identity') {\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  isActivation(n: Node): boolean {\n    switch (n.opType) {\n      // TODO: add other activation methods\n      case 'Relu':\n      case 'Sigmoid':\n      case 'Clip':\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  fuseConvActivationNodes() {\n    for (const node of this._nodes) {\n      if (node.opType === 'Conv') {\n        const next = this._allData[node.outputs[0]]._to;\n        if (next.length === 1 && this.isActivation(this._nodes[next[0]])) {\n          const child = this._nodes[next[0]];\n          if (child.opType === 'Clip') {\n            if (child.inputs.length === 1) {\n              try {\n                node.attributes.set(\n                    'activation_params', 'floats',\n                    [child.attributes.getFloat('min'), child.attributes.getFloat('max')]);\n              } catch (e) {\n                node.attributes.set('activation_params', 'floats', [MIN_CLIP, MAX_CLIP]);\n              }\n            } else if (\n                child.inputs.length >= 3 && this._allData[child.inputs[1]].tensor !== undefined &&\n                this._allData[child.inputs[2]].tensor !== undefined) {\n              node.attributes.set('activation_params', 'floats', [\n                this._allData[child.inputs[1]].tensor!.floatData[0], this._allData[child.inputs[2]].tensor!.floatData[0]\n              ]);\n            } else {\n              // Skip fusion with clip node since clip min and clip max are not coming from initializer\n              continue;\n            }\n          }\n          node.attributes.set('activation', 'string', (child.opType));\n          this.deleteNode(next[0]);\n        }\n      }\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\n\nimport {WebGLContext} from './backends/webgl/webgl-context';\n\nexport declare namespace Logger {\n  export interface SeverityTypeMap {\n    verbose: 'v';\n    info: 'i';\n    warning: 'w';\n    error: 'e';\n    fatal: 'f';\n  }\n\n  export type Severity = keyof SeverityTypeMap;\n\n  export type Provider = 'none'|'console';\n\n  /**\n   * Logging config that used to control the behavior of logger\n   */\n  export interface Config {\n    /**\n     * Specify the logging provider. 'console' by default\n     */\n    provider?: Provider;\n    /**\n     * Specify the minimal logger serverity. 'warning' by default\n     */\n    minimalSeverity?: Logger.Severity;\n    /**\n     * Whether to output date time in log. true by default\n     */\n    logDateTime?: boolean;\n    /**\n     * Whether to output source information (Not yet supported). false by default\n     */\n    logSourceLocation?: boolean;\n  }\n\n  export interface CategorizedLogger {\n    verbose(content: string): void;\n    info(content: string): void;\n    warning(content: string): void;\n    error(content: string): void;\n    fatal(content: string): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Logger {\n  (category: string): Logger.CategorizedLogger;\n\n  verbose(content: string): void;\n  verbose(category: string, content: string): void;\n  info(content: string): void;\n  info(category: string, content: string): void;\n  warning(content: string): void;\n  warning(category: string, content: string): void;\n  error(content: string): void;\n  error(category: string, content: string): void;\n  fatal(content: string): void;\n  fatal(category: string, content: string): void;\n\n  /**\n   * Reset the logger configuration.\n   * @param config specify an optional default config\n   */\n  reset(config?: Logger.Config): void;\n  /**\n   * Set the logger's behavior on the given category\n   * @param category specify a category string. If '*' is specified, all previous configuration will be overwritten. If\n   * '' is specified, the default behavior will be updated.\n   * @param config the config object to indicate the logger's behavior\n   */\n  set(category: string, config: Logger.Config): void;\n\n  /**\n   * Set the logger's behavior from ort-common env\n   * @param env the env used to set logger. Currently only setting loglevel is supported through Env.\n   */\n  setWithEnv(env: Env): void;\n}\n\ninterface LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string): void;\n}\nclass NoOpLoggerProvider implements LoggerProvider {\n  log(_severity: Logger.Severity, _content: string, _category?: string) {\n    // do nothing\n  }\n}\nclass ConsoleLoggerProvider implements LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string) {\n    // eslint-disable-next-line no-console\n    console.log(`${this.color(severity)} ${category ? '\\x1b[35m' + category + '\\x1b[0m ' : ''}${content}`);\n  }\n\n  private color(severity: Logger.Severity) {\n    switch (severity) {\n      case 'verbose':\n        return '\\x1b[34;40mv\\x1b[0m';\n      case 'info':\n        return '\\x1b[32mi\\x1b[0m';\n      case 'warning':\n        return '\\x1b[30;43mw\\x1b[0m';\n      case 'error':\n        return '\\x1b[31;40me\\x1b[0m';\n      case 'fatal':\n        return '\\x1b[101mf\\x1b[0m';\n      default:\n        throw new Error(`unsupported severity: ${severity}`);\n    }\n  }\n}\n\nconst SEVERITY_VALUE = {\n  verbose: 1000,\n  info: 2000,\n  warning: 4000,\n  error: 5000,\n  fatal: 6000\n};\n\nconst LOGGER_PROVIDER_MAP: {readonly [provider: string]: Readonly<LoggerProvider>} = {\n  ['none']: new NoOpLoggerProvider(),\n  ['console']: new ConsoleLoggerProvider()\n};\nconst LOGGER_DEFAULT_CONFIG = {\n  provider: 'console',\n  minimalSeverity: 'warning',\n  logDateTime: true,\n  logSourceLocation: false\n};\nlet LOGGER_CONFIG_MAP:\n    {[category: string]: Readonly<Required<Logger.Config>>} = {['']: LOGGER_DEFAULT_CONFIG as Required<Logger.Config>};\n\nfunction log(category: string): Logger.CategorizedLogger;\nfunction log(severity: Logger.Severity, content: string): void;\nfunction log(severity: Logger.Severity, category: string, content: string): void;\nfunction log(severity: Logger.Severity, arg1: string, arg2?: string): void;\nfunction log(\n    arg0: string|Logger.Severity, arg1?: string, arg2?: string|number, arg3?: number): Logger.CategorizedLogger|void {\n  if (arg1 === undefined) {\n    // log(category: string): Logger.CategorizedLogger;\n    return createCategorizedLogger(arg0);\n  } else if (arg2 === undefined) {\n    // log(severity, content);\n    logInternal(arg0 as Logger.Severity, arg1, 1);\n  } else if (typeof arg2 === 'number' && arg3 === undefined) {\n    // log(severity, content, stack)\n    logInternal(arg0 as Logger.Severity, arg1, arg2);\n  } else if (typeof arg2 === 'string' && arg3 === undefined) {\n    // log(severity, category, content)\n    logInternal(arg0 as Logger.Severity, arg2, 1, arg1);\n  } else if (typeof arg2 === 'string' && typeof arg3 === 'number') {\n    // log(severity, category, content, stack)\n    logInternal(arg0 as Logger.Severity, arg2, arg3, arg1);\n  } else {\n    throw new TypeError('input is valid');\n  }\n}\n\nfunction createCategorizedLogger(category: string): Logger.CategorizedLogger {\n  return {\n    verbose: log.verbose.bind(null, category),\n    info: log.info.bind(null, category),\n    warning: log.warning.bind(null, category),\n    error: log.error.bind(null, category),\n    fatal: log.fatal.bind(null, category)\n  };\n}\n\n// NOTE: argument 'category' is put the last parameter beacause typescript\n// doesn't allow optional argument put in front of required argument. This\n// order is different from a usual logging API.\nfunction logInternal(severity: Logger.Severity, content: string, stack: number, category?: string) {\n  const config = LOGGER_CONFIG_MAP[category || ''] || LOGGER_CONFIG_MAP[''];\n  if (SEVERITY_VALUE[severity] < SEVERITY_VALUE[config.minimalSeverity]) {\n    return;\n  }\n\n  if (config.logDateTime) {\n    content = `${new Date().toISOString()}|${content}`;\n  }\n\n  if (config.logSourceLocation) {\n    // TODO: calculate source location from 'stack'\n  }\n\n  LOGGER_PROVIDER_MAP[config.provider].log(severity, content, category);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\nnamespace log {\n  export function verbose(content: string): void;\n  export function verbose(category: string, content: string): void;\n  export function verbose(arg0: string, arg1?: string) {\n    log('verbose', arg0, arg1);\n  }\n  export function info(content: string): void;\n  export function info(category: string, content: string): void;\n  export function info(arg0: string, arg1?: string) {\n    log('info', arg0, arg1);\n  }\n  export function warning(content: string): void;\n  export function warning(category: string, content: string): void;\n  export function warning(arg0: string, arg1?: string) {\n    log('warning', arg0, arg1);\n  }\n  export function error(content: string): void;\n  export function error(category: string, content: string): void;\n  export function error(arg0: string, arg1?: string) {\n    log('error', arg0, arg1);\n  }\n  export function fatal(content: string): void;\n  export function fatal(category: string, content: string): void;\n  export function fatal(arg0: string, arg1?: string) {\n    log('fatal', arg0, arg1);\n  }\n\n  export function reset(config?: Logger.Config): void {\n    LOGGER_CONFIG_MAP = {};\n    set('', config || {});\n  }\n  export function set(category: string, config: Logger.Config): void {\n    if (category === '*') {\n      reset(config);\n    } else {\n      const previousConfig = LOGGER_CONFIG_MAP[category] || LOGGER_DEFAULT_CONFIG;\n      LOGGER_CONFIG_MAP[category] = {\n        provider: config.provider || previousConfig.provider,\n        minimalSeverity: config.minimalSeverity || previousConfig.minimalSeverity,\n        logDateTime: (config.logDateTime === undefined) ? previousConfig.logDateTime : config.logDateTime,\n        logSourceLocation: (config.logSourceLocation === undefined) ? previousConfig.logSourceLocation :\n                                                                      config.logSourceLocation\n      };\n    }\n\n    // TODO: we want to support wildcard or regex?\n  }\n\n  export function setWithEnv(env: Env): void {\n    const config: Logger.Config = {};\n    if (env.logLevel) {\n      config.minimalSeverity = env.logLevel as Logger.Severity;\n    }\n    set('', config);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare, @typescript-eslint/naming-convention\nexport const Logger: Logger = log;\n\nexport declare namespace Profiler {\n  export interface Config {\n    maxNumberEvents?: number;\n    flushBatchSize?: number;\n    flushIntervalInMilliseconds?: number;\n  }\n\n  export type EventCategory = 'session'|'node'|'op'|'backend';\n\n  export interface Event {\n    end(): void|Promise<void>;\n  }\n}\n// TODO\n// class WebGLEvent implements Profiler.Event {}\n\nclass Event implements Profiler.Event {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number,\n      private endCallback: (e: Event) => void|Promise<void>, public timer?: WebGLQuery, public ctx?: WebGLContext) {}\n\n  end() {\n    return this.endCallback(this);\n  }\n\n  async checkTimer(): Promise<number> {\n    if (this.ctx === undefined || this.timer === undefined) {\n      throw new Error('No webgl timer found');\n    } else {\n      this.ctx.endTimer();\n      return this.ctx.waitForQueryAndGetTime(this.timer);\n    }\n  }\n}\n\nclass EventRecord {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number, public endTime: number) {}\n}\n\nexport class Profiler {\n  static create(config?: Profiler.Config): Profiler {\n    if (config === undefined) {\n      return new this();\n    }\n    return new this(config.maxNumberEvents, config.flushBatchSize, config.flushIntervalInMilliseconds);\n  }\n\n  private constructor(maxNumberEvents?: number, flushBatchSize?: number, flushIntervalInMilliseconds?: number) {\n    this._started = false;\n    this._maxNumberEvents = maxNumberEvents === undefined ? 10000 : maxNumberEvents;\n    this._flushBatchSize = flushBatchSize === undefined ? 10 : flushBatchSize;\n    this._flushIntervalInMilliseconds = flushIntervalInMilliseconds === undefined ? 5000 : flushIntervalInMilliseconds;\n  }\n\n  // start profiling\n  start() {\n    this._started = true;\n    this._timingEvents = [];\n    this._flushTime = now();\n    this._flushPointer = 0;\n  }\n\n  // stop profiling\n  stop() {\n    this._started = false;\n    for (; this._flushPointer < this._timingEvents.length; this._flushPointer++) {\n      this.logOneEvent(this._timingEvents[this._flushPointer]);\n    }\n  }\n\n  // create an event scope for the specific function\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T, ctx?: WebGLContext): T;\n  event<T>(category: Profiler.EventCategory, name: string, func: () => Promise<T>, ctx?: WebGLContext): Promise<T>;\n\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T | Promise<T>, ctx?: WebGLContext): T\n      |Promise<T> {\n    const event = this._started ? this.begin(category, name, ctx) : undefined;\n    let isPromise = false;\n\n    const res = func();\n\n    // we consider a then-able object is a promise\n    if (res && typeof (res as Promise<T>).then === 'function') {\n      isPromise = true;\n      return new Promise<T>((resolve, reject) => {\n        (res as Promise<T>)\n            .then(\n                async value => {  // fulfilled\n                  if (event) {\n                    await event.end();\n                  }\n                  resolve(value);\n                },\n                async reason => {  // rejected\n                  if (event) {\n                    await event.end();\n                  }\n                  reject(reason);\n                });\n      });\n    }\n    if (!isPromise && event) {\n      const eventRes = event.end();\n      if (eventRes && typeof eventRes.then === 'function') {\n        return new Promise<T>((resolve, reject) => {\n          (eventRes).then(\n              () => {  // fulfilled\n                resolve(res);\n              },\n              (reason) => {  // rejected\n                reject(reason);\n              });\n        });\n      }\n    }\n    return res;\n  }\n\n  // begin an event\n  begin(category: Profiler.EventCategory, name: string, ctx?: WebGLContext): Event {\n    if (!this._started) {\n      throw new Error('profiler is not started yet');\n    }\n    if (ctx === undefined) {\n      const startTime = now();\n      this.flush(startTime);\n      return new Event(category, name, startTime, e => this.endSync(e));\n    } else {\n      const timer: WebGLQuery = ctx.beginTimer();\n      return new Event(category, name, 0, async e => this.end(e), timer, ctx);\n    }\n  }\n\n  // end the specific event\n  private async end(event: Event): Promise<void> {\n    const endTime: number = await event.checkTimer();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private endSync(event: Event): void {\n    const endTime: number = now();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private logOneEvent(event: EventRecord) {\n    Logger.verbose(\n        `Profiler.${event.category}`,\n        `${(event.endTime - event.startTime).toFixed(2)}ms on event '${event.name}' at ${event.endTime.toFixed(2)}`);\n  }\n\n  private flush(currentTime: number) {\n    if (this._timingEvents.length - this._flushPointer >= this._flushBatchSize ||\n        currentTime - this._flushTime >= this._flushIntervalInMilliseconds) {\n      // should flush when either batch size accumlated or interval elepsed\n\n      for (const previousPointer = this._flushPointer; this._flushPointer < previousPointer + this._flushBatchSize &&\n           this._flushPointer < this._timingEvents.length;\n           this._flushPointer++) {\n        this.logOneEvent(this._timingEvents[this._flushPointer]);\n      }\n\n      this._flushTime = now();\n    }\n  }\n\n  get started() {\n    return this._started;\n  }\n  private _started = false;\n  private _timingEvents: EventRecord[];\n\n  private readonly _maxNumberEvents: number;\n\n  private readonly _flushBatchSize: number;\n  private readonly _flushIntervalInMilliseconds: number;\n\n  private _flushTime: number;\n  private _flushPointer = 0;\n}\n\n/**\n * returns a number to represent the current timestamp in a resolution as high as possible.\n */\nexport const now = (typeof performance !== 'undefined' && performance.now) ? () => performance.now() : Date.now;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\nimport {onnx} from 'onnx-proto';\n\nimport {Graph} from './graph';\nimport {OpSet} from './opset';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {LongUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport class Model {\n  // empty model\n  constructor() {}\n\n  load(buf: Uint8Array, graphInitializer?: Graph.Initializer, isOrtFormat?: boolean): void {\n    if (!isOrtFormat) {\n      // isOrtFormat === false || isOrtFormat === undefined\n      try {\n        this.loadFromOnnxFormat(buf, graphInitializer);\n        return;\n      } catch (e) {\n        if (isOrtFormat !== undefined) {\n          throw e;\n        }\n      }\n    }\n\n    this.loadFromOrtFormat(buf, graphInitializer);\n  }\n\n  private loadFromOnnxFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const modelProto = onnx.ModelProto.decode(buf);\n    const irVersion = LongUtil.longToNumber(modelProto.irVersion);\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n\n    this._opsets =\n        modelProto.opsetImport.map(i => ({domain: i.domain as string, version: LongUtil.longToNumber(i.version!)}));\n\n    this._graph = Graph.from(modelProto.graph!, graphInitializer);\n  }\n\n  private loadFromOrtFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const fb = new flatbuffers.ByteBuffer(buf);\n    const ortModel = ortFbs.InferenceSession.getRootAsInferenceSession(fb).model()!;\n    const irVersion = LongUtil.longToNumber(ortModel.irVersion());\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n    this._opsets = [];\n    for (let i = 0; i < ortModel.opsetImportLength(); i++) {\n      const opsetId = ortModel.opsetImport(i)!;\n      this._opsets.push({domain: opsetId?.domain() as string, version: LongUtil.longToNumber(opsetId.version()!)});\n    }\n\n    this._graph = Graph.from(ortModel.graph()!, graphInitializer);\n  }\n\n  private _graph: Graph;\n  get graph(): Graph {\n    return this._graph;\n  }\n\n  private _opsets: OpSet[];\n  get opsets(): readonly OpSet[] {\n    return this._opsets;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceHandler} from './backend';\nimport {Graph} from './graph';\nimport {Tensor} from './tensor';\n\nexport type OperatorImplementation<T> = (inferenceHandler: InferenceHandler, inputs: Tensor[], context: T) => Tensor[];\nexport type OperatorInitialization<T> = (node: Graph.Node, graph: Graph) => T;\n\nexport interface Operator {\n  readonly impl: OperatorImplementation<unknown>;\n  readonly context: Graph.Node|unknown;\n}\n\nexport const NUMBER_TYPES: readonly Tensor.DataType[] =\n    ['float32', 'float64', 'int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const INT_TYPES: readonly Tensor.DataType[] = ['int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const FLOAT_TYPES: readonly Tensor.DataType[] = ['float32', 'float64'];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from './graph';\nimport {OperatorImplementation, OperatorInitialization} from './operators';\n\nexport interface OpSet {\n  domain: string;\n  version: number;\n}\n\nexport declare namespace OpSet {\n  /**\n   * Domain of an opset, it can be an empty string(default value, represent for ai.onnx), or 'ai.onnx.ml'\n   */\n  type Domain = ''|'ai.onnx.ml'|'com.microsoft';\n\n  /**\n   * A resolve rule consists of 4 or 5 items: opType, opSetDomain, versionSelector, operatorImplementation and\n   * operatorInitialization (optional)\n   */\n  type ResolveRule = [\n    string, Domain, string, OperatorImplementation<Graph.Node>\n  ]|[string, Domain, string, OperatorImplementation<unknown>, OperatorInitialization<unknown>];\n}\n\nexport function resolveOperator(node: Graph.Node, opsets: readonly OpSet[], rules: readonly OpSet.ResolveRule[]) {\n  for (const rule of rules) {\n    const opType = rule[0];\n    const domain = rule[1];\n    const versionSelector = rule[2];\n    const opImpl = rule[3];\n    const opInit = rule[4];\n\n    if (node.opType === opType) {  // operator type matches\n      for (const opset of opsets) {\n        // opset '' and 'ai.onnx' are considered the same.\n        if (opset.domain === domain || (opset.domain === 'ai.onnx' && domain === '')) {  // opset domain found\n          if (matchSelector(opset.version, versionSelector)) {\n            return {opImpl, opInit};\n          }\n        }\n      }\n    }\n  }\n\n  throw new TypeError(`cannot resolve operator '${node.opType}' with opsets: ${\n      opsets.map(set => `${set.domain || 'ai.onnx'} v${set.version}`).join(', ')}`);\n}\n\nfunction matchSelector(version: number, selector: string): boolean {\n  if (selector.endsWith('+')) {\n    // minimum version match ('7+' expects version>=7)\n    const rangeStart = Number.parseInt(selector.substring(0, selector.length - 1), 10);\n    return !isNaN(rangeStart) && rangeStart <= version;\n  } else if (selector.split('-').length === 2) {\n    // range match ('6-8' expects 6<=version<=8)\n    const pair = selector.split('-');\n    const rangeStart = Number.parseInt(pair[0], 10);\n    const rangeEnd = Number.parseInt(pair[1], 10);\n    return !isNaN(rangeStart) && !isNaN(rangeEnd) && rangeStart <= version && version <= rangeEnd;\n  } else {\n    // exact match ('7' expects version===7)\n    return Number.parseInt(selector, 10) === version;\n  }\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n/* eslint-disable */\n\nimport {flatbuffers} from 'flatbuffers';\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum AttributeType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    INT = 2,\n    STRING = 3,\n    TENSOR = 4,\n    GRAPH = 5,\n    FLOATS = 6,\n    INTS = 7,\n    STRINGS = 8,\n    TENSORS = 9,\n    GRAPHS = 10,\n    SPARSE_TENSOR = 11,\n    SPARSE_TENSORS = 12\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum DimensionValueType {UNKNOWN = 0, VALUE = 1, PARAM = 2}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TensorDataType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    UINT8 = 2,\n    INT8 = 3,\n    UINT16 = 4,\n    INT16 = 5,\n    INT32 = 6,\n    INT64 = 7,\n    STRING = 8,\n    BOOL = 9,\n    FLOAT16 = 10,\n    DOUBLE = 11,\n    UINT32 = 12,\n    UINT64 = 13,\n    COMPLEX64 = 14,\n    COMPLEX128 = 15,\n    BFLOAT16 = 16\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum NodeType {Primitive = 0, Fused = 1}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TypeInfoValue {NONE = 0, tensor_type = 1, sequence_type = 2, map_type = 3}\n}\n\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Shape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Shape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Shape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getSizePrefixedRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Dimension= obj\n     * @returns onnxruntime.experimental.fbs.Dimension\n     */\n    dim(index: number, obj?: onnxruntime.experimental.fbs.Dimension): onnxruntime.experimental.fbs.Dimension|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Dimension())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    dimLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startShape(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimOffset\n     */\n    static addDim(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, dimOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createShape(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Shape.startShape(builder);\n      Shape.addDim(builder, dimOffset);\n      return Shape.endShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Dimension {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Dimension\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Dimension {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getSizePrefixedRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.DimensionValue= obj\n     * @returns onnxruntime.experimental.fbs.DimensionValue|null\n     */\n    value(obj?: onnxruntime.experimental.fbs.DimensionValue): onnxruntime.experimental.fbs.DimensionValue|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.DimensionValue())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimension(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimension(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimension(\n        builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset,\n        denotationOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Dimension.startDimension(builder);\n      Dimension.addValue(builder, valueOffset);\n      Dimension.addDenotation(builder, denotationOffset);\n      return Dimension.endDimension(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class DimensionValue {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns DimensionValue\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DimensionValue {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getSizePrefixedRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.DimensionValueType\n     */\n    dimType(): onnxruntime.experimental.fbs.DimensionValueType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    dimValue(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    dimParam(): string|null;\n    dimParam(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    dimParam(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimensionValue(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.DimensionValueType dimType\n     */\n    static addDimType(builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType) {\n      builder.addFieldInt8(0, dimType, onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long dimValue\n     */\n    static addDimValue(builder: flatbuffers.Builder, dimValue: flatbuffers.Long) {\n      builder.addFieldInt64(1, dimValue, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimParamOffset\n     */\n    static addDimParam(builder: flatbuffers.Builder, dimParamOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimParamOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimensionValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimensionValue(\n        builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType,\n        dimValue: flatbuffers.Long, dimParamOffset: flatbuffers.Offset): flatbuffers.Offset {\n      DimensionValue.startDimensionValue(builder);\n      DimensionValue.addDimType(builder, dimType);\n      DimensionValue.addDimValue(builder, dimValue);\n      DimensionValue.addDimParam(builder, dimParamOffset);\n      return DimensionValue.endDimensionValue(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TensorTypeAndShape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TensorTypeAndShape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TensorTypeAndShape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape): TensorTypeAndShape {\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getSizePrefixedRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape):\n        TensorTypeAndShape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    elemType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Shape= obj\n     * @returns onnxruntime.experimental.fbs.Shape|null\n     */\n    shape(obj?: onnxruntime.experimental.fbs.Shape): onnxruntime.experimental.fbs.Shape|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Shape())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensorTypeAndShape(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType elemType\n     */\n    static addElemType(builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, elemType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset shapeOffset\n     */\n    static addShape(builder: flatbuffers.Builder, shapeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, shapeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensorTypeAndShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensorTypeAndShape(\n        builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType,\n        shapeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TensorTypeAndShape.startTensorTypeAndShape(builder);\n      TensorTypeAndShape.addElemType(builder, elemType);\n      TensorTypeAndShape.addShape(builder, shapeOffset);\n      return TensorTypeAndShape.endTensorTypeAndShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class MapType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns MapType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): MapType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getSizePrefixedRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    keyType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    valueType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startMapType(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType keyType\n     */\n    static addKeyType(builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, keyType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueTypeOffset\n     */\n    static addValueType(builder: flatbuffers.Builder, valueTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, valueTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endMapType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createMapType(\n        builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType,\n        valueTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      MapType.startMapType(builder);\n      MapType.addKeyType(builder, keyType);\n      MapType.addValueType(builder, valueTypeOffset);\n      return MapType.endMapType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SequenceType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SequenceType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SequenceType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getSizePrefixedRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    elemType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSequenceType(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset elemTypeOffset\n     */\n    static addElemType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, elemTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSequenceType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSequenceType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SequenceType.startSequenceType(builder);\n      SequenceType.addElemType(builder, elemTypeOffset);\n      return SequenceType.endSequenceType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class EdgeEnd {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns EdgeEnd\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): EdgeEnd {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      return this.bb!.readUint32(this.bb_pos);\n    }\n\n    /**\n     * @returns number\n     */\n    srcArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 4);\n    }\n\n    /**\n     * @returns number\n     */\n    dstArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number node_index\n     * @param number src_arg_index\n     * @param number dst_arg_index\n     * @returns flatbuffers.Offset\n     */\n    static createEdgeEnd(\n        builder: flatbuffers.Builder, node_index: number, src_arg_index: number,\n        dst_arg_index: number): flatbuffers.Offset {\n      builder.prep(4, 12);\n      builder.writeInt32(dst_arg_index);\n      builder.writeInt32(src_arg_index);\n      builder.writeInt32(node_index);\n      return builder.offset();\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class NodeEdge {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns NodeEdge\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): NodeEdge {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getSizePrefixedRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    inputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    outputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNodeEdge(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number nodeIndex\n     */\n    static addNodeIndex(builder: flatbuffers.Builder, nodeIndex: number) {\n      builder.addFieldInt32(0, nodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputEdgesOffset\n     */\n    static addInputEdges(builder: flatbuffers.Builder, inputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, inputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputEdgesOffset\n     */\n    static addOutputEdges(builder: flatbuffers.Builder, outputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, outputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNodeEdge(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNodeEdge(\n        builder: flatbuffers.Builder, nodeIndex: number, inputEdgesOffset: flatbuffers.Offset,\n        outputEdgesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      NodeEdge.startNodeEdge(builder);\n      NodeEdge.addNodeIndex(builder, nodeIndex);\n      NodeEdge.addInputEdges(builder, inputEdgesOffset);\n      NodeEdge.addOutputEdges(builder, outputEdgesOffset);\n      return NodeEdge.endNodeEdge(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Node {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Node\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Node {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getSizePrefixedRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    sinceVersion(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    index(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    opType(): string|null;\n    opType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    opType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.NodeType\n     */\n    type(): onnxruntime.experimental.fbs.NodeType {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.NodeType.Primitive;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    executionProviderType(): string|null;\n    executionProviderType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    executionProviderType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Attribute= obj\n     * @returns onnxruntime.experimental.fbs.Attribute\n     */\n    attributes(index: number, obj?: onnxruntime.experimental.fbs.Attribute): onnxruntime.experimental.fbs.Attribute\n        |null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Attribute())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    attributesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    inputArgCounts(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    inputArgCountsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Int32Array\n     */\n    inputArgCountsArray(): Int32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ?\n          new Int32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    implicitInputs(index: number): string;\n    implicitInputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    implicitInputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    implicitInputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNode(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number sinceVersion\n     */\n    static addSinceVersion(builder: flatbuffers.Builder, sinceVersion: number) {\n      builder.addFieldInt32(3, sinceVersion, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number index\n     */\n    static addIndex(builder: flatbuffers.Builder, index: number) {\n      builder.addFieldInt32(4, index, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opTypeOffset\n     */\n    static addOpType(builder: flatbuffers.Builder, opTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, opTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.NodeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.NodeType) {\n      builder.addFieldInt32(6, type, onnxruntime.experimental.fbs.NodeType.Primitive);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset executionProviderTypeOffset\n     */\n    static addExecutionProviderType(builder: flatbuffers.Builder, executionProviderTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, executionProviderTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset attributesOffset\n     */\n    static addAttributes(builder: flatbuffers.Builder, attributesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, attributesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createAttributesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startAttributesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputArgCountsOffset\n     */\n    static addInputArgCounts(builder: flatbuffers.Builder, inputArgCountsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, inputArgCountsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputArgCountsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputArgCountsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset implicitInputsOffset\n     */\n    static addImplicitInputs(builder: flatbuffers.Builder, implicitInputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, implicitInputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createImplicitInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startImplicitInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNode(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNode(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, sinceVersion: number, index: number, opTypeOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.NodeType, executionProviderTypeOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset, attributesOffset: flatbuffers.Offset,\n        inputArgCountsOffset: flatbuffers.Offset, implicitInputsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Node.startNode(builder);\n      Node.addName(builder, nameOffset);\n      Node.addDocString(builder, docStringOffset);\n      Node.addDomain(builder, domainOffset);\n      Node.addSinceVersion(builder, sinceVersion);\n      Node.addIndex(builder, index);\n      Node.addOpType(builder, opTypeOffset);\n      Node.addType(builder, type);\n      Node.addExecutionProviderType(builder, executionProviderTypeOffset);\n      Node.addInputs(builder, inputsOffset);\n      Node.addOutputs(builder, outputsOffset);\n      Node.addAttributes(builder, attributesOffset);\n      Node.addInputArgCounts(builder, inputArgCountsOffset);\n      Node.addImplicitInputs(builder, implicitInputsOffset);\n      return Node.endNode(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class ValueInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns ValueInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): ValueInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getSizePrefixedRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    type(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startValueInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset typeOffset\n     */\n    static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, typeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endValueInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createValueInfo(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        typeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      ValueInfo.startValueInfo(builder);\n      ValueInfo.addName(builder, nameOffset);\n      ValueInfo.addDocString(builder, docStringOffset);\n      ValueInfo.addType(builder, typeOffset);\n      return ValueInfo.endValueInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TypeInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TypeInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TypeInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getSizePrefixedRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TypeInfoValue\n     */\n    valueType(): onnxruntime.experimental.fbs.TypeInfoValue {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TypeInfoValue.NONE;\n    }\n\n    /**\n     * @param flatbuffers.Table obj\n     * @returns ?flatbuffers.Table\n     */\n    value<T extends flatbuffers.Table>(obj: T): T|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTypeInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TypeInfoValue valueType\n     */\n    static addValueType(builder: flatbuffers.Builder, valueType: onnxruntime.experimental.fbs.TypeInfoValue) {\n      builder.addFieldInt8(1, valueType, onnxruntime.experimental.fbs.TypeInfoValue.NONE);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTypeInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTypeInfo(\n        builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset,\n        valueType: onnxruntime.experimental.fbs.TypeInfoValue, valueOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TypeInfo.startTypeInfo(builder);\n      TypeInfo.addDenotation(builder, denotationOffset);\n      TypeInfo.addValueType(builder, valueType);\n      TypeInfo.addValue(builder, valueOffset);\n      return TypeInfo.endTypeInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class OperatorSetId {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns OperatorSetId\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): OperatorSetId {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getSizePrefixedRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    version(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startOperatorSetId(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: flatbuffers.Long) {\n      builder.addFieldInt64(1, version, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endOperatorSetId(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createOperatorSetId(\n        builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset, version: flatbuffers.Long): flatbuffers.Offset {\n      OperatorSetId.startOperatorSetId(builder);\n      OperatorSetId.addDomain(builder, domainOffset);\n      OperatorSetId.addVersion(builder, version);\n      return OperatorSetId.endOperatorSetId(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Tensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Tensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Tensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getSizePrefixedRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    dataType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    rawData(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    rawDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint8Array\n     */\n    rawDataArray(): Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ?\n          new Uint8Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    stringData(index: number): string;\n    stringData(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    stringData(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensor(builder: flatbuffers.Builder) {\n      builder.startObject(6);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType dataType\n     */\n    static addDataType(builder: flatbuffers.Builder, dataType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(3, dataType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset rawDataOffset\n     */\n    static addRawData(builder: flatbuffers.Builder, rawDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, rawDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createRawDataVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(1, data.length, 1);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt8(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startRawDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(1, numElems, 1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringDataOffset\n     */\n    static addStringData(builder: flatbuffers.Builder, stringDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, stringDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringDataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensor(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset, dataType: onnxruntime.experimental.fbs.TensorDataType,\n        rawDataOffset: flatbuffers.Offset, stringDataOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Tensor.startTensor(builder);\n      Tensor.addName(builder, nameOffset);\n      Tensor.addDocString(builder, docStringOffset);\n      Tensor.addDims(builder, dimsOffset);\n      Tensor.addDataType(builder, dataType);\n      Tensor.addRawData(builder, rawDataOffset);\n      Tensor.addStringData(builder, stringDataOffset);\n      return Tensor.endTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SparseTensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SparseTensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SparseTensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getSizePrefixedRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    values(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    indices(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSparseTensor(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valuesOffset\n     */\n    static addValues(builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valuesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset indicesOffset\n     */\n    static addIndices(builder: flatbuffers.Builder, indicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, indicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSparseTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSparseTensor(\n        builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset, indicesOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SparseTensor.startSparseTensor(builder);\n      SparseTensor.addValues(builder, valuesOffset);\n      SparseTensor.addIndices(builder, indicesOffset);\n      SparseTensor.addDims(builder, dimsOffset);\n      return SparseTensor.endSparseTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Attribute {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Attribute\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Attribute {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getSizePrefixedRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.AttributeType\n     */\n    type(): onnxruntime.experimental.fbs.AttributeType {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.AttributeType.UNDEFINED;\n    }\n\n    /**\n     * @returns number\n     */\n    f(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    i(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    s(): string|null;\n    s(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    s(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    t(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    g(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    floats(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    floatsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Float32Array\n     */\n    floatsArray(): Float32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ?\n          new Float32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    ints(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    intsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    strings(index: number): string;\n    strings(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    strings(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    tensors(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    tensorsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph\n     */\n    graphs(index: number, obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    graphsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startAttribute(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.AttributeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.AttributeType) {\n      builder.addFieldInt32(2, type, onnxruntime.experimental.fbs.AttributeType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number f\n     */\n    static addF(builder: flatbuffers.Builder, f: number) {\n      builder.addFieldFloat32(3, f, 0.0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long i\n     */\n    static addI(builder: flatbuffers.Builder, i: flatbuffers.Long) {\n      builder.addFieldInt64(4, i, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sOffset\n     */\n    static addS(builder: flatbuffers.Builder, sOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, sOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tOffset\n     */\n    static addT(builder: flatbuffers.Builder, tOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, tOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset gOffset\n     */\n    static addG(builder: flatbuffers.Builder, gOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, gOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset floatsOffset\n     */\n    static addFloats(builder: flatbuffers.Builder, floatsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, floatsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createFloatsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addFloat32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startFloatsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset intsOffset\n     */\n    static addInts(builder: flatbuffers.Builder, intsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, intsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createIntsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startIntsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringsOffset\n     */\n    static addStrings(builder: flatbuffers.Builder, stringsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, stringsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tensorsOffset\n     */\n    static addTensors(builder: flatbuffers.Builder, tensorsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, tensorsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createTensorsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startTensorsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphsOffset\n     */\n    static addGraphs(builder: flatbuffers.Builder, graphsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, graphsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createGraphsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startGraphsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endAttribute(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createAttribute(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.AttributeType, f: number, i: flatbuffers.Long, sOffset: flatbuffers.Offset,\n        tOffset: flatbuffers.Offset, gOffset: flatbuffers.Offset, floatsOffset: flatbuffers.Offset,\n        intsOffset: flatbuffers.Offset, stringsOffset: flatbuffers.Offset, tensorsOffset: flatbuffers.Offset,\n        graphsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Attribute.startAttribute(builder);\n      Attribute.addName(builder, nameOffset);\n      Attribute.addDocString(builder, docStringOffset);\n      Attribute.addType(builder, type);\n      Attribute.addF(builder, f);\n      Attribute.addI(builder, i);\n      Attribute.addS(builder, sOffset);\n      Attribute.addT(builder, tOffset);\n      Attribute.addG(builder, gOffset);\n      Attribute.addFloats(builder, floatsOffset);\n      Attribute.addInts(builder, intsOffset);\n      Attribute.addStrings(builder, stringsOffset);\n      Attribute.addTensors(builder, tensorsOffset);\n      Attribute.addGraphs(builder, graphsOffset);\n      return Attribute.endAttribute(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Graph {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Graph\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Graph {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getSizePrefixedRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    initializers(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    initializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.ValueInfo= obj\n     * @returns onnxruntime.experimental.fbs.ValueInfo\n     */\n    nodeArgs(index: number, obj?: onnxruntime.experimental.fbs.ValueInfo): onnxruntime.experimental.fbs.ValueInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.ValueInfo())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeArgsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Node= obj\n     * @returns onnxruntime.experimental.fbs.Node\n     */\n    nodes(index: number, obj?: onnxruntime.experimental.fbs.Node): onnxruntime.experimental.fbs.Node|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Node())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    maxNodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.NodeEdge= obj\n     * @returns onnxruntime.experimental.fbs.NodeEdge\n     */\n    nodeEdges(index: number, obj?: onnxruntime.experimental.fbs.NodeEdge): onnxruntime.experimental.fbs.NodeEdge|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? (obj || new onnxruntime.experimental.fbs.NodeEdge())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SparseTensor= obj\n     * @returns onnxruntime.experimental.fbs.SparseTensor\n     */\n    sparseInitializers(index: number, obj?: onnxruntime.experimental.fbs.SparseTensor):\n        onnxruntime.experimental.fbs.SparseTensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SparseTensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    sparseInitializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startGraph(builder: flatbuffers.Builder) {\n      builder.startObject(8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset initializersOffset\n     */\n    static addInitializers(builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, initializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeArgsOffset\n     */\n    static addNodeArgs(builder: flatbuffers.Builder, nodeArgsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, nodeArgsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeArgsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeArgsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodesOffset\n     */\n    static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, nodesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number maxNodeIndex\n     */\n    static addMaxNodeIndex(builder: flatbuffers.Builder, maxNodeIndex: number) {\n      builder.addFieldInt32(3, maxNodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeEdgesOffset\n     */\n    static addNodeEdges(builder: flatbuffers.Builder, nodeEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, nodeEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeEdgesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sparseInitializersOffset\n     */\n    static addSparseInitializers(builder: flatbuffers.Builder, sparseInitializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, sparseInitializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSparseInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSparseInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endGraph(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createGraph(\n        builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset, nodeArgsOffset: flatbuffers.Offset,\n        nodesOffset: flatbuffers.Offset, maxNodeIndex: number, nodeEdgesOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset,\n        sparseInitializersOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Graph.startGraph(builder);\n      Graph.addInitializers(builder, initializersOffset);\n      Graph.addNodeArgs(builder, nodeArgsOffset);\n      Graph.addNodes(builder, nodesOffset);\n      Graph.addMaxNodeIndex(builder, maxNodeIndex);\n      Graph.addNodeEdges(builder, nodeEdgesOffset);\n      Graph.addInputs(builder, inputsOffset);\n      Graph.addOutputs(builder, outputsOffset);\n      Graph.addSparseInitializers(builder, sparseInitializersOffset);\n      return Graph.endGraph(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Model {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Model\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Model {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getSizePrefixedRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    irVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.OperatorSetId= obj\n     * @returns onnxruntime.experimental.fbs.OperatorSetId\n     */\n    opsetImport(index: number, obj?: onnxruntime.experimental.fbs.OperatorSetId):\n        onnxruntime.experimental.fbs.OperatorSetId|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.OperatorSetId())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    opsetImportLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerName(): string|null;\n    producerName(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerName(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerVersion(): string|null;\n    producerVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    modelVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    graph(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphDocString(): string|null;\n    graphDocString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphDocString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startModel(builder: flatbuffers.Builder) {\n      builder.startObject(9);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long irVersion\n     */\n    static addIrVersion(builder: flatbuffers.Builder, irVersion: flatbuffers.Long) {\n      builder.addFieldInt64(0, irVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opsetImportOffset\n     */\n    static addOpsetImport(builder: flatbuffers.Builder, opsetImportOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, opsetImportOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOpsetImportVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOpsetImportVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerNameOffset\n     */\n    static addProducerName(builder: flatbuffers.Builder, producerNameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, producerNameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerVersionOffset\n     */\n    static addProducerVersion(builder: flatbuffers.Builder, producerVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(3, producerVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long modelVersion\n     */\n    static addModelVersion(builder: flatbuffers.Builder, modelVersion: flatbuffers.Long) {\n      builder.addFieldInt64(5, modelVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphOffset\n     */\n    static addGraph(builder: flatbuffers.Builder, graphOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, graphOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphDocStringOffset\n     */\n    static addGraphDocString(builder: flatbuffers.Builder, graphDocStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, graphDocStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endModel(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createModel(\n        builder: flatbuffers.Builder, irVersion: flatbuffers.Long, opsetImportOffset: flatbuffers.Offset,\n        producerNameOffset: flatbuffers.Offset, producerVersionOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, modelVersion: flatbuffers.Long, docStringOffset: flatbuffers.Offset,\n        graphOffset: flatbuffers.Offset, graphDocStringOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Model.startModel(builder);\n      Model.addIrVersion(builder, irVersion);\n      Model.addOpsetImport(builder, opsetImportOffset);\n      Model.addProducerName(builder, producerNameOffset);\n      Model.addProducerVersion(builder, producerVersionOffset);\n      Model.addDomain(builder, domainOffset);\n      Model.addModelVersion(builder, modelVersion);\n      Model.addDocString(builder, docStringOffset);\n      Model.addGraph(builder, graphOffset);\n      Model.addGraphDocString(builder, graphDocStringOffset);\n      return Model.endModel(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class KernelCreateInfos {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns KernelCreateInfos\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): KernelCreateInfos {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos): KernelCreateInfos {\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getSizePrefixedRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos):\n        KernelCreateInfos {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    nodeIndices(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndicesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint32Array\n     */\n    nodeIndicesArray(): Uint32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ?\n          new Uint32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    kernelDefHashes(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readUint64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    kernelDefHashesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startKernelCreateInfos(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeIndicesOffset\n     */\n    static addNodeIndices(builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nodeIndicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeIndicesVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeIndicesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelDefHashesOffset\n     */\n    static addKernelDefHashes(builder: flatbuffers.Builder, kernelDefHashesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, kernelDefHashesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createKernelDefHashesVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startKernelDefHashesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endKernelCreateInfos(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createKernelCreateInfos(\n        builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset,\n        kernelDefHashesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      KernelCreateInfos.startKernelCreateInfos(builder);\n      KernelCreateInfos.addNodeIndices(builder, nodeIndicesOffset);\n      KernelCreateInfos.addKernelDefHashes(builder, kernelDefHashesOffset);\n      return KernelCreateInfos.endKernelCreateInfos(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SubGraphSessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SubGraphSessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SubGraphSessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState): SubGraphSessionState {\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getSizePrefixedRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState):\n        SubGraphSessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphId(): string|null;\n    graphId(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphId(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSubGraphSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphIdOffset\n     */\n    static addGraphId(builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, graphIdOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSubGraphSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      builder.requiredField(offset, 4);  // graph_id\n      return offset;\n    }\n\n    static createSubGraphSessionState(\n        builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SubGraphSessionState.startSubGraphSessionState(builder);\n      SubGraphSessionState.addGraphId(builder, graphIdOffset);\n      SubGraphSessionState.addSessionState(builder, sessionStateOffset);\n      return SubGraphSessionState.endSubGraphSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getSizePrefixedRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.KernelCreateInfos= obj\n     * @returns onnxruntime.experimental.fbs.KernelCreateInfos|null\n     */\n    kernels(obj?: onnxruntime.experimental.fbs.KernelCreateInfos): onnxruntime.experimental.fbs.KernelCreateInfos|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.KernelCreateInfos())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SubGraphSessionState= obj\n     * @returns onnxruntime.experimental.fbs.SubGraphSessionState\n     */\n    subGraphSessionStates(index: number, obj?: onnxruntime.experimental.fbs.SubGraphSessionState):\n        onnxruntime.experimental.fbs.SubGraphSessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SubGraphSessionState())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    subGraphSessionStatesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelsOffset\n     */\n    static addKernels(builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, kernelsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset subGraphSessionStatesOffset\n     */\n    static addSubGraphSessionStates(builder: flatbuffers.Builder, subGraphSessionStatesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, subGraphSessionStatesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSubGraphSessionStatesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSubGraphSessionStatesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSessionState(\n        builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset,\n        subGraphSessionStatesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SessionState.startSessionState(builder);\n      SessionState.addKernels(builder, kernelsOffset);\n      SessionState.addSubGraphSessionStates(builder, subGraphSessionStatesOffset);\n      return SessionState.endSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class InferenceSession {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns InferenceSession\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): InferenceSession {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getSizePrefixedRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @returns boolean\n     */\n    static bufferHasIdentifier(bb: flatbuffers.ByteBuffer): boolean {\n      return bb.__has_identifier('ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    ortVersion(): string|null;\n    ortVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    ortVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Model= obj\n     * @returns onnxruntime.experimental.fbs.Model|null\n     */\n    model(obj?: onnxruntime.experimental.fbs.Model): onnxruntime.experimental.fbs.Model|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Model())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startInferenceSession(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset ortVersionOffset\n     */\n    static addOrtVersion(builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, ortVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset modelOffset\n     */\n    static addModel(builder: flatbuffers.Builder, modelOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, modelOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endInferenceSession(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishSizePrefixedInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM', true);\n    }\n\n    static createInferenceSession(\n        builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset, modelOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      InferenceSession.startInferenceSession(builder);\n      InferenceSession.addOrtVersion(builder, ortVersionOffset);\n      InferenceSession.addModel(builder, modelOffset);\n      InferenceSession.addSessionState(builder, sessionStateOffset);\n      return InferenceSession.endInferenceSession(builder);\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\n\nimport {Session} from './session';\nimport {Tensor as OnnxjsTensor} from './tensor';\n\nexport class OnnxjsSessionHandler implements SessionHandler {\n  constructor(private session: Session) {\n    this.inputNames = this.session.inputNames;\n    this.outputNames = this.session.outputNames;\n  }\n\n  async dispose(): Promise<void> {}\n  inputNames: readonly string[];\n  outputNames: readonly string[];\n  async run(\n      feeds: SessionHandler.FeedsType, _fetches: SessionHandler.FetchesType,\n      _options: InferenceSession.RunOptions): Promise<SessionHandler.ReturnType> {\n    const inputMap = new Map<string, OnnxjsTensor>();\n    for (const name in feeds) {\n      if (Object.hasOwnProperty.call(feeds, name)) {\n        const feed = feeds[name];\n        inputMap.set(\n            name,\n            new OnnxjsTensor(\n                feed.dims, feed.type as OnnxjsTensor.DataType, undefined, undefined,\n                feed.data as OnnxjsTensor.NumberType));\n      }\n    }\n    const outputMap = await this.session.run(inputMap);\n    const output: SessionHandler.ReturnType = {};\n    outputMap.forEach((tensor, name) => {\n      output[name] = new Tensor(tensor.type, tensor.data, tensor.dims);\n    });\n    return output;\n  }\n  startProfiling(): void {\n    this.session.startProfiling();\n  }\n  endProfiling(): void {\n    this.session.endProfiling();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {readFile} from 'fs';\nimport {promisify} from 'util';\n\nimport {resolveBackend, SessionHandlerType} from './backend';\nimport {ExecutionPlan} from './execution-plan';\nimport {Graph} from './graph';\nimport {Profiler} from './instrument';\nimport {Model} from './model';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nexport declare namespace Session {\n  export interface Config {\n    backendHint?: string;\n    profiler?: Profiler.Config;\n  }\n\n  export interface Context {\n    profiler: Readonly<Profiler>;\n    graphInputTypes?: Tensor.DataType[];\n    graphInputDims?: Array<readonly number[]>;\n  }\n}\n\nexport class Session {\n  constructor(config: Session.Config = {}) {\n    this._initialized = false;\n    this.backendHint = config.backendHint;\n    this.profiler = Profiler.create(config.profiler);\n    this.context = {profiler: this.profiler, graphInputTypes: [], graphInputDims: []};\n  }\n\n  get inputNames(): readonly string[] {\n    return this._model.graph.getInputNames();\n  }\n  get outputNames(): readonly string[] {\n    return this._model.graph.getOutputNames();\n  }\n\n  startProfiling() {\n    this.profiler.start();\n  }\n\n  endProfiling() {\n    this.profiler.stop();\n  }\n\n  async loadModel(uri: string): Promise<void>;\n  async loadModel(buffer: ArrayBuffer, byteOffset?: number, length?: number): Promise<void>;\n  async loadModel(buffer: Uint8Array): Promise<void>;\n  async loadModel(arg: string|ArrayBuffer|Uint8Array, byteOffset?: number, length?: number): Promise<void> {\n    await this.profiler.event('session', 'Session.loadModel', async () => {\n      // resolve backend and session handler\n      const backend = await resolveBackend(this.backendHint);\n      this.sessionHandler = backend.createSessionHandler(this.context);\n\n      this._model = new Model();\n      if (typeof arg === 'string') {\n        const isOrtFormat = arg.endsWith('.ort');\n        if (typeof fetch === 'undefined') {\n          // node\n          const buf = await promisify(readFile)(arg);\n          this.initialize(buf, isOrtFormat);\n        } else {\n          // browser\n          const response = await fetch(arg);\n          const buf = await response.arrayBuffer();\n          this.initialize(new Uint8Array(buf), isOrtFormat);\n        }\n      } else if (!ArrayBuffer.isView(arg)) {\n        // load model from ArrayBuffer\n        const arr = new Uint8Array(arg, byteOffset || 0, length || arg.byteLength);\n        this.initialize(arr);\n      } else {\n        // load model from Uint8array\n        this.initialize(arg);\n      }\n    });\n  }\n\n  private initialize(modelProtoBlob: Uint8Array, isOrtFormat?: boolean): void {\n    if (this._initialized) {\n      throw new Error('already initialized');\n    }\n\n    this.profiler.event('session', 'Session.initialize', () => {\n      // load graph\n      const graphInitializer =\n          this.sessionHandler.transformGraph ? this.sessionHandler as Graph.Initializer : undefined;\n      this._model.load(modelProtoBlob, graphInitializer, isOrtFormat);\n\n      // graph is completely initialzied at this stage , let the interested handlers know\n      if (this.sessionHandler.onGraphInitialized) {\n        this.sessionHandler.onGraphInitialized(this._model.graph);\n      }\n      // initialize each operator in the graph\n      this.initializeOps(this._model.graph);\n\n      // instantiate an ExecutionPlan object to be used by the Session object\n      this._executionPlan = new ExecutionPlan(this._model.graph, this._ops, this.profiler);\n    });\n\n    this._initialized = true;\n  }\n\n  async run(inputs: Map<string, Tensor>|Tensor[]): Promise<Map<string, Tensor>> {\n    if (!this._initialized) {\n      throw new Error('session not initialized yet');\n    }\n\n    return this.profiler.event('session', 'Session.run', async () => {\n      const inputTensors = this.normalizeAndValidateInputs(inputs);\n\n      const outputTensors = await this._executionPlan.execute(this.sessionHandler, inputTensors);\n\n      return this.createOutput(outputTensors);\n    });\n  }\n\n  private normalizeAndValidateInputs(inputs: Map<string, Tensor>|Tensor[]): Tensor[] {\n    const modelInputNames = this._model.graph.getInputNames();\n\n    // normalize inputs\n    // inputs: Tensor[]\n    if (Array.isArray(inputs)) {\n      if (inputs.length !== modelInputNames.length) {\n        throw new Error(`incorrect input array length: expected ${modelInputNames.length} but got ${inputs.length}`);\n      }\n    }\n    // convert map to array\n    // inputs: Map<string, Tensor>\n    else {\n      if (inputs.size !== modelInputNames.length) {\n        throw new Error(`incorrect input map size: expected ${modelInputNames.length} but got ${inputs.size}`);\n      }\n\n      const sortedInputs = new Array<Tensor>(inputs.size);\n      let sortedInputsIndex = 0;\n      for (let i = 0; i < modelInputNames.length; ++i) {\n        const tensor = inputs.get(modelInputNames[i]);\n        if (!tensor) {\n          throw new Error(`missing input tensor for: '${name}'`);\n        }\n        sortedInputs[sortedInputsIndex++] = tensor;\n      }\n\n      inputs = sortedInputs;\n    }\n\n    // validate dims requirements\n    // First session run - graph input data is not cached for the session\n    if (!this.context.graphInputTypes || this.context.graphInputTypes.length === 0 || !this.context.graphInputDims ||\n        this.context.graphInputDims.length === 0) {\n      const modelInputIndices = this._model.graph.getInputIndices();\n      const modelValues = this._model.graph.getValues();\n\n      const graphInputDims = new Array<readonly number[]>(modelInputIndices.length);\n\n      for (let i = 0; i < modelInputIndices.length; ++i) {\n        const graphInput = modelValues[modelInputIndices[i]];\n        graphInputDims[i] = graphInput.type!.shape.dims;\n\n        // cached for second and subsequent runs.\n        // Some parts of the framework works on the assumption that the graph and types and shapes are static\n        this.context.graphInputTypes!.push(graphInput.type!.tensorType);\n        this.context.graphInputDims!.push(inputs[i].dims);\n      }\n\n      this.validateInputTensorDims(graphInputDims, inputs, true);\n    }\n\n    // Second and subsequent session runs - graph input data is cached for the session\n    else {\n      this.validateInputTensorDims(this.context.graphInputDims, inputs, false);\n    }\n\n    // validate types requirement\n    this.validateInputTensorTypes(this.context.graphInputTypes!, inputs);\n\n    return inputs;\n  }\n\n  private validateInputTensorTypes(graphInputTypes: Tensor.DataType[], givenInputs: Tensor[]) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedType = graphInputTypes[i];\n      const actualType = givenInputs[i].type;\n      if (expectedType !== actualType) {\n        throw new Error(`input tensor[${i}] check failed: expected type '${expectedType}' but got ${actualType}`);\n      }\n    }\n  }\n\n  private validateInputTensorDims(\n      graphInputDims: Array<readonly number[]>, givenInputs: Tensor[], noneDimSupported: boolean) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedDims = graphInputDims[i];\n      const actualDims = givenInputs[i].dims;\n      if (!this.compareTensorDims(expectedDims, actualDims, noneDimSupported)) {\n        throw new Error(`input tensor[${i}] check failed: expected shape '[${expectedDims.join(',')}]' but got [${\n            actualDims.join(',')}]`);\n      }\n    }\n  }\n\n  private compareTensorDims(expectedDims: readonly number[], actualDims: readonly number[], noneDimSupported: boolean):\n      boolean {\n    if (expectedDims.length !== actualDims.length) {\n      return false;\n    }\n\n    for (let i = 0; i < expectedDims.length; ++i) {\n      if (expectedDims[i] !== actualDims[i] && (!noneDimSupported || expectedDims[i] !== 0)) {\n        // data shape mis-match AND not a 'None' dimension.\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  private createOutput(outputTensors: Tensor[]): Map<string, Tensor> {\n    const modelOutputNames = this._model.graph.getOutputNames();\n    if (outputTensors.length !== modelOutputNames.length) {\n      throw new Error('expected number of outputs do not match number of generated outputs');\n    }\n\n    const output = new Map<string, Tensor>();\n    for (let i = 0; i < modelOutputNames.length; ++i) {\n      output.set(modelOutputNames[i], outputTensors[i]);\n    }\n\n    return output;\n  }\n\n  private initializeOps(graph: Graph): void {\n    const nodes = graph.getNodes();\n    this._ops = new Array(nodes.length);\n\n    for (let i = 0; i < nodes.length; i++) {\n      this._ops[i] = this.sessionHandler.resolve(nodes[i], this._model.opsets, graph);\n    }\n  }\n\n  private _model: Model;\n  private _initialized: boolean;\n\n  private _ops: Operator[];\n  private _executionPlan: ExecutionPlan;\n\n  private backendHint?: string;\n\n  private sessionHandler: SessionHandlerType;\n  private context: Session.Context;\n  private profiler: Readonly<Profiler>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Guid} from 'guid-typescript';\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\n\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {decodeUtf8String, ProtoUtil, ShapeUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Tensor {\n  export interface DataTypeMap {\n    bool: Uint8Array;\n    float32: Float32Array;\n    float64: Float64Array;\n    string: string[];\n    int8: Int8Array;\n    uint8: Uint8Array;\n    int16: Int16Array;\n    uint16: Uint16Array;\n    int32: Int32Array;\n    uint32: Uint32Array;\n  }\n\n  export type DataType = keyof DataTypeMap;\n\n  export type StringType = Tensor.DataTypeMap['string'];\n  export type BooleanType = Tensor.DataTypeMap['bool'];\n  export type IntegerType = Tensor.DataTypeMap['int8']|Tensor.DataTypeMap['uint8']|Tensor.DataTypeMap['int16']|\n                            Tensor.DataTypeMap['uint16']|Tensor.DataTypeMap['int32']|Tensor.DataTypeMap['uint32'];\n  export type FloatType = Tensor.DataTypeMap['float32']|Tensor.DataTypeMap['float64'];\n  export type NumberType = BooleanType|IntegerType|FloatType;\n\n  export type Id = Guid;\n}\n\ntype TensorData = Tensor.DataTypeMap[Tensor.DataType];\n\ntype DataProvider = (id: Tensor.Id) => TensorData;\ntype AsyncDataProvider = (id: Tensor.Id) => Promise<TensorData>;\n\nexport class Tensor {\n  /**\n   * get the underlying tensor data\n   */\n  get data(): TensorData {\n    if (this.cache === undefined) {\n      const data = this.dataProvider!(this.dataId);\n      if (data.length !== this.size) {\n        throw new Error('Length of data provided by the Data Provider is inconsistent with the dims of this Tensor.');\n      }\n      this.cache = data;\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the underlying string tensor data. Should only use when type is STRING\n   */\n  get stringData() {\n    if (this.type !== 'string') {\n      throw new TypeError('data type is not string');\n    }\n\n    return this.data as Tensor.StringType;\n  }\n\n  /**\n   * get the underlying integer tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL)\n   */\n  get integerData() {\n    switch (this.type) {\n      case 'uint8':\n      case 'int8':\n      case 'uint16':\n      case 'int16':\n      case 'int32':\n      case 'uint32':\n      case 'bool':\n        return this.data as Tensor.IntegerType;\n\n      default:\n        throw new TypeError('data type is not integer (uint8, int8, uint16, int16, int32, uint32, bool)');\n    }\n  }\n\n  /**\n   * get the underlying float tensor data. Should only use when type is one of the following: (FLOAT, DOUBLE)\n   */\n  get floatData() {\n    switch (this.type) {\n      case 'float32':\n      case 'float64':\n        return this.data as Tensor.FloatType;\n\n      default:\n        throw new TypeError('data type is not float (float32, float64)');\n    }\n  }\n\n  /**\n   * get the underlying number tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL, FLOAT, DOUBLE)\n   */\n  get numberData() {\n    if (this.type !== 'string') {\n      return this.data as Tensor.NumberType;\n    }\n    throw new TypeError('type cannot be non-number (string)');\n  }\n\n  /**\n   * get value of an element at the given indices\n   */\n  get(indices: readonly number[]): Tensor.DataTypeMap[Tensor.DataType][number] {\n    return this.data[ShapeUtil.indicesToOffset(indices, this.strides)];\n  }\n\n  /**\n   * set value of an element at the given indices\n   */\n  set(indices: readonly number[], value: Tensor.DataTypeMap[Tensor.DataType][number]) {\n    this.data[ShapeUtil.indicesToOffset(indices, this.strides)] = value;\n  }\n\n  /**\n   * get the underlying tensor data asynchronously\n   */\n  async getData(): Promise<TensorData> {\n    if (this.cache === undefined) {\n      this.cache = await this.asyncDataProvider!(this.dataId);\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the number of elements in the tensor\n   */\n  public readonly size: number;\n\n  private _strides: readonly number[];\n  /**\n   * get the strides for each dimension\n   */\n  get strides(): readonly number[] {\n    if (!this._strides) {\n      this._strides = ShapeUtil.computeStrides(this.dims);\n    }\n    return this._strides;\n  }\n\n  constructor(\n      /**\n       * get the dimensions of the tensor\n       */\n      public readonly dims: readonly number[],\n      /**\n       * get the type of the tensor\n       */\n      public readonly type: Tensor.DataType, private dataProvider?: DataProvider,\n      private asyncDataProvider?: AsyncDataProvider, private cache?: TensorData,\n      /**\n       * get the data ID that used to map to a tensor data\n       */\n      public readonly dataId: Guid = Guid.create()) {\n    this.size = ShapeUtil.validateDimsAndCalcSize(dims);\n    const size = this.size;\n    const empty = (dataProvider === undefined && asyncDataProvider === undefined && cache === undefined);\n\n    if (cache !== undefined) {\n      if (cache.length !== size) {\n        throw new RangeError('Input dims doesn\\'t match data length.');\n      }\n    }\n\n    if (type === 'string') {\n      if (cache !== undefined && (!Array.isArray(cache) || !cache.every(i => typeof i === 'string'))) {\n        throw new TypeError('cache should be a string array');\n      }\n\n      if (empty) {\n        this.cache = new Array<string>(size);\n      }\n    } else {\n      if (cache !== undefined) {\n        const constructor = dataviewConstructor(type);\n        if (!(cache instanceof constructor)) {\n          throw new TypeError(`cache should be type ${constructor.name}`);\n        }\n      }\n\n      if (empty) {\n        const buf = new ArrayBuffer(size * sizeof(type));\n        this.cache = createView(buf, type);\n      }\n    }\n  }\n\n  /**\n   * Construct new Tensor from a ONNX Tensor object\n   * @param tensorProto the ONNX Tensor\n   */\n  static fromProto(tensorProto: onnx.ITensorProto): Tensor {\n    if (!tensorProto) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const type = ProtoUtil.tensorDataTypeFromProto(tensorProto.dataType!);\n    const dims = ProtoUtil.tensorDimsFromProto(tensorProto.dims!);\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      tensorProto.stringData!.forEach((str, i) => {\n        value.data[i] = decodeUtf8String(str);\n      });\n\n    } else if (\n        tensorProto.rawData && typeof tensorProto.rawData.byteLength === 'number' &&\n        tensorProto.rawData.byteLength > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource =\n          new DataView(tensorProto.rawData.buffer, tensorProto.rawData.byteOffset, tensorProto.rawData.byteLength);\n      const elementSize = sizeofProto(tensorProto.dataType!);\n      const length = tensorProto.rawData.byteLength / elementSize;\n\n      if (tensorProto.rawData.byteLength % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, tensorProto.dataType!, i * elementSize);\n        dataDest[i] = n;\n      }\n    } else {\n      // populate value from array\n      let array: Array<number|Long>;\n      switch (tensorProto.dataType) {\n        case onnx.TensorProto.DataType.FLOAT:\n          array = tensorProto.floatData!;\n          break;\n        case onnx.TensorProto.DataType.INT32:\n        case onnx.TensorProto.DataType.INT16:\n        case onnx.TensorProto.DataType.UINT16:\n        case onnx.TensorProto.DataType.INT8:\n        case onnx.TensorProto.DataType.UINT8:\n        case onnx.TensorProto.DataType.BOOL:\n          array = tensorProto.int32Data!;\n          break;\n        case onnx.TensorProto.DataType.INT64:\n          array = tensorProto.int64Data!;\n          break;\n        case onnx.TensorProto.DataType.DOUBLE:\n          array = tensorProto.doubleData!;\n          break;\n        case onnx.TensorProto.DataType.UINT32:\n        case onnx.TensorProto.DataType.UINT64:\n          array = tensorProto.uint64Data!;\n          break;\n        default:\n          // should never run here\n          throw new Error('unspecific error');\n      }\n\n      if (array === null || array === undefined) {\n        throw new Error('failed to populate data from a tensorproto value');\n      }\n\n      const data = value.data;\n      if (data.length !== array.length) {\n        throw new Error('array length mismatch');\n      }\n\n      for (let i = 0; i < array.length; i++) {\n        const element = array[i];\n        if (Long.isLong(element)) {\n          data[i] = longToNumber(element, tensorProto.dataType);\n        } else {\n          data[i] = element;\n        }\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Construct new Tensor from raw data\n   * @param data the raw data object. Should be a string array for 'string' tensor, and the corresponding typed array\n   * for other types of tensor.\n   * @param dims the dimensions of the tensor\n   * @param type the type of the tensor\n   */\n  static fromData(data: Tensor.DataTypeMap[Tensor.DataType], dims: readonly number[], type: Tensor.DataType) {\n    return new Tensor(dims, type, undefined, undefined, data);\n  }\n\n  static fromOrtTensor(ortTensor: ortFbs.Tensor) {\n    if (!ortTensor) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const dims = ProtoUtil.tensorDimsFromORTFormat(ortTensor);\n    const type = ProtoUtil.tensorDataTypeFromProto(ortTensor.dataType());\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      for (let i = 0; i < ortTensor.stringDataLength(); i++) {\n        value.data[i] = ortTensor.stringData(i);\n      }\n\n    } else if (\n        ortTensor.rawDataArray() && typeof ortTensor.rawDataLength() === 'number' && ortTensor.rawDataLength() > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource = new DataView(\n          ortTensor.rawDataArray()!.buffer, ortTensor.rawDataArray()!.byteOffset, ortTensor.rawDataLength());\n      const elementSize = sizeofProto(ortTensor.dataType());\n      const length = ortTensor.rawDataLength() / elementSize;\n\n      if (ortTensor.rawDataLength() % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, ortTensor.dataType(), i * elementSize);\n        dataDest[i] = n;\n      }\n    }\n    return value;\n  }\n}\n\nfunction sizeof(type: Tensor.DataType): number {\n  switch (type) {\n    case 'bool':\n    case 'int8':\n    case 'uint8':\n      return 1;\n    case 'int16':\n    case 'uint16':\n      return 2;\n    case 'int32':\n    case 'uint32':\n    case 'float32':\n      return 4;\n    case 'float64':\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${type}`);\n  }\n}\n\nfunction sizeofProto(type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.UINT8:\n    case onnx.TensorProto.DataType.INT8:\n    case onnx.TensorProto.DataType.BOOL:\n      return 1;\n    case onnx.TensorProto.DataType.UINT16:\n    case onnx.TensorProto.DataType.INT16:\n      return 2;\n    case onnx.TensorProto.DataType.FLOAT:\n    case onnx.TensorProto.DataType.INT32:\n    case onnx.TensorProto.DataType.UINT32:\n      return 4;\n    case onnx.TensorProto.DataType.INT64:\n    case onnx.TensorProto.DataType.DOUBLE:\n    case onnx.TensorProto.DataType.UINT64:\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n\nfunction createView(dataBuffer: ArrayBuffer, type: Tensor.DataType) {\n  return new (dataviewConstructor(type))(dataBuffer);\n}\n\nfunction dataviewConstructor(type: Tensor.DataType) {\n  switch (type) {\n    case 'bool':\n    case 'uint8':\n      return Uint8Array;\n    case 'int8':\n      return Int8Array;\n    case 'int16':\n      return Int16Array;\n    case 'uint16':\n      return Uint16Array;\n    case 'int32':\n      return Int32Array;\n    case 'uint32':\n      return Uint32Array;\n    case 'float32':\n      return Float32Array;\n    case 'float64':\n      return Float64Array;\n    default:\n      // should never run to here\n      throw new Error('unspecified error');\n  }\n}\n\n// convert a long number to a 32-bit integer (cast-down)\nfunction longToNumber(i: Long, type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  // INT64, UINT32, UINT64\n  if (type === onnx.TensorProto.DataType.INT64 || type === ortFbs.TensorDataType.INT64) {\n    if (i.greaterThanOrEqual(2147483648) || i.lessThan(-2147483648)) {\n      throw new TypeError('int64 is not supported');\n    }\n  } else if (\n      type === onnx.TensorProto.DataType.UINT32 || type === ortFbs.TensorDataType.UINT32 ||\n      type === onnx.TensorProto.DataType.UINT64 || type === ortFbs.TensorDataType.UINT64) {\n    if (i.greaterThanOrEqual(4294967296) || i.lessThan(0)) {\n      throw new TypeError('uint64 is not supported');\n    }\n  } else {\n    throw new TypeError(`not a LONG type: ${onnx.TensorProto.DataType[type]}`);\n  }\n\n  return i.toNumber();\n}\n\n// read one value from TensorProto\nfunction readProto(view: DataView, type: onnx.TensorProto.DataType|ortFbs.TensorDataType, byteOffset: number): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.BOOL:\n    case onnx.TensorProto.DataType.UINT8:\n      return view.getUint8(byteOffset);\n    case onnx.TensorProto.DataType.INT8:\n      return view.getInt8(byteOffset);\n    case onnx.TensorProto.DataType.UINT16:\n      return view.getUint16(byteOffset, true);\n    case onnx.TensorProto.DataType.INT16:\n      return view.getInt16(byteOffset, true);\n    case onnx.TensorProto.DataType.FLOAT:\n      return view.getFloat32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT32:\n      return view.getInt32(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT32:\n      return view.getUint32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), false), type);\n    case onnx.TensorProto.DataType.DOUBLE:\n      return view.getFloat64(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), true), type);\n    default:\n      throw new Error(`cannot read from DataView for type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\n\nimport {Graph} from './graph';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {Tensor} from './tensor';\n\n// check the inputs shape before running an OP.\n// return true when the inputs pass the check\n// return false when the inputs do not fit the requirement\n// throw exception when fatal error or not implemented\nexport function checkInputsShape(inputs: Tensor[], ...expectedDimensions: number[]): boolean {\n  if (!inputs || inputs.length !== expectedDimensions.length) {\n    return false;\n  }\n  for (let i = 0; i < inputs.length; i++) {\n    if (!inputs[i].dims || inputs[i].dims.length !== expectedDimensions[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Evaluates the given expression and asserts error message if condition is unmet.\nexport function assert(expr: boolean, msg: () => string) {\n  if (!expr) {\n    throw new Error(typeof msg === 'string' ? msg : msg());\n  }\n}\n\nexport class ArrayUtil {\n  /**\n   * Verifies if 2 input arrays contain the same elements.\n   * @param n1 Array 1\n   * @param n2 Array 2\n   * @returns Whether these 2 are equal\n   */\n  static arraysEqual(\n      n1: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array,\n      n2: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array) {\n    if (n1.length !== n2.length) {\n      return false;\n    }\n    for (let i = 0; i < n1.length; i++) {\n      if (n1[i] !== n2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nexport class MatMulUtil {\n  /**\n   * Fix the input shapes for MatMul operation if they need fixing\n   * @param dimsA The shape of tensor A. Should be an array of positive integers\n   * @param dimsB The shape of tensor B. Should be an array of positive integers\n   * @returns A tuple containing the preprocessed input shapes as required by ONNX specifications\n   */\n  static preprocessInputShapes(dimsA: readonly number[], dimsB: readonly number[]):\n      [readonly number[], readonly number[]] {\n    // If the first argument is 1-D, it is promoted to a matrix by prepending\n    // a 1 to its dimensions. After matrix multiplication the prepended 1 is\n    // removed.\n    const a = (dimsA.length === 1) ? [1, dimsA[0]] : dimsA;\n\n    // If the second argument is 1-D, it is promoted to a matrix by appending\n    // a 1 to its dimensions. After matrix multiplication the appended 1 is\n    // removed.\n    const b = (dimsB.length === 1) ? [dimsB[0], 1] : dimsB;\n\n    return [a, b];\n  }\n\n  /**\n   * Fix the output shape computed for MatMul operation if it needs fixing\n   * @param outputShape The computed outputShape. Should be an array (atleast of length 2) of positive integers.\n   * This will be mutated.\n   * @param aRank The rank of tensor A.\n   * @param bRank The rank of tensor B.\n   */\n  static postprocessOutputShape(outputShape: number[], aRank: number, bRank: number) {\n    // Remove prepended dimension if first input is 1d\n    if (aRank === 1) {\n      // outputShape = outputShape.slice(0, outputShape.length - 2).concat(outputShape.slice(outputShape.length - 1));\n      outputShape.splice(outputShape.length - 2, 1);\n    }\n    // Remove appended dimension if second input is 1d\n    if (bRank === 1) {\n      outputShape.pop();\n    }\n  }\n\n  /**\n   * Calculate the expected shape when matrix multiplication\n   * @param a The shape of tensor A. Should be a tuple of 2 positive integers\n   * @param b The shape of tensor B. Should be a tuple of 2 positive integers\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcMatMulShape(a: [number, number], b: [number, number]): [number, number]|undefined {\n    return (a[1] !== b[0]) ? undefined : [a[0], b[1]];\n  }\n}\n\nexport class BroadcastUtil {\n  /**\n   * Calculate the expected shape when broadcasting 2 tensors\n   * @param a The shape of tensor A. Should be an array of positive integers\n   * @param b The shape of tensor B. Should be an array of positive integers\n   * @param isMatMul Whether the operation is MatMul\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcShape(adims: readonly number[], bdims: readonly number[], isMatMul = false): readonly number[]|undefined {\n    const arank = adims.length;\n    const brank = bdims.length;\n    if (arank === 0) {\n      return bdims;\n    }\n    if (brank === 0) {\n      return adims;\n    }\n    const crank = Math.max(adims.length, bdims.length);\n    const cdims = new Array<number>(crank);\n\n    // calculate the last 2 dimension if it is MatMul\n    if (isMatMul) {\n      if (arank < 2 || brank < 2) {\n        return undefined;\n      }\n      const cShapeMatMul =\n          MatMulUtil.calcMatMulShape([adims[arank - 2], adims[arank - 1]], [bdims[brank - 2], bdims[brank - 1]]);\n      if (cShapeMatMul === undefined) {\n        return undefined;\n      }\n      [cdims[crank - 2], cdims[crank - 1]] = cShapeMatMul;\n    }\n\n    for (let i = isMatMul ? 3 : 1; i <= crank; i++) {\n      const aLen = arank - i < 0 ? 1 : adims[arank - i];\n      const bLen = brank - i < 0 ? 1 : bdims[brank - i];\n\n      if (aLen !== bLen && aLen > 1 && bLen > 1) {\n        return undefined;\n      }\n      cdims[crank - i] = Math.max(aLen, bLen);\n    }\n\n    return cdims;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcas\n   * @returns The calculated indices that maps to the original tensor.\n   */\n  static index(broadcastedIndices: readonly number[], originalShape: readonly number[]): number[] {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same\n    // length as the broadcasted shape, and for each dimension the index should\n    // not be out of range.\n    const originalIndices = new Array(originalShape.length);\n    BroadcastUtil.fillIndex(broadcastedIndices, originalShape, originalIndices);\n    return originalIndices;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcast\n   * @param originalIndices The mapping of broadcastedIndices to the originalIndices (output parameter - will be\n   *     mutated).\n   */\n  static fillIndex(broadcastedIndices: readonly number[], originalShape: readonly number[], originalIndices: number[]) {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same length as the\n    // broadcasted shape, and for each dimension the index should not be out of range.\n    // NOTE 2: we assume the parameter originalIndices has the same length as the originalShape\n    const dimOffset = broadcastedIndices.length - originalShape.length;\n    for (let i = 0; i < originalShape.length; i++) {\n      originalIndices[i] = broadcastedIndices[dimOffset + i] % originalShape[i];\n    }\n  }\n\n  /**\n   * Perform the broadcasting operation on the specific operator\n   * @param a The input tensor A\n   * @param b The input tensor B\n   * @param op The operator lambda function\n   * @param inplace Whether to write the result back to A.\n   * @returns The result tensor, or undefined if input not broadcastable.\n   */\n  static calc(\n      a: Tensor, b: Tensor, op: (a: string|number, b: string|number) => (string | number), inplace: boolean,\n      resultType?: Tensor.DataType): Tensor|undefined {\n    const outputShape = BroadcastUtil.calcShape(a.dims, b.dims);\n\n    if (outputShape) {\n      if (inplace && !ShapeUtil.areEqual(outputShape, a.dims)) {\n        // B is not broadcastable to A, failed to calculate inplace.\n        return undefined;\n      }\n\n      const size = ShapeUtil.size(outputShape);\n      const c = inplace ? a : new Tensor(outputShape, resultType || a.type);\n\n      // both inputs are scalars\n      if (outputShape.length === 0) {\n        c.set([], op(a.get([]), b.get([])));\n      }\n\n      // atleast one input is a non-scalar\n      else {\n        const outputIndices = new Array<number>(outputShape.length);\n        const originalIndicesA = new Array(a.dims.length);\n        const originalIndicesB = new Array(b.dims.length);\n        let valA: string|number = 0;\n        let valB: string|number = 0;\n        let isAScalar = false;\n        let isBScalar = false;\n        if (a.dims.length === 0) {\n          valA = a.get([]);\n          isAScalar = true;\n        }\n        if (b.dims.length === 0) {\n          valB = b.get([]);\n          isBScalar = true;\n        }\n        let rest: number;\n        for (let i = 0; i < size; i++) {\n          // traversal indices\n          rest = i;\n          for (let j = outputShape.length - 1; j >= 0; j--) {\n            outputIndices[j] = rest % outputShape[j];\n            rest = Math.floor(rest / outputShape[j]);\n          }\n\n          if (!isAScalar) {\n            // map outputIndices (which is actually broadcasted) to the originalIndices\n            BroadcastUtil.fillIndex(outputIndices, a.dims, originalIndicesA);\n            valA = a.get(originalIndicesA);\n          }\n          if (!isBScalar) {\n            BroadcastUtil.fillIndex(outputIndices, b.dims, originalIndicesB);\n            valB = b.get(originalIndicesB);\n          }\n\n          c.set(outputIndices, op(valA, valB));\n        }\n      }\n\n      return c;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Determine if a shape is unidirectional broadcastable to another shape\n   * @param shape The input shape\n   * @param finalShape The desired shape after broadcasting\n   */\n  static isValidBroadcast(shape: readonly number[], finalShape: readonly number[]): boolean {\n    // align shape to the right\n    const inputRank = shape.length;\n    const finalRank = finalShape.length;\n    if (inputRank > finalRank) {\n      return false;\n    }\n    for (let i = 1; i <= inputRank; i++) {\n      if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determine the broadcasted dims in input shape based on the given output shape.\n   * Note that this function only returns the broadcasted dims.\n   * @param inputShape The input shape\n   * @param outputShape The output shape\n   * @returns The broadcasted dims in input shape.\n   */\n  static getBroadcastDims(inputShape: readonly number[], outputShape: readonly number[]): number[] {\n    const inRank = inputShape.length;\n    const dims: number[] = [];\n    for (let i = 0; i < inRank; i++) {\n      const dim = inRank - 1 - i;\n      const a = inputShape[dim] || 1;\n      const b = outputShape[outputShape.length - 1 - i] || 1;\n      if (b > 1 && a === 1) {\n        dims.unshift(dim);\n      }\n    }\n    return dims;\n  }\n}\n\n// copy array helper\n// mimics memcpy as much as possible\nexport function arrayCopyHelper(\n    target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n    blockSize: number) {\n  if (sourceIndex < 0 || sourceIndex >= source.length) {\n    throw new Error('sourceIndex out of bounds');\n  }\n  if (targetIndex < 0 || targetIndex >= target.length) {\n    throw new Error('targetIndex out of bounds');\n  }\n  if (sourceIndex + blockSize > source.length) {\n    throw new Error('source indices to be copied are outside bounds');\n  }\n  if (targetIndex + blockSize > target.length) {\n    throw new Error('target array is too small to hold result');\n  }\n\n  for (let offset = 0; offset < blockSize; offset++) {\n    target[targetIndex + offset] = source[sourceIndex + offset];\n  }\n}\n\nexport class GemmUtil {\n  // will make sure input shapes are compatible for this op\n  // and return back the shape of the output in the form of a tuple\n  // will throw exception if the input shapes are not compatible\n  static getShapeOfGemmResult(\n      leftShape: readonly number[], transLeft: boolean, rightShape: readonly number[], transRight: boolean,\n      biasShape?: readonly number[]): readonly number[] {\n    if (leftShape.length !== 2 || rightShape.length !== 2) {\n      throw new Error('shape need to be of size 2');\n    }\n\n    let M: number;\n    let K: number;\n    let N: number;\n\n    if (transLeft) {\n      M = leftShape[1];\n      K = leftShape[0];\n    } else {\n      M = leftShape[0];\n      K = leftShape[1];\n    }\n\n    let kDim = -1;\n\n    if (transRight) {\n      N = rightShape[0];\n      kDim = 1;\n    } else {\n      N = rightShape[1];\n      kDim = 0;\n    }\n\n    if (rightShape[kDim] !== K) {\n      throw new Error('dimension mismatch');\n    }\n\n    if (M <= 0 || N <= 0 || K <= 0) {\n      throw new Error('invalid shape specified');\n    }\n\n    if (biasShape && !BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {\n      throw new Error('gemm: invalid bias shape for broadcast');\n    }\n\n    return [M, N, K];\n  }\n}\n\nexport class ProtoUtil {\n  static tensorDataTypeFromProto(typeProto: onnx.TensorProto.DataType|\n                                 onnxruntime.experimental.fbs.TensorDataType): Tensor.DataType {\n    switch (typeProto) {\n      case onnx.TensorProto.DataType.INT8:\n        return 'int8';\n      case onnx.TensorProto.DataType.UINT8:\n        return 'uint8';\n      case onnx.TensorProto.DataType.BOOL:\n        return 'bool';\n      case onnx.TensorProto.DataType.INT16:\n        return 'int16';\n      case onnx.TensorProto.DataType.UINT16:\n        return 'uint16';\n      case onnx.TensorProto.DataType.INT32:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT32:\n        return 'uint32';\n      case onnx.TensorProto.DataType.FLOAT:\n        return 'float32';\n      case onnx.TensorProto.DataType.DOUBLE:\n        return 'float64';\n      case onnx.TensorProto.DataType.STRING:\n        return 'string';\n\n      // For INT64/UINT64, reduce their value to 32-bits.\n      // Should throw exception when overflow\n      case onnx.TensorProto.DataType.INT64:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT64:\n        return 'uint32';\n\n      default:\n        throw new Error(`unsupported data type: ${onnx.TensorProto.DataType[typeProto]}`);\n    }\n  }\n\n  static tensorDataTypeStringToEnum(type: string): onnx.TensorProto.DataType {\n    switch (type) {\n      case 'int8':\n        return onnx.TensorProto.DataType.INT8;\n      case 'uint8':\n        return onnx.TensorProto.DataType.UINT8;\n      case 'bool':\n        return onnx.TensorProto.DataType.BOOL;\n      case 'int16':\n        return onnx.TensorProto.DataType.INT16;\n      case 'uint16':\n        return onnx.TensorProto.DataType.UINT16;\n      case 'int32':\n        return onnx.TensorProto.DataType.INT32;\n      case 'uint32':\n        return onnx.TensorProto.DataType.UINT32;\n      case 'float32':\n        return onnx.TensorProto.DataType.FLOAT;\n      case 'float64':\n        return onnx.TensorProto.DataType.DOUBLE;\n      case 'string':\n        return onnx.TensorProto.DataType.STRING;\n      case 'int64':\n        return onnx.TensorProto.DataType.INT64;\n      case 'uint64':\n        return onnx.TensorProto.DataType.UINT64;\n\n      default:\n        throw new Error(`unsupported data type: ${type}`);\n    }\n  }\n\n  static tensorDimsFromProto(dims: Array<number|Long>): number[] {\n    // get rid of Long type for dims\n    return dims.map(d => Long.isLong(d) ? d.toNumber() : d);\n  }\n\n  static tensorValueTypeFromProto(valueType: onnx.TypeProto.ITensor): Graph.ValueType {\n    return {\n      tensorType: ProtoUtil.tensorDataTypeFromProto(valueType.elemType!),\n      shape: {dims: ProtoUtil.tensorDimsFromProto(valueType.shape!.dim!.map(d => d.dimValue!))}\n    };\n  }\n\n  static tensorDimsFromORTFormat(tensor: onnxruntime.experimental.fbs.Tensor) {\n    const dims = [];\n    for (let i = 0; i < tensor.dimsLength(); i++) {\n      dims.push(LongUtil.longToNumber(tensor.dims(i)!));\n    }\n    return dims;\n  }\n\n  static tensorAttributesFromORTFormat(node: onnxruntime.experimental.fbs.Node) {\n    const attributes = [];\n    for (let i = 0; i < node.attributesLength(); i++) {\n      attributes.push(node.attributes(i)!);\n    }\n    return attributes;\n  }\n}\n\nexport class LongUtil {\n  // This function is called to get a number from long type of data for attribute, dim, and ir version,\n  // which values are signed integers.\n  // To make it more generic, add an optional paramter to convert to a unsigned number.\n  static longToNumber(n: Long|flatbuffers.Long|number, unsigned?: boolean) {\n    if (Long.isLong(n)) {\n      return n.toNumber();\n    } else if (n instanceof flatbuffers.Long) {\n      return Long.fromValue({low: n.low, high: n.high, unsigned: unsigned ?? false}).toNumber();\n    }\n    return n;\n  }\n  static isLong(n: unknown) {\n    return Long.isLong(n) || n instanceof flatbuffers.Long;\n  }\n}\n\nexport class ShapeUtil {\n  static size(dims: readonly number[]): number {\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);\n  }\n\n  // `axis` inclusive\n  static sizeFromDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeFromDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);\n  }\n\n  // `axis` exclusive\n  static sizeToDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeToDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);\n  }\n\n  static getSizeFromDimensionRange(dims: readonly number[], start: number, end: number): number {\n    let size = 1;\n    for (let i = start; i < end; i++) {\n      // safety check as this method is called by multiple other methods requiring size.\n      // size cannot be 0 or negative.\n      if (dims[i] <= 0) {\n        throw new Error(\n            // eslint-disable-next-line max-len\n            'cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.');\n      }\n      size *= dims[i];\n    }\n    return size;\n  }\n\n  static computeStrides(dims: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [1];\n    }\n    const strides = new Array(rank);\n    strides[rank - 1] = 1;\n    strides[rank - 2] = dims[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * dims[i + 1];\n    }\n    return strides;\n  }\n\n  static transpose(dims: readonly number[]): readonly number[] {\n    const copy = dims.slice();\n    return copy.reverse();\n  }\n\n  static indicesToOffset(indices: readonly number[], strides: readonly number[], axis?: number): number {\n    if (axis === undefined) {\n      axis = indices.length;\n    }\n    let offset = 0;\n    for (let i = 0; i < axis; ++i) {\n      offset += strides[i] * indices[i];\n    }\n    return offset;\n  }\n\n  static offsetToIndices(offset: number, strides: readonly number[]): readonly number[] {\n    const rank = strides.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [offset * strides[0]];\n    }\n    const indices: number[] = new Array(strides.length);\n    for (let i = 0; i < indices.length - 1; ++i) {\n      indices[i] = Math.floor(offset / strides[i]);\n      offset -= indices[i] * strides[i];\n    }\n    indices[indices.length - 1] = offset;\n    return indices;\n  }\n\n  /**\n   * normailze axis of range [-r, r) into [0, r).\n   */\n  static normalizeAxis(axis: number, tensorRank: number): number {\n    if (axis < -tensorRank && axis >= tensorRank) {\n      throw new Error('unsupported axis for this operation.');\n    }\n    return axis < 0 ? axis + tensorRank : axis;\n  }\n\n  static normalizeAxes(axes: readonly number[], tensorRank: number): number[] {\n    return axes.map(x => this.normalizeAxis(x, tensorRank));\n  }\n\n  // Increment an index into a tensor (in lexicographic\n  // ordering), wrapping around the specified upper_bound.\n  /**\n   * Increment an index into a tensor (in lexicographic ordering), wrapping around the specified upper_bound.\n   * @param index Given index to increment (Will be mutated)\n   * @param dims The dimensions of the tensor for which the given index corresponds to\n   * @param axisToIncrementOn The 1-indexed axis to increment on. If undefined, axisToIncrementOn == rank\n   */\n  static incrementIndex(index: number[], dims: readonly number[], axisToIncrementOn?: number) {\n    if (dims.length === 0 || index.length === 0) {\n      throw new Error('Index incrementing unsupported for scalar Tensor');\n    }\n    if (axisToIncrementOn === undefined) {\n      axisToIncrementOn = dims.length;\n    } else {\n      if (axisToIncrementOn <= 0 || axisToIncrementOn > dims.length) {\n        throw new Error('Incorrect axis to increment on');\n      }\n    }\n\n    for (let k = axisToIncrementOn - 1; k >= 0; --k) {\n      index[k]++;\n      if (index[k] < dims[k]) {\n        break;\n      }\n      index[k] = 0;\n    }\n  }\n\n  /**\n   * Produces a new dimensions array based on the values in the 'originalDimensions' and 'shape' array\n   * Used in Reshape\n   * @param originalDims Original Shape array\n   * @param shapeHints array containing values to compute the new dimensions\n   * For example:\n   * originalDims = [2,2] and shapeHints = [0,-1] will return [2,2]\n   * originalDims = [2,2] and shapeHints = [4] will return [4]\n   * originalDims = [2,2] and shapeHints = [5] will throw an exception\n   * https://github.com/onnx/onnx/blob/main/docs/Operators.md#Reshape\n   */\n\n  static calculateReshapedDims(originalDims: readonly number[], shapeHints: ArrayLike<number>): number[] {\n    // reshape to a Scalar Tensor\n    if (shapeHints.length === 0) {\n      if (originalDims.length === 0 || ShapeUtil.size(originalDims) === 1) {\n        return [];\n      } else {\n        throw new Error('cannot reshape to a scalar Tensor');\n      }\n    }\n\n    const nDims = shapeHints.length;\n    const reshapedDims = new Array<number>(nDims);\n    let unknownDimension = -1;\n    let newTensorSize = 1;\n    for (let i = 0; i < nDims; i++) {\n      if (shapeHints[i] < -1) {\n        throw new Error('a dimension in shape hints cannot be less than -1');\n      }\n      if (shapeHints[i] === -1) {\n        if (unknownDimension !== -1) {\n          throw new Error('at most one dimension in shape hints can be -1');\n        }\n        unknownDimension = i;\n      } else {\n        if (shapeHints[i] === 0) {\n          if (i >= originalDims.length) {\n            throw new Error('the dimension with value zero exceeds the dimension size of the input tensor');\n          }\n          reshapedDims[i] = originalDims[i];\n        } else {\n          reshapedDims[i] = shapeHints[i];\n        }\n        newTensorSize *= reshapedDims[i];\n      }\n    }\n\n    const oldTensorSize = ShapeUtil.size(originalDims);\n    if (unknownDimension !== -1) {\n      if (oldTensorSize % newTensorSize !== 0) {\n        throw new Error(`the input tensor cannot be reshaped to the requested shape. Input shape: [${\n            originalDims}] Output shape: [${shapeHints}]`);\n      }\n      reshapedDims[unknownDimension] = oldTensorSize / newTensorSize;\n    }\n    // validate sizes from originalDims and reshapedDims match\n    else {\n      if (newTensorSize !== oldTensorSize) {\n        throw new Error('reshapedDims and originalDims don\\'t have matching sizes');\n      }\n    }\n    return reshapedDims;\n  }\n\n  /**\n   * Sorts a given array based on the indices in the Perm array\n   * Used in Transpose\n   * @param a Array to be sorted such as dims or strides\n   * @param perm Perm given; if null a will be reversed\n   */\n  static sortBasedOnPerm(a: readonly number[], perm?: readonly number[]): readonly number[] {\n    if (perm) {\n      return perm.map((v) => a[v]);\n    } else {\n      return a.slice().reverse();\n    }\n  }\n\n  /**\n   * Pads a given shape according to the padding values\n   * @param dims shape of the Tensor to be padded\n   * @param pad pad values\n   */\n  static padShape(dims: readonly number[], pad: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    return dims.map((v, i) => v + pad[i] + pad[i + rank]);\n  }\n\n  /**\n   * Determines if the two shapes are identical\n   * @param shape1\n   * @param shape2\n   */\n  static areEqual(shape1: readonly number[], shape2: readonly number[]): boolean {\n    if (shape1.length !== shape2.length) {\n      return false;\n    }\n    return shape1.every((v, i) => v === shape2[i]);\n  }\n\n  /**\n   * Validates if the given `dims` or `shape` is valid in ONNX.js context and returns data size\n   * @param dims - input `dims` that needs to be checked\n   */\n  static validateDimsAndCalcSize(dims: readonly number[]): number {\n    if (dims.length > 6) {\n      throw new TypeError('Only rank 0 to 6 is supported for tensor shape.');\n    }\n    let size = 1;\n    for (const n of dims) {\n      if (!Number.isInteger(n)) {\n        throw new TypeError(`Invalid shape: ${n} is not an integer`);\n      }\n      if (n < 0 || n > 2147483647) {\n        throw new TypeError(`Invalid shape: length ${n} is not allowed`);\n      }\n      size *= n;\n    }\n    return size;\n  }\n\n  /**\n   * Determines the shape of output tensor y = flatten(x, axis)\n   * @param dims - shape of input tensor\n   * @param axis - flatten axis, in the range [-r, r]\n   */\n  static flattenShape(dims: readonly number[], axis: number): readonly number[] {\n    if (axis < 0) {\n      axis += dims.length;\n    }\n    const total = dims.reduce((x, y) => x * y, 1);\n    const right = dims.slice(axis).reduce((x, y) => x * y, 1);\n    const outputDims = [total / right, right];\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = squeeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - squeeze axes\n   */\n  static squeezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>();\n\n    // sanity check\n    axes = ShapeUtil.normalizeAxes(axes, dims.length);\n\n    for (let i = 0; i < dims.length; i++) {\n      const inSqueezeList = axes.indexOf(i) >= 0;\n      if (inSqueezeList && dims[i] !== 1) {\n        throw new Error('squeeze an axis of size different than 1');\n      }\n\n      if ((axes.length === 0 && dims[i] > 1) || (axes.length > 0 && !inSqueezeList)) {\n        outputDims.push(dims[i]);\n      }\n    }\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = unsqueeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - unsqueeze axes\n   */\n  static unsqueezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>(dims.length + axes.length);\n\n    // initialize the array elements to 0\n    outputDims.fill(0);\n\n    // set all axes indices to 1 in outputDims and check for duplicates\n    for (let i = 0; i < axes.length; i++) {\n      const axis = ShapeUtil.normalizeAxis(axes[i], outputDims.length);\n      if (axis >= outputDims.length) {\n        throw new Error('\\'axes\\' has an out of range axis');\n      }\n      if (outputDims[axis] !== 0) {\n        throw new Error('\\'axes\\' has a duplicate axis');\n      }\n\n      outputDims[axis] = 1;\n    }\n\n    // fill in the zero entries of outputDims with the input tensor's shape\n    let inputDimsIterator = 0;\n    for (let i = 0; i < outputDims.length; i++) {\n      if (outputDims[i] === 0) {\n        outputDims[i] = dims[inputDimsIterator++];\n      }\n    }\n\n    // sanity check assertion. 'inputDimsIterator'\n    // should be equal to the length of 'dims'\n    if (inputDimsIterator !== dims.length) {\n      throw new Error('the unsqueezed dimension could not be established');\n    }\n\n    return outputDims;\n  }\n}\n\n// bunch of helper methods that do a variety of math operations\nexport class MathUtil {\n  // y = (x*x) + y\n  static sqr(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += Math.pow(source[sourceIndex + offset], 2);\n    }\n  }\n\n  // y = ax + y\n  static axpy(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, alpha: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += (alpha * source[sourceIndex + offset]);\n    }\n  }\n\n  // y = pow(x, b)\n  static powx(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, b: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = Math.pow(source[sourceIndex + offset], b);\n    }\n  }\n\n  // y = x * y\n  static mul(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = (source[sourceIndex + offset] * target[targetIndex + offset]);\n    }\n  }\n}\n\nexport class SplitUtil {\n  /**\n   * Calculates new Shapes from existing one and the splits given along the axis provides\n   * @param dims Shape of the Tensor to be splitted into two or more Shapes\n   * @param axis The dimension along which the Tensor will be split\n   * @param splits Offsets for the start of each split\n   */\n  static splitShape(dims: readonly number[], axis: number, split: number[], numOutputs?: number):\n      [number[][], number[]] {\n    if (split.length === 0) {\n      if (!numOutputs) {\n        throw new Error('need to know number of outputs when the \\'split\\' attribute is not specified');\n      }\n      SplitUtil.determineSplit(dims[axis], numOutputs, split);\n    }\n\n    const shapes: number[][] = [];\n    const offsets = [0];\n    for (let i = 0; i < split.length; ++i) {\n      if (i !== 0) {\n        offsets.push(offsets[i - 1] + split[i - 1]);\n      }\n      const shape = dims.slice();\n      shape[axis] = split[i];\n      shapes.push(shape);\n    }\n    return [shapes, offsets];\n  }\n\n  static determineSplit(numElementsAlongAxis: number, numOutputs: number, split: number[]) {\n    // If 'split' is not specified by the user, we need to partition the number of elements equally among the outputs\n    if (numElementsAlongAxis % numOutputs !== 0) {\n      throw new Error('cannot split tensor to equal sized parts');\n    }\n    for (let i = 0; i < numOutputs; ++i) {\n      split.push(numElementsAlongAxis / numOutputs);\n    }\n  }\n}\n\nexport class ReduceUtil {\n  /**\n   * Perform reduce operations on the specific operator\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduce(\n      a: Tensor, axes: number[], keepdims: boolean, op1: (b: number) => number,\n      op2: (a: number, b: number) => number): Tensor {\n    const dims = a.dims.slice(0);\n    // if axes is not set, perform reduce on all axes\n    if (axes.length === 0) {\n      dims.forEach((d, ind) => axes.push(ind));\n    }\n    // get a temporary broadcastable output shape\n    const outputDims = ReduceUtil.calcReduceShape(dims, axes, true);\n\n    // loop through the output and calculate result one by one\n    const size = ShapeUtil.size(outputDims);\n    const y = new Tensor(outputDims, a.type);\n    const strides = ShapeUtil.computeStrides(outputDims);\n    const inputStrides = ShapeUtil.computeStrides(dims);\n    const indicesY = new Array(dims.length);\n    for (let i = 0; i < size; i++) {\n      const indices = ShapeUtil.offsetToIndices(i, strides);\n      // map index\n      BroadcastUtil.fillIndex(indices, dims, indicesY);\n      y.set(\n          indices,\n          ReduceUtil.calcReduceByAxis(\n              a.numberData, axes, dims, 0, ShapeUtil.indicesToOffset(indicesY, inputStrides), op1, op2));\n    }\n\n    if (keepdims) {\n      return y;\n    } else {\n      // keepdims == 0, calculate the expected shape\n      return new Tensor(\n          ReduceUtil.calcReduceShape(dims, axes, keepdims), y.type, undefined, undefined, y.data, y.dataId);\n    }\n  }\n\n  /**\n   * Perform reduce operations on the specific operator on specific axes\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param dims The input dimension.\n   * @param curAxisInd Index in axes specifying the current dimension along\n   *      which the tensor will be reduced\n   * @param pos The current index of element to perform operation\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduceByAxis(\n      input: Tensor.NumberType, axes: number[], dims: number[], curAxisInd: number, pos: number,\n      op1: (b: number) => number, op2: (a: number, b: number) => number): number {\n    let res = 0;\n    if (curAxisInd >= axes.length) {\n      return op1(input[pos]);\n    }\n    const axis = axes[curAxisInd];\n    const step = axis >= dims.length ? 1 : ShapeUtil.size(dims.slice(axis + 1));\n    for (let i = 0; i < dims[axis]; i++) {\n      res = i === 0 ? ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2) :\n                      op2(res, ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2));\n      pos += step;\n    }\n    return res;\n  }\n\n  /**\n   * Calculate the expected shape of a reduce operation\n   * @param dims The input tensor dimension\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   */\n  static calcReduceShape(dims: readonly number[], axes: readonly number[], keepDims: boolean): number[] {\n    const outputDims = dims.slice();\n    for (let i = 0; i < axes.length; i++) {\n      if (keepDims) {\n        outputDims[axes[i]] = 1;\n      } else {\n        outputDims[axes[i]] = 0;\n      }\n    }\n    return outputDims.filter(dim => dim !== 0);\n  }\n}\n\nexport class PoolConvUtil {\n  /**\n   * Adjust the kernel, strides, pads to correct rank. Set to default value if not present\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   */\n  static adjustPoolAttributes(\n      isGlobalOperator: boolean, inputDims: readonly number[], kernelShape: number[], strides: number[],\n      dilations: number[], pads: number[]) {\n    if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {\n      throw new Error('length of specified kernel shapes should be 2 less than length of input dimensions');\n    }\n\n    if (isGlobalOperator) {\n      // adjust kernel shape to cover the input dims\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        if (dim >= kernelShape.length) {\n          kernelShape.push(inputDims[dim + 2]);\n        } else {\n          kernelShape[dim] = inputDims[dim + 2];\n        }\n      }\n    }\n\n    // adjust strides length to match kernel shape length\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < strides.length) {\n        if (strides[dim] < 0) {\n          throw new Error('strides should be greater than or equal to 1');\n        }\n      } else {\n        strides.push(1);\n      }\n    }\n\n    // adjust dilation value\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < dilations.length) {\n        if (dilations[dim] < 0) {\n          throw new Error('dilations should be greater than or equal to 1');\n        }\n      } else {\n        dilations.push(1);\n      }\n    }\n\n    // adjust pads length to match 2 * kernel shape length\n    for (let dim = 0; dim < kernelShape.length * 2; dim++) {\n      if (dim < pads.length) {\n        if (pads[dim] < 0) {\n          throw new Error('pad should be greater than or equal to 1');\n        }\n      } else {\n        pads.push(0);\n      }\n    }\n\n    // sanity checks for values in kernel shapes and pads\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (kernelShape[dim] <= 0) {\n        throw new Error('kernel shapes need to be greater than 0');\n      }\n\n      if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {\n        throw new Error('pads should be smaller than kernel');\n      }\n    }\n  }\n\n  // adjust pad values based on 'autoPad' attribute\n  static adjustPadsBasedOnAutoPad(\n      inputDims: readonly number[], strides: readonly number[], dilations: readonly number[],\n      kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (!autoPad) {\n      return;\n    }\n\n    if (pads.length !== 2 * (inputDims.length - 2)) {\n      throw new Error('length of pads should be twice the length of data dimensions');\n    }\n\n    if (strides.length !== (inputDims.length - 2)) {\n      throw new Error('length of strides should be the length of data dimensions');\n    }\n\n    if (kernelShape.length !== (inputDims.length - 2)) {\n      throw new Error('length of kernel shapes should be the length of data dimensions');\n    }\n\n    for (let dim = 0; dim < inputDims.length - 2; dim++) {\n      PoolConvUtil.adjustPadAndReturnShape(\n          inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n          autoPad);\n    }\n  }\n\n  /**\n   * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computePoolOutputShape(\n      isGlobalOperator: boolean, inputDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0) {\n      throw new Error('input shape must be of size greater than 0');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], inputDims[1]];\n\n    PoolConvUtil.computeShapeHelper(\n        isGlobalOperator, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  /**\n   * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param filterDims The filter tensor dimension. (inputs[1].dims)\n   * @param strides Stride along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computeConvOutputShape(\n      inputDims: readonly number[], filterDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0 || filterDims.length <= 0) {\n      throw new Error('invalid input tensor dims or invalid filter tensor dims');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], filterDims[0]];\n\n    PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels\n  // called by computePoolOutputShape() and computeConvOutputShape()\n  // adjust pads based on 'autoPad' attribute prior to shape computation\n  private static computeShapeHelper(\n      isGlobalOperator: boolean, inputDims: readonly number[], outputDims: number[], strides: readonly number[],\n      dilations: readonly number[], kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (isGlobalOperator) {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(1);\n      }\n    } else {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(PoolConvUtil.adjustPadAndReturnShape(\n            inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n            autoPad));\n      }\n    }\n  }\n\n  // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()\n  // adjusts pad value for given 'autoPad' string and computes output shape along a particular dimension\n  private static adjustPadAndReturnShape(\n      inSize: number, stride: number, dilation: number, kernel: number, pads: number[], padHeadIndex: number,\n      padTailIndex: number, autoPad?: string): number {\n    const dkernel = dilation * (kernel - 1) + 1;\n    if (autoPad && autoPad !== 'NOTSET') {\n      switch (autoPad) {\n        case 'VALID':\n          pads[padHeadIndex] = 0;\n          pads[padTailIndex] = 0;\n          return Math.floor(((inSize - dkernel) / stride) + 1);\n        case 'SAME_LOWER':\n        case 'SAME_UPPER':\n          if (dilation !== 1) {\n            throw new Error('Dilation not supported for SAME_UPPER or SAME_LOWER');\n          } else {\n            const legacyTargetSize = (inSize + stride - 1) / stride;\n            const padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;\n            pads[padHeadIndex] =\n                (autoPad === 'SAME_LOWER') ? Math.floor((padNeeded + 1) / 2) : Math.floor(padNeeded / 2);\n            pads[padTailIndex] = padNeeded - pads[padHeadIndex];\n            return Math.floor(((inSize + padNeeded - kernel) / stride) + 1);\n          }\n        default:\n          throw new Error('Unsupported AutoPad type');\n      }\n    } else {\n      return Math.floor(((inSize + pads[padHeadIndex] + pads[padTailIndex] - dkernel) / stride) + 1);\n    }\n  }\n}\n\nexport const MIN_CLIP = -3.4028234663852886e+38;\nexport const MAX_CLIP = 3.4028234663852886e+38;\n\nexport function decodeUtf8String(buffer: Uint8Array): string {\n  return new TextDecoder().decode(buffer);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\ninterface ExtraOptionsHandler {\n  (name: string, value: string): void;\n}\n\nexport const iterateExtraOptions =\n    (options: Record<string, unknown>, prefix: string, seen: WeakSet<Record<string, unknown>>,\n     handler: ExtraOptionsHandler): void => {\n      if (typeof options == 'object' && options !== null) {\n        if (seen.has(options)) {\n          throw new Error('Circular reference in options');\n        } else {\n          seen.add(options);\n        }\n      }\n\n      Object.entries(options).forEach(([key, value]) => {\n        const name = (prefix) ? prefix + key : key;\n        if (typeof value === 'object') {\n          iterateExtraOptions(value as Record<string, unknown>, name + '.', seen, handler);\n        } else if (typeof value === 'string' || typeof value === 'number') {\n          handler(name, value.toString());\n        } else if (typeof value === 'boolean') {\n          handler(name, (value) ? '1' : '0');\n        } else {\n          throw new Error(`Can't handle extra config type: ${typeof value}`);\n        }\n      });\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env, InferenceSession} from 'onnxruntime-common';\n\nimport {OrtWasmMessage, SerializableModeldata, SerializableSessionMetadata, SerializableTensor} from './proxy-messages';\nimport * as core from './wasm-core-impl';\nimport {initializeWebAssembly} from './wasm-factory';\n\nconst isProxy = (): boolean => !!env.wasm.proxy && typeof document !== 'undefined';\nlet proxyWorker: Worker|undefined;\nlet initializing = false;\nlet initialized = false;\nlet aborted = false;\n\n// resolve; reject\ntype PromiseCallbacks<T = void> = [(result: T) => void, (reason: unknown) => void];\n\nlet initWasmCallbacks: PromiseCallbacks;\nlet initOrtCallbacks: PromiseCallbacks;\nconst createSessionAllocateCallbacks: Array<PromiseCallbacks<SerializableModeldata>> = [];\nconst createSessionFinalizeCallbacks: Array<PromiseCallbacks<SerializableSessionMetadata>> = [];\nconst createSessionCallbacks: Array<PromiseCallbacks<SerializableSessionMetadata>> = [];\nconst releaseSessionCallbacks: Array<PromiseCallbacks<void>> = [];\nconst runCallbacks: Array<PromiseCallbacks<SerializableTensor[]>> = [];\nconst endProfilingCallbacks: Array<PromiseCallbacks<void>> = [];\n\nconst ensureWorker = (): void => {\n  if (initializing || !initialized || aborted || !proxyWorker) {\n    throw new Error('worker not ready');\n  }\n};\n\nconst onProxyWorkerMessage = (ev: MessageEvent<OrtWasmMessage>): void => {\n  switch (ev.data.type) {\n    case 'init-wasm':\n      initializing = false;\n      if (ev.data.err) {\n        aborted = true;\n        initWasmCallbacks[1](ev.data.err);\n      } else {\n        initialized = true;\n        initWasmCallbacks[0]();\n      }\n      break;\n    case 'init-ort':\n      if (ev.data.err) {\n        initOrtCallbacks[1](ev.data.err);\n      } else {\n        initOrtCallbacks[0]();\n      }\n      break;\n    case 'create_allocate':\n      if (ev.data.err) {\n        createSessionAllocateCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionAllocateCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'create_finalize':\n      if (ev.data.err) {\n        createSessionFinalizeCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionFinalizeCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'create':\n      if (ev.data.err) {\n        createSessionCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'release':\n      if (ev.data.err) {\n        releaseSessionCallbacks.shift()![1](ev.data.err);\n      } else {\n        releaseSessionCallbacks.shift()![0]();\n      }\n      break;\n    case 'run':\n      if (ev.data.err) {\n        runCallbacks.shift()![1](ev.data.err);\n      } else {\n        runCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'end-profiling':\n      if (ev.data.err) {\n        endProfilingCallbacks.shift()![1](ev.data.err);\n      } else {\n        endProfilingCallbacks.shift()![0]();\n      }\n      break;\n    default:\n  }\n};\n\nconst scriptSrc = typeof document !== 'undefined' ? (document?.currentScript as HTMLScriptElement)?.src : undefined;\n\nexport const initWasm = async(): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    if (initialized) {\n      return;\n    }\n    if (initializing) {\n      throw new Error('multiple calls to \\'initWasm()\\' detected.');\n    }\n    if (aborted) {\n      throw new Error('previous call to \\'initWasm()\\' failed.');\n    }\n\n    initializing = true;\n\n    // overwrite wasm filepaths\n    if (env.wasm.wasmPaths === undefined) {\n      if (scriptSrc && scriptSrc.indexOf('blob:') !== 0) {\n        env.wasm.wasmPaths = scriptSrc.substr(0, +(scriptSrc).lastIndexOf('/') + 1);\n      }\n    }\n\n    return new Promise<void>((resolve, reject) => {\n      proxyWorker?.terminate();\n      // eslint-disable-next-line @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports\n      proxyWorker = require('worker-loader?inline=no-fallback!./proxy-worker/main').default() as Worker;\n      proxyWorker.onmessage = onProxyWorkerMessage;\n      initWasmCallbacks = [resolve, reject];\n      const message: OrtWasmMessage = {type: 'init-wasm', in : env.wasm};\n      proxyWorker.postMessage(message);\n    });\n\n  } else {\n    return initializeWebAssembly(env.wasm);\n  }\n};\n\nexport const initOrt = async(numThreads: number, loggingLevel: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      initOrtCallbacks = [resolve, reject];\n      const message: OrtWasmMessage = {type: 'init-ort', in : {numThreads, loggingLevel}};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.initOrt(numThreads, loggingLevel);\n  }\n};\n\nexport const createSessionAllocate = async(model: Uint8Array): Promise<SerializableModeldata> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableModeldata>((resolve, reject) => {\n      createSessionAllocateCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'create_allocate', in : {model}};\n      proxyWorker!.postMessage(message, [model.buffer]);\n    });\n  } else {\n    return core.createSessionAllocate(model);\n  }\n};\n\nexport const createSessionFinalize = async(modeldata: SerializableModeldata, options?: InferenceSession.SessionOptions):\n    Promise<SerializableSessionMetadata> => {\n      if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n        ensureWorker();\n        return new Promise<SerializableSessionMetadata>((resolve, reject) => {\n          createSessionFinalizeCallbacks.push([resolve, reject]);\n          const message: OrtWasmMessage = {type: 'create_finalize', in : {modeldata, options}};\n          proxyWorker!.postMessage(message);\n        });\n      } else {\n        return core.createSessionFinalize(modeldata, options);\n      }\n    };\n\nexport const createSession =\n    async(model: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SerializableSessionMetadata> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableSessionMetadata>((resolve, reject) => {\n      createSessionCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'create', in : {model, options}};\n      proxyWorker!.postMessage(message, [model.buffer]);\n    });\n  } else {\n    return core.createSession(model, options);\n  }\n};\n\nexport const releaseSession = async(sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      releaseSessionCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'release', in : sessionId};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.releaseSession(sessionId);\n  }\n};\n\nexport const run = async(\n    sessionId: number, inputIndices: number[], inputs: SerializableTensor[], outputIndices: number[],\n    options: InferenceSession.RunOptions): Promise<SerializableTensor[]> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableTensor[]>((resolve, reject) => {\n      runCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'run', in : {sessionId, inputIndices, inputs, outputIndices, options}};\n      proxyWorker!.postMessage(message, core.extractTransferableBuffers(inputs));\n    });\n  } else {\n    return core.run(sessionId, inputIndices, inputs, outputIndices, options);\n  }\n};\n\nexport const endProfiling = async(sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      endProfilingCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'end-profiling', in : sessionId};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.endProfiling(sessionId);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from 'onnxruntime-common';\n\nimport {iterateExtraOptions} from './options-utils';\nimport {allocWasmString} from './string-utils';\nimport {getInstance} from './wasm-factory';\n\nexport const setRunOptions = (options: InferenceSession.RunOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let runOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const runOptions: InferenceSession.RunOptions = options || {};\n\n  try {\n    if (options?.logSeverityLevel === undefined) {\n      runOptions.logSeverityLevel = 2;  // Default to warning\n    } else if (\n        typeof options.logSeverityLevel !== 'number' || !Number.isInteger(options.logSeverityLevel) ||\n        options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\n    }\n\n    if (options?.logVerbosityLevel === undefined) {\n      runOptions.logVerbosityLevel = 0;  // Default to 0\n    } else if (typeof options.logVerbosityLevel !== 'number' || !Number.isInteger(options.logVerbosityLevel)) {\n      throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\n    }\n\n    if (options?.terminate === undefined) {\n      runOptions.terminate = false;\n    }\n\n    let tagDataOffset = 0;\n    if (options?.tag !== undefined) {\n      tagDataOffset = allocWasmString(options.tag, allocs);\n    }\n\n    runOptionsHandle = wasm._OrtCreateRunOptions(\n        runOptions.logSeverityLevel!, runOptions.logVerbosityLevel!, !!runOptions.terminate!, tagDataOffset);\n    if (runOptionsHandle === 0) {\n      throw new Error('Can\\'t create run options');\n    }\n\n    if (options?.extra !== undefined) {\n      iterateExtraOptions(options.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddRunConfigEntry(runOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          throw new Error(`Can't set a run config entry: ${key} - ${value}`);\n        }\n      });\n    }\n\n    return [runOptionsHandle, allocs];\n  } catch (e) {\n    if (runOptionsHandle !== 0) {\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\n    }\n    allocs.forEach(wasm._free);\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {readFile} from 'fs';\nimport {env, InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\nimport {promisify} from 'util';\n\nimport {SerializableModeldata} from './proxy-messages';\nimport {createSession, createSessionAllocate, createSessionFinalize, endProfiling, initOrt, releaseSession, run} from './proxy-wrapper';\n\nlet ortInit: boolean;\n\n\nconst getLogLevel = (logLevel: 'verbose'|'info'|'warning'|'error'|'fatal'): number => {\n  switch (logLevel) {\n    case 'verbose':\n      return 0;\n    case 'info':\n      return 1;\n    case 'warning':\n      return 2;\n    case 'error':\n      return 3;\n    case 'fatal':\n      return 4;\n    default:\n      throw new Error(`unsupported logging level: ${logLevel}`);\n  }\n};\n\n\nexport class OnnxruntimeWebAssemblySessionHandler implements SessionHandler {\n  private sessionId: number;\n\n  inputNames: string[];\n  outputNames: string[];\n\n  async createSessionAllocate(path: string): Promise<SerializableModeldata> {\n    // fetch model from url and move to wasm heap. The arraybufffer that held the http\n    // response is freed once we return\n    const response = await fetch(path);\n    const arrayBuffer = await response.arrayBuffer();\n    return createSessionAllocate(new Uint8Array(arrayBuffer));\n  }\n\n  async loadModel(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions): Promise<void> {\n    if (!ortInit) {\n      await initOrt(env.wasm.numThreads!, getLogLevel(env.logLevel!));\n      ortInit = true;\n    }\n\n    if (typeof pathOrBuffer === 'string') {\n      if (typeof fetch === 'undefined') {\n        // node\n        const model = await promisify(readFile)(pathOrBuffer);\n        [this.sessionId, this.inputNames, this.outputNames] = await createSession(model, options);\n      } else {\n        // browser\n        // fetch model and move to wasm heap.\n        const modelData: SerializableModeldata = await this.createSessionAllocate(pathOrBuffer);\n        // create the session\n        [this.sessionId, this.inputNames, this.outputNames] = await createSessionFinalize(modelData, options);\n      }\n    } else {\n      [this.sessionId, this.inputNames, this.outputNames] = await createSession(pathOrBuffer, options);\n    }\n  }\n\n  async dispose(): Promise<void> {\n    return releaseSession(this.sessionId);\n  }\n\n  async run(feeds: SessionHandler.FeedsType, fetches: SessionHandler.FetchesType, options: InferenceSession.RunOptions):\n      Promise<SessionHandler.ReturnType> {\n    const inputArray: Tensor[] = [];\n    const inputIndices: number[] = [];\n    Object.entries(feeds).forEach(kvp => {\n      const name = kvp[0];\n      const tensor = kvp[1];\n      const index = this.inputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid input '${name}'`);\n      }\n      inputArray.push(tensor);\n      inputIndices.push(index);\n    });\n\n    const outputIndices: number[] = [];\n    Object.entries(fetches).forEach(kvp => {\n      const name = kvp[0];\n      // TODO: support pre-allocated output\n      const index = this.outputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid output '${name}'`);\n      }\n      outputIndices.push(index);\n    });\n\n    const outputs =\n        await run(this.sessionId, inputIndices, inputArray.map(t => [t.type, t.dims, t.data]), outputIndices, options);\n\n    const result: SessionHandler.ReturnType = {};\n    for (let i = 0; i < outputs.length; i++) {\n      result[this.outputNames[outputIndices[i]]] = new Tensor(outputs[i][0], outputs[i][2], outputs[i][1]);\n    }\n    return result;\n  }\n\n  startProfiling(): void {\n    // TODO: implement profiling\n  }\n\n  endProfiling(): void {\n    void endProfiling(this.sessionId);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from 'onnxruntime-common';\n\nimport {iterateExtraOptions} from './options-utils';\nimport {allocWasmString} from './string-utils';\nimport {getInstance} from './wasm-factory';\n\nconst getGraphOptimzationLevel = (graphOptimizationLevel: string|unknown): number => {\n  switch (graphOptimizationLevel) {\n    case 'disabled':\n      return 0;\n    case 'basic':\n      return 1;\n    case 'extended':\n      return 2;\n    case 'all':\n      return 99;\n    default:\n      throw new Error(`unsupported graph optimization level: ${graphOptimizationLevel}`);\n  }\n};\n\nconst getExecutionMode = (executionMode: 'sequential'|'parallel'): number => {\n  switch (executionMode) {\n    case 'sequential':\n      return 0;\n    case 'parallel':\n      return 1;\n    default:\n      throw new Error(`unsupported execution mode: ${executionMode}`);\n  }\n};\n\nconst appendDefaultOptions = (options: InferenceSession.SessionOptions): void => {\n  if (!options.extra) {\n    options.extra = {};\n  }\n  if (!options.extra.session) {\n    options.extra.session = {};\n  }\n  const session = options.extra.session as Record<string, string>;\n  if (!session.use_ort_model_bytes_directly) {\n    // eslint-disable-next-line camelcase\n    session.use_ort_model_bytes_directly = '1';\n  }\n};\n\nconst setExecutionProviders =\n    (sessionOptionsHandle: number, executionProviders: readonly InferenceSession.ExecutionProviderConfig[],\n     allocs: number[]): void => {\n      for (const ep of executionProviders) {\n        let epName = typeof ep === 'string' ? ep : ep.name;\n\n        // check EP name\n        switch (epName) {\n          case 'xnnpack':\n            epName = 'XNNPACK';\n            break;\n          case 'wasm':\n          case 'cpu':\n            continue;\n          default:\n            throw new Error(`not supported EP: ${epName}`);\n        }\n\n        const epNameDataOffset = allocWasmString(epName, allocs);\n        if (getInstance()._OrtAppendExecutionProvider(sessionOptionsHandle, epNameDataOffset) !== 0) {\n          throw new Error(`Can't append execution provider: ${epName}`);\n        }\n      }\n    };\n\nexport const setSessionOptions = (options?: InferenceSession.SessionOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let sessionOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const sessionOptions: InferenceSession.SessionOptions = options || {};\n  appendDefaultOptions(sessionOptions);\n\n  try {\n    if (options?.graphOptimizationLevel === undefined) {\n      sessionOptions.graphOptimizationLevel = 'all';\n    }\n    const graphOptimizationLevel = getGraphOptimzationLevel(sessionOptions.graphOptimizationLevel!);\n\n    if (options?.enableCpuMemArena === undefined) {\n      sessionOptions.enableCpuMemArena = true;\n    }\n\n    if (options?.enableMemPattern === undefined) {\n      sessionOptions.enableMemPattern = true;\n    }\n\n    if (options?.executionMode === undefined) {\n      sessionOptions.executionMode = 'sequential';\n    }\n    const executionMode = getExecutionMode(sessionOptions.executionMode!);\n\n    let logIdDataOffset = 0;\n    if (options?.logId !== undefined) {\n      logIdDataOffset = allocWasmString(options.logId, allocs);\n    }\n\n    if (options?.logSeverityLevel === undefined) {\n      sessionOptions.logSeverityLevel = 2;  // Default to warning\n    } else if (\n        typeof options.logSeverityLevel !== 'number' || !Number.isInteger(options.logSeverityLevel) ||\n        options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\n    }\n\n    if (options?.logVerbosityLevel === undefined) {\n      sessionOptions.logVerbosityLevel = 0;  // Default to 0\n    } else if (typeof options.logVerbosityLevel !== 'number' || !Number.isInteger(options.logVerbosityLevel)) {\n      throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\n    }\n\n    if (options?.enableProfiling === undefined) {\n      sessionOptions.enableProfiling = false;\n    }\n\n    sessionOptionsHandle = wasm._OrtCreateSessionOptions(\n        graphOptimizationLevel, !!sessionOptions.enableCpuMemArena!, !!sessionOptions.enableMemPattern!, executionMode,\n        !!sessionOptions.enableProfiling!, 0, logIdDataOffset, sessionOptions.logSeverityLevel!,\n        sessionOptions.logVerbosityLevel!);\n    if (sessionOptionsHandle === 0) {\n      throw new Error('Can\\'t create session options');\n    }\n\n    if (options?.executionProviders) {\n      setExecutionProviders(sessionOptionsHandle, options.executionProviders, allocs);\n    }\n\n    if (options?.extra !== undefined) {\n      iterateExtraOptions(options.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          throw new Error(`Can't set a session config entry: ${key} - ${value}`);\n        }\n      });\n    }\n\n    return [sessionOptionsHandle, allocs];\n  } catch (e) {\n    if (sessionOptionsHandle !== 0) {\n      wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n    }\n    allocs.forEach(wasm._free);\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getInstance} from './wasm-factory';\n\nexport const allocWasmString = (data: string, allocs: number[]): number => {\n  const wasm = getInstance();\n\n  const dataLength = wasm.lengthBytesUTF8(data) + 1;\n  const dataOffset = wasm._malloc(dataLength);\n  wasm.stringToUTF8(data, dataOffset, dataLength);\n  allocs.push(dataOffset);\n\n  return dataOffset;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession, Tensor} from 'onnxruntime-common';\n\nimport {SerializableModeldata, SerializableSessionMetadata, SerializableTensor} from './proxy-messages';\nimport {setRunOptions} from './run-options';\nimport {setSessionOptions} from './session-options';\nimport {allocWasmString} from './string-utils';\nimport {getInstance} from './wasm-factory';\n\n/**\n * initialize ORT environment.\n * @param numThreads SetGlobalIntraOpNumThreads(numThreads)\n * @param loggingLevel CreateEnv(static_cast<OrtLoggingLevel>(logging_level))\n */\nexport const initOrt = (numThreads: number, loggingLevel: number): void => {\n  const errorCode = getInstance()._OrtInit(numThreads, loggingLevel);\n  if (errorCode !== 0) {\n    throw new Error(`Can't initialize onnxruntime. error code = ${errorCode}`);\n  }\n};\n\n/**\n *  tuple elements are: InferenceSession ID; inputNamesUTF8Encoded; outputNamesUTF8Encoded\n */\ntype SessionMetadata = [number, number[], number[]];\n\nconst activeSessions = new Map<number, SessionMetadata>();\n\n/**\n * create an instance of InferenceSession.\n * @returns the metadata of InferenceSession. 0-value handle for failure.\n */\nexport const createSessionAllocate = (model: Uint8Array): [number, number] => {\n  const wasm = getInstance();\n  const modelDataOffset = wasm._malloc(model.byteLength);\n  wasm.HEAPU8.set(model, modelDataOffset);\n  return [modelDataOffset, model.byteLength];\n};\n\nexport const createSessionFinalize =\n    (modelData: SerializableModeldata, options?: InferenceSession.SessionOptions): SerializableSessionMetadata => {\n      const wasm = getInstance();\n\n      let sessionHandle = 0;\n      let sessionOptionsHandle = 0;\n      let allocs: number[] = [];\n\n      try {\n        [sessionOptionsHandle, allocs] = setSessionOptions(options);\n\n        sessionHandle = wasm._OrtCreateSession(modelData[0], modelData[1], sessionOptionsHandle);\n        if (sessionHandle === 0) {\n          throw new Error('Can\\'t create a session');\n        }\n      } finally {\n        wasm._free(modelData[0]);\n        wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n        allocs.forEach(wasm._free);\n      }\n\n      const inputCount = wasm._OrtGetInputCount(sessionHandle);\n      const outputCount = wasm._OrtGetOutputCount(sessionHandle);\n\n      const inputNames = [];\n      const inputNamesUTF8Encoded = [];\n      const outputNames = [];\n      const outputNamesUTF8Encoded = [];\n      for (let i = 0; i < inputCount; i++) {\n        const name = wasm._OrtGetInputName(sessionHandle, i);\n        if (name === 0) {\n          throw new Error('Can\\'t get an input name');\n        }\n        inputNamesUTF8Encoded.push(name);\n        inputNames.push(wasm.UTF8ToString(name));\n      }\n      for (let i = 0; i < outputCount; i++) {\n        const name = wasm._OrtGetOutputName(sessionHandle, i);\n        if (name === 0) {\n          throw new Error('Can\\'t get an output name');\n        }\n        outputNamesUTF8Encoded.push(name);\n        outputNames.push(wasm.UTF8ToString(name));\n      }\n\n      activeSessions.set(sessionHandle, [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded]);\n      return [sessionHandle, inputNames, outputNames];\n    };\n\n\n/**\n * create an instance of InferenceSession.\n * @returns the metadata of InferenceSession. 0-value handle for failure.\n */\nexport const createSession =\n    (model: Uint8Array, options?: InferenceSession.SessionOptions): SerializableSessionMetadata => {\n      const modelData: SerializableModeldata = createSessionAllocate(model);\n      return createSessionFinalize(modelData, options);\n    };\n\nexport const releaseSession = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error('invalid session id');\n  }\n  const sessionHandle = session[0];\n  const inputNamesUTF8Encoded = session[1];\n  const outputNamesUTF8Encoded = session[2];\n\n  inputNamesUTF8Encoded.forEach(wasm._OrtFree);\n  outputNamesUTF8Encoded.forEach(wasm._OrtFree);\n  wasm._OrtReleaseSession(sessionHandle);\n  activeSessions.delete(sessionId);\n};\n\n/**\n * Copied from ONNX definition. Use this to drop dependency 'onnx_proto' to decrease compiled .js file size.\n */\nconst enum DataType {\n  undefined = 0,\n  float = 1,\n  uint8 = 2,\n  int8 = 3,\n  uint16 = 4,\n  int16 = 5,\n  int32 = 6,\n  int64 = 7,\n  string = 8,\n  bool = 9,\n  float16 = 10,\n  double = 11,\n  uint32 = 12,\n  uint64 = 13,\n  complex64 = 14,\n  complex128 = 15,\n  bfloat16 = 16\n}\n\n\nconst tensorDataTypeStringToEnum = (type: string): DataType => {\n  switch (type) {\n    case 'int8':\n      return DataType.int8;\n    case 'uint8':\n      return DataType.uint8;\n    case 'bool':\n      return DataType.bool;\n    case 'int16':\n      return DataType.int16;\n    case 'uint16':\n      return DataType.uint16;\n    case 'int32':\n      return DataType.int32;\n    case 'uint32':\n      return DataType.uint32;\n    case 'float32':\n      return DataType.float;\n    case 'float64':\n      return DataType.double;\n    case 'string':\n      return DataType.string;\n    case 'int64':\n      return DataType.int64;\n    case 'uint64':\n      return DataType.uint64;\n\n    default:\n      throw new Error(`unsupported data type: ${type}`);\n  }\n};\n\nconst tensorDataTypeEnumToString = (typeProto: DataType): Tensor.Type => {\n  switch (typeProto) {\n    case DataType.int8:\n      return 'int8';\n    case DataType.uint8:\n      return 'uint8';\n    case DataType.bool:\n      return 'bool';\n    case DataType.int16:\n      return 'int16';\n    case DataType.uint16:\n      return 'uint16';\n    case DataType.int32:\n      return 'int32';\n    case DataType.uint32:\n      return 'uint32';\n    case DataType.float:\n      return 'float32';\n    case DataType.double:\n      return 'float64';\n    case DataType.string:\n      return 'string';\n    case DataType.int64:\n      return 'int64';\n    case DataType.uint64:\n      return 'uint64';\n\n    default:\n      throw new Error(`unsupported data type: ${typeProto}`);\n  }\n};\n\nconst numericTensorTypeToTypedArray = (type: Tensor.Type): Float32ArrayConstructor|Uint8ArrayConstructor|\n    Int8ArrayConstructor|Uint16ArrayConstructor|Int16ArrayConstructor|Int32ArrayConstructor|BigInt64ArrayConstructor|\n    Uint8ArrayConstructor|Float64ArrayConstructor|Uint32ArrayConstructor|BigUint64ArrayConstructor => {\n      switch (type) {\n        case 'float32':\n          return Float32Array;\n        case 'uint8':\n          return Uint8Array;\n        case 'int8':\n          return Int8Array;\n        case 'uint16':\n          return Uint16Array;\n        case 'int16':\n          return Int16Array;\n        case 'int32':\n          return Int32Array;\n        case 'bool':\n          return Uint8Array;\n        case 'float64':\n          return Float64Array;\n        case 'uint32':\n          return Uint32Array;\n        case 'int64':\n          return BigInt64Array;\n        case 'uint64':\n          return BigUint64Array;\n        default:\n          throw new Error(`unsupported type: ${type}`);\n      }\n    };\n\n/**\n * perform inference run\n */\nexport const run =\n    (sessionId: number, inputIndices: number[], inputs: SerializableTensor[], outputIndices: number[],\n     options: InferenceSession.RunOptions): SerializableTensor[] => {\n      const wasm = getInstance();\n      const session = activeSessions.get(sessionId);\n      if (!session) {\n        throw new Error('invalid session id');\n      }\n      const sessionHandle = session[0];\n      const inputNamesUTF8Encoded = session[1];\n      const outputNamesUTF8Encoded = session[2];\n\n      const inputCount = inputIndices.length;\n      const outputCount = outputIndices.length;\n\n      let runOptionsHandle = 0;\n      let runOptionsAllocs: number[] = [];\n\n      const inputValues: number[] = [];\n      const inputAllocs: number[] = [];\n\n      try {\n        [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);\n\n        // create input tensors\n        for (let i = 0; i < inputCount; i++) {\n          const dataType = inputs[i][0];\n          const dims = inputs[i][1];\n          const data = inputs[i][2];\n\n          let dataOffset: number;\n          let dataByteLength: number;\n\n          if (Array.isArray(data)) {\n            // string tensor\n            dataByteLength = 4 * data.length;\n            dataOffset = wasm._malloc(dataByteLength);\n            inputAllocs.push(dataOffset);\n            let dataIndex = dataOffset / 4;\n            for (let i = 0; i < data.length; i++) {\n              if (typeof data[i] !== 'string') {\n                throw new TypeError(`tensor data at index ${i} is not a string`);\n              }\n              wasm.HEAPU32[dataIndex++] = allocWasmString(data[i], inputAllocs);\n            }\n          } else {\n            dataByteLength = data.byteLength;\n            dataOffset = wasm._malloc(dataByteLength);\n            inputAllocs.push(dataOffset);\n            wasm.HEAPU8.set(new Uint8Array(data.buffer, data.byteOffset, dataByteLength), dataOffset);\n          }\n\n          const stack = wasm.stackSave();\n          const dimsOffset = wasm.stackAlloc(4 * dims.length);\n          try {\n            let dimIndex = dimsOffset / 4;\n            dims.forEach(d => wasm.HEAP32[dimIndex++] = d);\n            const tensor = wasm._OrtCreateTensor(\n                tensorDataTypeStringToEnum(dataType), dataOffset, dataByteLength, dimsOffset, dims.length);\n            if (tensor === 0) {\n              throw new Error('Can\\'t create a tensor');\n            }\n            inputValues.push(tensor);\n          } finally {\n            wasm.stackRestore(stack);\n          }\n        }\n\n        const beforeRunStack = wasm.stackSave();\n        const inputValuesOffset = wasm.stackAlloc(inputCount * 4);\n        const inputNamesOffset = wasm.stackAlloc(inputCount * 4);\n        const outputValuesOffset = wasm.stackAlloc(outputCount * 4);\n        const outputNamesOffset = wasm.stackAlloc(outputCount * 4);\n\n        try {\n          let inputValuesIndex = inputValuesOffset / 4;\n          let inputNamesIndex = inputNamesOffset / 4;\n          let outputValuesIndex = outputValuesOffset / 4;\n          let outputNamesIndex = outputNamesOffset / 4;\n          for (let i = 0; i < inputCount; i++) {\n            wasm.HEAPU32[inputValuesIndex++] = inputValues[i];\n            wasm.HEAPU32[inputNamesIndex++] = inputNamesUTF8Encoded[inputIndices[i]];\n          }\n          for (let i = 0; i < outputCount; i++) {\n            wasm.HEAPU32[outputValuesIndex++] = 0;\n            wasm.HEAPU32[outputNamesIndex++] = outputNamesUTF8Encoded[outputIndices[i]];\n          }\n\n          // support RunOptions\n          let errorCode = wasm._OrtRun(\n              sessionHandle, inputNamesOffset, inputValuesOffset, inputCount, outputNamesOffset, outputCount,\n              outputValuesOffset, runOptionsHandle);\n\n          const output: SerializableTensor[] = [];\n\n          if (errorCode === 0) {\n            for (let i = 0; i < outputCount; i++) {\n              const tensor = wasm.HEAPU32[outputValuesOffset / 4 + i];\n\n              const beforeGetTensorDataStack = wasm.stackSave();\n              // stack allocate 4 pointer value\n              const tensorDataOffset = wasm.stackAlloc(4 * 4);\n\n              let type: Tensor.Type|undefined, dataOffset = 0;\n              try {\n                errorCode = wasm._OrtGetTensorData(\n                    tensor, tensorDataOffset, tensorDataOffset + 4, tensorDataOffset + 8, tensorDataOffset + 12);\n                if (errorCode !== 0) {\n                  throw new Error(`Can't access output tensor data. error code = ${errorCode}`);\n                }\n                let tensorDataIndex = tensorDataOffset / 4;\n                const dataType = wasm.HEAPU32[tensorDataIndex++];\n                dataOffset = wasm.HEAPU32[tensorDataIndex++];\n                const dimsOffset = wasm.HEAPU32[tensorDataIndex++];\n                const dimsLength = wasm.HEAPU32[tensorDataIndex++];\n                const dims = [];\n                for (let i = 0; i < dimsLength; i++) {\n                  dims.push(wasm.HEAPU32[dimsOffset / 4 + i]);\n                }\n                wasm._OrtFree(dimsOffset);\n\n                const size = dims.length === 0 ? 1 : dims.reduce((a, b) => a * b);\n                type = tensorDataTypeEnumToString(dataType);\n                if (type === 'string') {\n                  const stringData: string[] = [];\n                  let dataIndex = dataOffset / 4;\n                  for (let i = 0; i < size; i++) {\n                    const offset = wasm.HEAPU32[dataIndex++];\n                    const maxBytesToRead = i === size - 1 ? undefined : wasm.HEAPU32[dataIndex] - offset;\n                    stringData.push(wasm.UTF8ToString(offset, maxBytesToRead));\n                  }\n                  output.push([type, dims, stringData]);\n                } else {\n                  const typedArrayConstructor = numericTensorTypeToTypedArray(type);\n                  const data = new typedArrayConstructor(size);\n                  new Uint8Array(data.buffer, data.byteOffset, data.byteLength)\n                      .set(wasm.HEAPU8.subarray(dataOffset, dataOffset + data.byteLength));\n                  output.push([type, dims, data]);\n                }\n              } finally {\n                wasm.stackRestore(beforeGetTensorDataStack);\n                if (type === 'string' && dataOffset) {\n                  wasm._free(dataOffset);\n                }\n                wasm._OrtReleaseTensor(tensor);\n              }\n            }\n          }\n\n          if (errorCode === 0) {\n            return output;\n          } else {\n            throw new Error(`failed to call OrtRun(). error code = ${errorCode}.`);\n          }\n        } finally {\n          wasm.stackRestore(beforeRunStack);\n        }\n      } finally {\n        inputValues.forEach(wasm._OrtReleaseTensor);\n        inputAllocs.forEach(wasm._free);\n\n        wasm._OrtReleaseRunOptions(runOptionsHandle);\n        runOptionsAllocs.forEach(wasm._free);\n      }\n    };\n\n/**\n * end profiling\n */\nexport const endProfiling = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error('invalid session id');\n  }\n  const sessionHandle = session[0];\n\n  // profile file name is not used yet, but it must be freed.\n  const profileFileName = wasm._OrtEndProfiling(sessionHandle);\n  if (profileFileName === 0) {\n    throw new Error('Can\\'t get an profile file name');\n  }\n  wasm._OrtFree(profileFileName);\n};\n\nexport const extractTransferableBuffers = (tensors: readonly SerializableTensor[]): ArrayBufferLike[] => {\n  const buffers: ArrayBufferLike[] = [];\n  for (const tensor of tensors) {\n    const data = tensor[2];\n    if (!Array.isArray(data) && data.buffer) {\n      buffers.push(data.buffer);\n    }\n  }\n  return buffers;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\nimport * as path from 'path';\n\nimport {OrtWasmModule} from './binding/ort-wasm';\nimport {OrtWasmThreadedModule} from './binding/ort-wasm-threaded';\nimport ortWasmFactory from './binding/ort-wasm.js';\n\nconst ortWasmFactoryThreaded: EmscriptenModuleFactory<OrtWasmModule> =\n    // eslint-disable-next-line @typescript-eslint/no-require-imports\n    !BUILD_DEFS.DISABLE_WASM_THREAD ? require('./binding/ort-wasm-threaded.js') : ortWasmFactory;\n\nlet wasm: OrtWasmModule|undefined;\nlet initialized = false;\nlet initializing = false;\nlet aborted = false;\n\nconst isMultiThreadSupported = (): boolean => {\n  try {\n    // If 'SharedArrayBuffer' is not available, WebAssembly threads will not work.\n    if (typeof SharedArrayBuffer === 'undefined') {\n      return false;\n    }\n\n    // Test for transferability of SABs (for browsers. needed for Firefox)\n    // https://groups.google.com/forum/#!msg/mozilla.dev.platform/IHkBZlHETpA/dwsMNchWEQAJ\n    if (typeof MessageChannel !== 'undefined') {\n      new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));\n    }\n\n    // Test for WebAssembly threads capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing threaded instructions.\n    return WebAssembly.validate(new Uint8Array([\n      0, 97, 115, 109, 1, 0,  0,  0, 1, 4, 1,  96, 0,   0,  3, 2, 1,  0, 5,\n      4, 1,  3,   1,   1, 10, 11, 1, 9, 0, 65, 0,  254, 16, 2, 0, 26, 11\n    ]));\n  } catch (e) {\n    return false;\n  }\n};\n\nconst isSimdSupported = (): boolean => {\n  try {\n    // Test for WebAssembly SIMD capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing SIMD instructions.\n\n    // The binary data is generated from the following code by wat2wasm:\n    //\n    // (module\n    //   (type $t0 (func))\n    //   (func $f0 (type $t0)\n    //     (drop\n    //       (i32x4.dot_i16x8_s\n    //         (i8x16.splat\n    //           (i32.const 0))\n    //         (v128.const i32x4 0x00000000 0x00000000 0x00000000 0x00000000)))))\n\n    return WebAssembly.validate(new Uint8Array([\n      0,   97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 30, 1,   28,  0, 65, 0,\n      253, 15, 253, 12,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  253, 186, 1, 26, 11\n    ]));\n  } catch (e) {\n    return false;\n  }\n};\n\nconst getWasmFileName = (useSimd: boolean, useThreads: boolean) => {\n  if (useThreads) {\n    return useSimd ? 'ort-wasm-simd-threaded.wasm' : 'ort-wasm-threaded.wasm';\n  } else {\n    return useSimd ? 'ort-wasm-simd.wasm' : 'ort-wasm.wasm';\n  }\n};\n\nexport const initializeWebAssembly = async(flags: Env.WebAssemblyFlags): Promise<void> => {\n  if (initialized) {\n    return Promise.resolve();\n  }\n  if (initializing) {\n    throw new Error('multiple calls to \\'initializeWebAssembly()\\' detected.');\n  }\n  if (aborted) {\n    throw new Error('previous call to \\'initializeWebAssembly()\\' failed.');\n  }\n\n  initializing = true;\n\n  // wasm flags are already initialized\n  const timeout = flags.initTimeout!;\n  const numThreads = flags.numThreads!;\n  const simd = flags.simd!;\n\n  const useThreads = numThreads > 1 && isMultiThreadSupported();\n  const useSimd = simd && isSimdSupported();\n\n  const wasmPrefixOverride = typeof flags.wasmPaths === 'string' ? flags.wasmPaths : undefined;\n  const wasmFileName = getWasmFileName(false, useThreads);\n  const wasmOverrideFileName = getWasmFileName(useSimd, useThreads);\n  const wasmPathOverride = typeof flags.wasmPaths === 'object' ? flags.wasmPaths[wasmOverrideFileName] : undefined;\n\n  let isTimeout = false;\n\n  const tasks: Array<Promise<void>> = [];\n\n  // promise for timeout\n  if (timeout > 0) {\n    tasks.push(new Promise((resolve) => {\n      setTimeout(() => {\n        isTimeout = true;\n        resolve();\n      }, timeout);\n    }));\n  }\n\n  // promise for module initialization\n  tasks.push(new Promise((resolve, reject) => {\n    const factory = useThreads ? ortWasmFactoryThreaded : ortWasmFactory;\n    const config: Partial<OrtWasmModule> = {\n      locateFile: (fileName: string, scriptDirectory: string) => {\n        if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads && fileName.endsWith('.worker.js') &&\n            typeof Blob !== 'undefined') {\n          return URL.createObjectURL(new Blob(\n              [\n                // This require() function is handled by webpack to load file content of the corresponding .worker.js\n                // eslint-disable-next-line @typescript-eslint/no-require-imports\n                require('./binding/ort-wasm-threaded.worker.js')\n              ],\n              {type: 'text/javascript'}));\n        }\n\n        if (fileName === wasmFileName) {\n          const prefix: string = wasmPrefixOverride ?? scriptDirectory;\n          return wasmPathOverride ?? prefix + wasmOverrideFileName;\n        }\n\n        return scriptDirectory + fileName;\n      }\n    };\n\n    if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads) {\n      if (typeof Blob === 'undefined') {\n        config.mainScriptUrlOrBlob = path.join(__dirname, 'ort-wasm-threaded.js');\n      } else {\n        const scriptSourceCode = `var ortWasmThreaded=(function(){var _scriptDir;return ${factory.toString()}})();`;\n        config.mainScriptUrlOrBlob = new Blob([scriptSourceCode], {type: 'text/javascript'});\n      }\n    }\n\n    factory(config).then(\n        // wasm module initialized successfully\n        module => {\n          initializing = false;\n          initialized = true;\n          wasm = module;\n          resolve();\n        },\n        // wasm module failed to initialize\n        (what) => {\n          initializing = false;\n          aborted = true;\n          reject(what);\n        });\n  }));\n\n  await Promise.race(tasks);\n\n  if (isTimeout) {\n    throw new Error(`WebAssembly backend initializing failed due to timeout: ${timeout}ms`);\n  }\n};\n\nexport const getInstance = (): OrtWasmModule => {\n  if (initialized && wasm) {\n    return wasm;\n  }\n\n  throw new Error('WebAssembly is not initialized yet.');\n};\n\nexport const dispose = (): void => {\n  if (initialized && !initializing && !aborted) {\n    initializing = true;\n\n    (wasm as OrtWasmThreadedModule).PThread?.terminateAllThreads();\n    wasm = undefined;\n\n    initializing = false;\n    initialized = false;\n    aborted = true;\n  }\n};\n","\nimport worker from \"!!../../../node_modules/worker-loader/dist/runtime/inline.js\";\n\nexport default function Worker_fn() {\n  return worker(\"/*!\\n* ONNX Runtime Web v1.14.0\\n* Copyright (c) Microsoft Corporation. All rights reserved.\\n* Licensed under the MIT License.\\n*/\\n(()=>{var t={474:(t,e,n)=>{var _scriptDir,r=(_scriptDir=(_scriptDir=\\\"undefined\\\"!=typeof document&&document.currentScript?document.currentScript.src:void 0)||\\\"/index.js\\\",function(t){function e(){return j.buffer!=D&&N(j.buffer),P}function r(){return j.buffer!=D&&N(j.buffer),U}function a(){return j.buffer!=D&&N(j.buffer),F}function i(){return j.buffer!=D&&N(j.buffer),I}function o(){return j.buffer!=D&&N(j.buffer),W}var u,c,s;t=t||{},u||(u=void 0!==t?t:{}),u.ready=new Promise((function(t,e){c=t,s=e}));var l,f,p,h,d,y,b=Object.assign({},u),m=\\\"./this.program\\\",g=(t,e)=>{throw e},v=\\\"object\\\"==typeof window,w=\\\"function\\\"==typeof importScripts,_=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node,O=u.ENVIRONMENT_IS_PTHREAD||!1,A=\\\"\\\";function S(t){return u.locateFile?u.locateFile(t,A):A+t}if(_){let e;A=w?n(908).dirname(A)+\\\"/\\\":\\\"//\\\",y=()=>{d||(h=n(384),d=n(908))},l=function(t,e){return y(),t=d.normalize(t),h.readFileSync(t,e?void 0:\\\"utf8\\\")},p=t=>((t=l(t,!0)).buffer||(t=new Uint8Array(t)),t),f=(t,e,n)=>{y(),t=d.normalize(t),h.readFile(t,(function(t,r){t?n(t):e(r.buffer)}))},1<process.argv.length&&(m=process.argv[1].replace(/\\\\\\\\/g,\\\"/\\\")),process.argv.slice(2),process.on(\\\"uncaughtException\\\",(function(t){if(!(t instanceof ct))throw t})),process.on(\\\"unhandledRejection\\\",(function(t){throw t})),g=(t,e)=>{if(Q())throw process.exitCode=t,e;e instanceof ct||x(\\\"exiting due to exception: \\\"+e),process.exit(t)},u.inspect=function(){return\\\"[Emscripten Module object]\\\"};try{e=n(925)}catch(t){throw console.error('The \\\"worker_threads\\\" module is not supported in this node.js build - perhaps a newer version is needed?'),t}n.g.Worker=e.Worker}else(v||w)&&(w?A=self.location.href:\\\"undefined\\\"!=typeof document&&document.currentScript&&(A=document.currentScript.src),_scriptDir&&(A=_scriptDir),A=0!==A.indexOf(\\\"blob:\\\")?A.substr(0,A.replace(/[?#].*/,\\\"\\\").lastIndexOf(\\\"/\\\")+1):\\\"\\\",_||(l=t=>{var e=new XMLHttpRequest;return e.open(\\\"GET\\\",t,!1),e.send(null),e.responseText},w&&(p=t=>{var e=new XMLHttpRequest;return e.open(\\\"GET\\\",t,!1),e.responseType=\\\"arraybuffer\\\",e.send(null),new Uint8Array(e.response)}),f=(t,e,n)=>{var r=new XMLHttpRequest;r.open(\\\"GET\\\",t,!0),r.responseType=\\\"arraybuffer\\\",r.onload=()=>{200==r.status||0==r.status&&r.response?e(r.response):n()},r.onerror=n,r.send(null)}));_&&\\\"undefined\\\"==typeof performance&&(n.g.performance=n(953).performance);var T=console.log.bind(console),E=console.warn.bind(console);_&&(y(),T=t=>h.writeSync(1,t+\\\"\\\\n\\\"),E=t=>h.writeSync(2,t+\\\"\\\\n\\\"));var M,C=u.print||T,x=u.printErr||E;Object.assign(u,b),b=null,u.thisProgram&&(m=u.thisProgram),u.quit&&(g=u.quit),u.wasmBinary&&(M=u.wasmBinary);var R=u.noExitRuntime||!1;\\\"object\\\"!=typeof WebAssembly&&at(\\\"no native wasm support detected\\\");var j,k,D,P,U,F,I,W,H=!1,L=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf8\\\"):void 0;function z(t,e,n){var r=(e>>>=0)+n;for(n=e;t[n]&&!(n>=r);)++n;if(16<n-e&&t.buffer&&L)return L.decode(t.buffer instanceof SharedArrayBuffer?t.slice(e,n):t.subarray(e,n));for(r=\\\"\\\";e<n;){var a=t[e++];if(128&a){var i=63&t[e++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|i);else{var o=63&t[e++];65536>(a=224==(240&a)?(15&a)<<12|i<<6|o:(7&a)<<18|i<<12|o<<6|63&t[e++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r}function Y(t,e){return(t>>>=0)?z(r(),t,e):\\\"\\\"}function B(t,e,n,r){if(!(0<r))return 0;var a=n>>>=0;r=n+r-1;for(var i=0;i<t.length;++i){var o=t.charCodeAt(i);if(55296<=o&&57343>=o&&(o=65536+((1023&o)<<10)|1023&t.charCodeAt(++i)),127>=o){if(n>=r)break;e[n++>>>0]=o}else{if(2047>=o){if(n+1>=r)break;e[n++>>>0]=192|o>>6}else{if(65535>=o){if(n+2>=r)break;e[n++>>>0]=224|o>>12}else{if(n+3>=r)break;e[n++>>>0]=240|o>>18,e[n++>>>0]=128|o>>12&63}e[n++>>>0]=128|o>>6&63}e[n++>>>0]=128|63&o}}return e[n>>>0]=0,n-a}function G(t){for(var e=0,n=0;n<t.length;++n){var r=t.charCodeAt(n);127>=r?e++:2047>=r?e+=2:55296<=r&&57343>=r?(e+=4,++n):e+=3}return e}function N(t){D=t,u.HEAP8=P=new Int8Array(t),u.HEAP16=new Int16Array(t),u.HEAP32=F=new Int32Array(t),u.HEAPU8=U=new Uint8Array(t),u.HEAPU16=new Uint16Array(t),u.HEAPU32=I=new Uint32Array(t),u.HEAPF32=new Float32Array(t),u.HEAPF64=W=new Float64Array(t)}O&&(D=u.buffer);var V=u.INITIAL_MEMORY||16777216;if(O)j=u.wasmMemory,D=u.buffer;else if(u.wasmMemory)j=u.wasmMemory;else if(!((j=new WebAssembly.Memory({initial:V/65536,maximum:65536,shared:!0})).buffer instanceof SharedArrayBuffer))throw x(\\\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\\\"),_&&console.log(\\\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and also use a recent version)\\\"),Error(\\\"bad memory\\\");j&&(D=j.buffer),V=D.byteLength,N(D);var $,q=[],X=[],J=[],Z=[];function Q(){return R||!1}function K(){var t=u.preRun.shift();q.unshift(t)}var tt,et=0,nt=null,rt=null;function at(t){throw O?postMessage({cmd:\\\"onAbort\\\",arg:t}):u.onAbort&&u.onAbort(t),x(t=\\\"Aborted(\\\"+t+\\\")\\\"),H=!0,t=new WebAssembly.RuntimeError(t+\\\". Build with -sASSERTIONS for more info.\\\"),s(t),t}function it(){return tt.startsWith(\\\"data:application/octet-stream;base64,\\\")}function ot(){var t=tt;try{if(t==tt&&M)return new Uint8Array(M);if(p)return p(t);throw\\\"both async and sync fetching of the wasm failed\\\"}catch(t){at(t)}}tt=\\\"ort-wasm-threaded.wasm\\\",it()||(tt=S(tt));var ut={};function ct(t){this.name=\\\"ExitStatus\\\",this.message=\\\"Program terminated with exit(\\\"+t+\\\")\\\",this.status=t}function st(t){(t=ht.Vb[t])||at(),ht.mc(t)}function lt(t){var e=ht.Cc();if(!e)return 6;ht.ac.push(e),ht.Vb[t.Ub]=e,e.Ub=t.Ub;var n={cmd:\\\"run\\\",start_routine:t.Ic,arg:t.zc,pthread_ptr:t.Ub};return e.$b=()=>{n.time=performance.now(),e.postMessage(n,t.Nc)},e.loaded&&(e.$b(),delete e.$b),0}function ft(t){if(O)return $t(1,1,t);Q()||(ht.oc(),u.onExit&&u.onExit(t),H=!0),g(t,new ct(t))}function pt(t,e){if(!e&&O)throw bt(t),\\\"unwind\\\";Q()||O||(me(),dt(J),be(0),re[1].length&&ae(1,10),re[2].length&&ae(2,10),ht.oc()),ft(t)}var ht={Yb:[],ac:[],qc:[],Vb:{},fc:function(){O&&ht.Ec()},Pc:function(){},Ec:function(){ht.receiveObjectTransfer=ht.Gc,ht.threadInitTLS=ht.pc,ht.setExitStatus=ht.nc,R=!1},nc:function(){},oc:function(){for(var t of Object.values(ht.Vb))ht.mc(t);for(t of ht.Yb)t.terminate();ht.Yb=[]},mc:function(t){var e=t.Ub;delete ht.Vb[e],ht.Yb.push(t),ht.ac.splice(ht.ac.indexOf(t),1),t.Ub=0,Oe(e)},Gc:function(){},pc:function(){ht.qc.forEach((t=>t()))},Fc:function(t,e){t.onmessage=n=>{var r=(n=n.data).cmd;if(t.Ub&&(ht.Bc=t.Ub),n.targetThread&&n.targetThread!=he()){var a=ht.Vb[n.Qc];a?a.postMessage(n,n.transferList):x('Internal error! Worker sent a message \\\"'+r+'\\\" to target pthread '+n.targetThread+\\\", but that thread no longer exists!\\\")}else\\\"processProxyingQueue\\\"===r?zt(n.queue):\\\"spawnThread\\\"===r?lt(n):\\\"cleanupThread\\\"===r?st(n.thread):\\\"killThread\\\"===r?(n=n.thread,r=ht.Vb[n],delete ht.Vb[n],r.terminate(),Oe(n),ht.ac.splice(ht.ac.indexOf(r),1),r.Ub=0):\\\"cancelThread\\\"===r?ht.Vb[n.thread].postMessage({cmd:\\\"cancel\\\"}):\\\"loaded\\\"===r?(t.loaded=!0,e&&e(t),t.$b&&(t.$b(),delete t.$b)):\\\"print\\\"===r?C(\\\"Thread \\\"+n.threadId+\\\": \\\"+n.text):\\\"printErr\\\"===r?x(\\\"Thread \\\"+n.threadId+\\\": \\\"+n.text):\\\"alert\\\"===r?alert(\\\"Thread \\\"+n.threadId+\\\": \\\"+n.text):\\\"setimmediate\\\"===n.target?t.postMessage(n):\\\"onAbort\\\"===r?u.onAbort&&u.onAbort(n.arg):r&&x(\\\"worker sent an unknown command \\\"+r);ht.Bc=void 0},t.onerror=t=>{throw x(\\\"worker sent an error! \\\"+t.filename+\\\":\\\"+t.lineno+\\\": \\\"+t.message),t},_&&(t.on(\\\"message\\\",(function(e){t.onmessage({data:e})})),t.on(\\\"error\\\",(function(e){t.onerror(e)})),t.on(\\\"detachedExit\\\",(function(){}))),t.postMessage({cmd:\\\"load\\\",urlOrBlob:u.mainScriptUrlOrBlob||_scriptDir,wasmMemory:j,wasmModule:k})},yc:function(){var t=S(\\\"ort-wasm-threaded.worker.js\\\");ht.Yb.push(new Worker(t))},Cc:function(){return 0==ht.Yb.length&&(ht.yc(),ht.Fc(ht.Yb[0])),ht.Yb.pop()}};function dt(t){for(;0<t.length;)t.shift()(u)}function yt(t){var e=Ee();return t=t(),Me(e),t}function bt(t){if(O)return $t(2,0,t);try{pt(t)}catch(t){t instanceof ct||\\\"unwind\\\"==t||g(1,t)}}u.PThread=ht,u.establishStackSpace=function(){var t=he(),e=a()[t+44>>2>>>0];t=a()[t+48>>2>>>0],Te(e,e-t),Me(e)};var mt=[];function gt(t){var e=mt[t];return e||(t>=mt.length&&(mt.length=t+1),mt[t]=e=$.get(t)),e}u.invokeEntryPoint=function(t,e){t=gt(t)(e),Q()?ht.nc(t):Ae(t)};var vt,wt,_t=[],Ot=0,At=0;function St(t){this.Zb=t,this.Sb=t-24,this.xc=function(t){i()[this.Sb+4>>2>>>0]=t},this.bc=function(){return i()[this.Sb+4>>2>>>0]},this.wc=function(t){i()[this.Sb+8>>2>>>0]=t},this.Dc=function(){return i()[this.Sb+8>>2>>>0]},this.rc=function(){a()[this.Sb>>2>>>0]=0},this.hc=function(t){t=t?1:0,e()[this.Sb+12>>0>>>0]=t},this.uc=function(){return 0!=e()[this.Sb+12>>0>>>0]},this.ic=function(t){t=t?1:0,e()[this.Sb+13>>0>>>0]=t},this.kc=function(){return 0!=e()[this.Sb+13>>0>>>0]},this.fc=function(t,e){this.cc(0),this.xc(t),this.wc(e),this.rc(),this.hc(!1),this.ic(!1)},this.sc=function(){Atomics.add(a(),this.Sb>>2,1)},this.Hc=function(){return 1===Atomics.sub(a(),this.Sb>>2,1)},this.cc=function(t){i()[this.Sb+16>>2>>>0]=t},this.tc=function(){return i()[this.Sb+16>>2>>>0]},this.vc=function(){if(Re(this.bc()))return i()[this.Zb>>2>>>0];var t=this.tc();return 0!==t?t:this.Zb}}function Tt(t){return ye(new St(t).Sb)}function Et(t,e,n,r){return O?$t(3,1,t,e,n,r):Mt(t,e,n,r)}function Mt(t,e,n,r){if(\\\"undefined\\\"==typeof SharedArrayBuffer)return x(\\\"Current environment does not support SharedArrayBuffer, pthreads are not available!\\\"),6;var a=[];return O&&0===a.length?Et(t,e,n,r):(t={Ic:n,Ub:t,zc:r,Nc:a},O?(t.Oc=\\\"spawnThread\\\",postMessage(t,a),0):lt(t))}function Ct(t,e,n){return O?$t(4,1,t,e,n):0}function xt(t,e){if(O)return $t(5,1,t,e)}function Rt(t,e){if(O)return $t(6,1,t,e)}function jt(t,e,n){if(O)return $t(7,1,t,e,n)}function kt(t,e,n){return O?$t(8,1,t,e,n):0}function Dt(t,e){if(O)return $t(9,1,t,e)}function Pt(t,e,n){if(O)return $t(10,1,t,e,n)}function Ut(t,e,n,r){if(O)return $t(11,1,t,e,n,r)}function Ft(t,e,n,r){if(O)return $t(12,1,t,e,n,r)}function It(t,e,n,r){if(O)return $t(13,1,t,e,n,r)}function Wt(t){if(O)return $t(14,1,t)}function Ht(t,e){if(O)return $t(15,1,t,e)}function Lt(t,e,n){if(O)return $t(16,1,t,e,n)}function zt(t){Atomics.store(a(),t>>2,1),he()&&_e(t),Atomics.compareExchange(a(),t>>2,1,0)}function Yt(t){return i()[t>>>2]+4294967296*a()[t+4>>>2]}function Bt(t,e,n,r,a,i){return O?$t(17,1,t,e,n,r,a,i):-52}function Gt(t,e,n,r,a,i){if(O)return $t(18,1,t,e,n,r,a,i)}function Nt(t){var n=G(t)+1,r=de(n);return r&&B(t,e(),r,n),r}function Vt(t,e,n){function r(t){return(t=t.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?t[1]:\\\"GMT\\\"}if(O)return $t(19,1,t,e,n);var o=(new Date).getFullYear(),u=new Date(o,0,1),c=new Date(o,6,1);o=u.getTimezoneOffset();var s=c.getTimezoneOffset(),l=Math.max(o,s);a()[t>>2>>>0]=60*l,a()[e>>2>>>0]=Number(o!=s),t=r(u),e=r(c),t=Nt(t),e=Nt(e),s<o?(i()[n>>2>>>0]=t,i()[n+4>>2>>>0]=e):(i()[n>>2>>>0]=e,i()[n+4>>2>>>0]=t)}function $t(t,e){var n=arguments.length-2,r=arguments;return yt((()=>{for(var a=Ce(8*n),i=a>>3,u=0;u<n;u++){var c=r[2+u];o()[i+u>>>0]=c}return we(t,n,a,e)}))}u.executeNotifiedProxyingQueue=zt,wt=_?()=>{var t=process.hrtime();return 1e3*t[0]+t[1]/1e6}:O?()=>performance.now()-u.__performance_now_clock_drift:()=>performance.now();var qt,Xt=[],Jt={};function Zt(){if(!qt){var t,e={USER:\\\"web_user\\\",LOGNAME:\\\"web_user\\\",PATH:\\\"/\\\",PWD:\\\"/\\\",HOME:\\\"/home/web_user\\\",LANG:(\\\"object\\\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\\\"C\\\").replace(\\\"-\\\",\\\"_\\\")+\\\".UTF-8\\\",_:m||\\\"./this.program\\\"};for(t in Jt)void 0===Jt[t]?delete e[t]:e[t]=Jt[t];var n=[];for(t in e)n.push(t+\\\"=\\\"+e[t]);qt=n}return qt}function Qt(t,n){if(O)return $t(20,1,t,n);var r=0;return Zt().forEach((function(a,o){var u=n+r;for(o=i()[t+4*o>>2>>>0]=u,u=0;u<a.length;++u)e()[o++>>0>>>0]=a.charCodeAt(u);e()[o>>0>>>0]=0,r+=a.length+1})),0}function Kt(t,e){if(O)return $t(21,1,t,e);var n=Zt();i()[t>>2>>>0]=n.length;var r=0;return n.forEach((function(t){r+=t.length+1})),i()[e>>2>>>0]=r,0}function te(t){return O?$t(22,1,t):52}function ee(t,e,n,r){return O?$t(23,1,t,e,n,r):52}function ne(t,e,n,r,a){return O?$t(24,1,t,e,n,r,a):70}var re=[null,[],[]];function ae(t,e){var n=re[t];0===e||10===e?((1===t?C:x)(z(n,0)),n.length=0):n.push(e)}function ie(t,e,n,a){if(O)return $t(25,1,t,e,n,a);for(var o=0,u=0;u<n;u++){var c=i()[e>>2>>>0],s=i()[e+4>>2>>>0];e+=8;for(var l=0;l<s;l++)ae(t,r()[c+l>>>0]);o+=s}return i()[a>>2>>>0]=o,0}var oe=0;function ue(t){return 0==t%4&&(0!=t%100||0==t%400)}var ce=[31,29,31,30,31,30,31,31,30,31,30,31],se=[31,28,31,30,31,30,31,31,30,31,30,31];function le(t,n,r,i){function o(t,e,n){for(t=\\\"number\\\"==typeof t?t.toString():t||\\\"\\\";t.length<e;)t=n[0]+t;return t}function u(t,e){return o(t,e,\\\"0\\\")}function c(t,e){function n(t){return 0>t?-1:0<t?1:0}var r;return 0===(r=n(t.getFullYear()-e.getFullYear()))&&0===(r=n(t.getMonth()-e.getMonth()))&&(r=n(t.getDate()-e.getDate())),r}function s(t){switch(t.getDay()){case 0:return new Date(t.getFullYear()-1,11,29);case 1:return t;case 2:return new Date(t.getFullYear(),0,3);case 3:return new Date(t.getFullYear(),0,2);case 4:return new Date(t.getFullYear(),0,1);case 5:return new Date(t.getFullYear()-1,11,31);case 6:return new Date(t.getFullYear()-1,11,30)}}function l(t){var e=t.Wb;for(t=new Date(new Date(t.Xb+1900,0,1).getTime());0<e;){var n=t.getMonth(),r=(ue(t.getFullYear())?ce:se)[n];if(!(e>r-t.getDate())){t.setDate(t.getDate()+e);break}e-=r-t.getDate()+1,t.setDate(1),11>n?t.setMonth(n+1):(t.setMonth(0),t.setFullYear(t.getFullYear()+1))}return n=new Date(t.getFullYear()+1,0,4),e=s(new Date(t.getFullYear(),0,4)),n=s(n),0>=c(e,t)?0>=c(n,t)?t.getFullYear()+1:t.getFullYear():t.getFullYear()-1}var f=a()[i+40>>2>>>0];for(var p in i={Lc:a()[i>>2>>>0],Kc:a()[i+4>>2>>>0],dc:a()[i+8>>2>>>0],jc:a()[i+12>>2>>>0],ec:a()[i+16>>2>>>0],Xb:a()[i+20>>2>>>0],Tb:a()[i+24>>2>>>0],Wb:a()[i+28>>2>>>0],Rc:a()[i+32>>2>>>0],Jc:a()[i+36>>2>>>0],Mc:f?Y(f):\\\"\\\"},r=Y(r),f={\\\"%c\\\":\\\"%a %b %d %H:%M:%S %Y\\\",\\\"%D\\\":\\\"%m/%d/%y\\\",\\\"%F\\\":\\\"%Y-%m-%d\\\",\\\"%h\\\":\\\"%b\\\",\\\"%r\\\":\\\"%I:%M:%S %p\\\",\\\"%R\\\":\\\"%H:%M\\\",\\\"%T\\\":\\\"%H:%M:%S\\\",\\\"%x\\\":\\\"%m/%d/%y\\\",\\\"%X\\\":\\\"%H:%M:%S\\\",\\\"%Ec\\\":\\\"%c\\\",\\\"%EC\\\":\\\"%C\\\",\\\"%Ex\\\":\\\"%m/%d/%y\\\",\\\"%EX\\\":\\\"%H:%M:%S\\\",\\\"%Ey\\\":\\\"%y\\\",\\\"%EY\\\":\\\"%Y\\\",\\\"%Od\\\":\\\"%d\\\",\\\"%Oe\\\":\\\"%e\\\",\\\"%OH\\\":\\\"%H\\\",\\\"%OI\\\":\\\"%I\\\",\\\"%Om\\\":\\\"%m\\\",\\\"%OM\\\":\\\"%M\\\",\\\"%OS\\\":\\\"%S\\\",\\\"%Ou\\\":\\\"%u\\\",\\\"%OU\\\":\\\"%U\\\",\\\"%OV\\\":\\\"%V\\\",\\\"%Ow\\\":\\\"%w\\\",\\\"%OW\\\":\\\"%W\\\",\\\"%Oy\\\":\\\"%y\\\"})r=r.replace(new RegExp(p,\\\"g\\\"),f[p]);var h=\\\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\\\".split(\\\" \\\"),d=\\\"January February March April May June July August September October November December\\\".split(\\\" \\\");for(p in f={\\\"%a\\\":function(t){return h[t.Tb].substring(0,3)},\\\"%A\\\":function(t){return h[t.Tb]},\\\"%b\\\":function(t){return d[t.ec].substring(0,3)},\\\"%B\\\":function(t){return d[t.ec]},\\\"%C\\\":function(t){return u((t.Xb+1900)/100|0,2)},\\\"%d\\\":function(t){return u(t.jc,2)},\\\"%e\\\":function(t){return o(t.jc,2,\\\" \\\")},\\\"%g\\\":function(t){return l(t).toString().substring(2)},\\\"%G\\\":function(t){return l(t)},\\\"%H\\\":function(t){return u(t.dc,2)},\\\"%I\\\":function(t){return 0==(t=t.dc)?t=12:12<t&&(t-=12),u(t,2)},\\\"%j\\\":function(t){for(var e=0,n=0;n<=t.ec-1;e+=(ue(t.Xb+1900)?ce:se)[n++]);return u(t.jc+e,3)},\\\"%m\\\":function(t){return u(t.ec+1,2)},\\\"%M\\\":function(t){return u(t.Kc,2)},\\\"%n\\\":function(){return\\\"\\\\n\\\"},\\\"%p\\\":function(t){return 0<=t.dc&&12>t.dc?\\\"AM\\\":\\\"PM\\\"},\\\"%S\\\":function(t){return u(t.Lc,2)},\\\"%t\\\":function(){return\\\"\\\\t\\\"},\\\"%u\\\":function(t){return t.Tb||7},\\\"%U\\\":function(t){return u(Math.floor((t.Wb+7-t.Tb)/7),2)},\\\"%V\\\":function(t){var e=Math.floor((t.Wb+7-(t.Tb+6)%7)/7);if(2>=(t.Tb+371-t.Wb-2)%7&&e++,e)53==e&&(4==(n=(t.Tb+371-t.Wb)%7)||3==n&&ue(t.Xb)||(e=1));else{e=52;var n=(t.Tb+7-t.Wb-1)%7;(4==n||5==n&&ue(t.Xb%400-1))&&e++}return u(e,2)},\\\"%w\\\":function(t){return t.Tb},\\\"%W\\\":function(t){return u(Math.floor((t.Wb+7-(t.Tb+6)%7)/7),2)},\\\"%y\\\":function(t){return(t.Xb+1900).toString().substring(2)},\\\"%Y\\\":function(t){return t.Xb+1900},\\\"%z\\\":function(t){var e=0<=(t=t.Jc);return t=Math.abs(t)/60,(e?\\\"+\\\":\\\"-\\\")+String(\\\"0000\\\"+(t/60*100+t%60)).slice(-4)},\\\"%Z\\\":function(t){return t.Mc},\\\"%%\\\":function(){return\\\"%\\\"}},r=r.replace(/%%/g,\\\"\\\\0\\\\0\\\"),f)r.includes(p)&&(r=r.replace(new RegExp(p,\\\"g\\\"),f[p](i)));return p=function(t){var e=Array(G(t)+1);return B(t,e,0,e.length),e}(r=r.replace(/\\\\0\\\\0/g,\\\"%\\\")),p.length>n?0:(function(t,n){e().set(t,n>>>0)}(p,t),p.length-1)}ht.fc();var fe=[null,ft,bt,Et,Ct,xt,Rt,jt,kt,Dt,Pt,Ut,Ft,It,Wt,Ht,Lt,Bt,Gt,Vt,Qt,Kt,te,ee,ne,ie],pe={b:function(t){return de(t+24)+24},n:function(t){return(t=new St(t)).uc()||(t.hc(!0),Ot--),t.ic(!1),_t.push(t),t.sc(),t.vc()},ma:function(t){throw x(\\\"Unexpected exception thrown, this is not properly supported - aborting\\\"),H=!0,t},x:function(){Se(0);var t=_t.pop();if(t.Hc()&&!t.kc()){var e=t.Dc();e&&gt(e)(t.Zb),Tt(t.Zb)}At=0},e:function(){var t=At;if(!t)return oe=0;var e=new St(t);e.cc(t);var n=e.bc();if(!n)return oe=0,t;for(var r=Array.prototype.slice.call(arguments),a=0;a<r.length;a++){var i=r[a];if(0===i||i===n)break;if(xe(i,n,e.Sb+16))return oe=i,t}return oe=n,t},l:function(){var t=At;if(!t)return oe=0;var e=new St(t);e.cc(t);var n=e.bc();if(!n)return oe=0,t;for(var r=Array.prototype.slice.call(arguments),a=0;a<r.length;a++){var i=r[a];if(0===i||i===n)break;if(xe(i,n,e.Sb+16))return oe=i,t}return oe=n,t},h:function(){var t=At;if(!t)return oe=0;var e=new St(t);e.cc(t);var n=e.bc();if(!n)return oe=0,t;for(var r=Array.prototype.slice.call(arguments),a=0;a<r.length;a++){var i=r[a];if(0===i||i===n)break;if(xe(i,n,e.Sb+16))return oe=i,t}return oe=n,t},t:Tt,M:function(){var t=_t.pop();t||at(\\\"no exception to throw\\\");var e=t.Zb;throw t.kc()||(_t.push(t),t.ic(!0),t.hc(!1),Ot++),At=e,e},c:function(t,e,n){throw new St(t).fc(e,n),At=t,Ot++,t},pa:function(){return Ot},Fa:function(t){ge(t,!w,1,!v),ht.pc()},T:function(t){O?postMessage({cmd:\\\"cleanupThread\\\",thread:t}):st(t)},xa:Mt,j:function(t){throw At||(At=t),t},H:Ct,Ma:xt,ua:Rt,wa:jt,oa:kt,Ka:Dt,Ca:Pt,Ja:Ut,V:Ft,va:It,sa:Wt,La:Ht,ta:Lt,Ta:function(){},X:function(){at(\\\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},Ua:function(){at(\\\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},W:function(){return Date.now()},ya:function(){return 2097152},Oa:function(){return!0},za:function(t,e,n,r){if(t==e)setTimeout((()=>zt(r)));else if(O)postMessage({targetThread:t,cmd:\\\"processProxyingQueue\\\",queue:r});else{if(!(t=ht.Vb[t]))return;t.postMessage({cmd:\\\"processProxyingQueue\\\",queue:r})}return 1},Ea:function(){return-1},Pa:function(t,e){t=new Date(1e3*Yt(t)),a()[e>>2>>>0]=t.getUTCSeconds(),a()[e+4>>2>>>0]=t.getUTCMinutes(),a()[e+8>>2>>>0]=t.getUTCHours(),a()[e+12>>2>>>0]=t.getUTCDate(),a()[e+16>>2>>>0]=t.getUTCMonth(),a()[e+20>>2>>>0]=t.getUTCFullYear()-1900,a()[e+24>>2>>>0]=t.getUTCDay(),t=(t.getTime()-Date.UTC(t.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,a()[e+28>>2>>>0]=t},Qa:function(t,e){t=new Date(1e3*Yt(t)),a()[e>>2>>>0]=t.getSeconds(),a()[e+4>>2>>>0]=t.getMinutes(),a()[e+8>>2>>>0]=t.getHours(),a()[e+12>>2>>>0]=t.getDate(),a()[e+16>>2>>>0]=t.getMonth(),a()[e+20>>2>>>0]=t.getFullYear()-1900,a()[e+24>>2>>>0]=t.getDay();var n=new Date(t.getFullYear(),0,1),r=(t.getTime()-n.getTime())/864e5|0;a()[e+28>>2>>>0]=r,a()[e+36>>2>>>0]=-60*t.getTimezoneOffset(),r=new Date(t.getFullYear(),6,1).getTimezoneOffset(),t=0|(r!=(n=n.getTimezoneOffset())&&t.getTimezoneOffset()==Math.min(n,r)),a()[e+32>>2>>>0]=t},Ra:function(t){var e=new Date(a()[t+20>>2>>>0]+1900,a()[t+16>>2>>>0],a()[t+12>>2>>>0],a()[t+8>>2>>>0],a()[t+4>>2>>>0],a()[t>>2>>>0],0),n=a()[t+32>>2>>>0],r=e.getTimezoneOffset(),i=new Date(e.getFullYear(),0,1),o=new Date(e.getFullYear(),6,1).getTimezoneOffset(),u=i.getTimezoneOffset(),c=Math.min(u,o);return 0>n?a()[t+32>>2>>>0]=Number(o!=u&&c==r):0<n!=(c==r)&&(o=Math.max(u,o),e.setTime(e.getTime()+6e4*((0<n?c:o)-r))),a()[t+24>>2>>>0]=e.getDay(),n=(e.getTime()-i.getTime())/864e5|0,a()[t+28>>2>>>0]=n,a()[t>>2>>>0]=e.getSeconds(),a()[t+4>>2>>>0]=e.getMinutes(),a()[t+8>>2>>>0]=e.getHours(),a()[t+12>>2>>>0]=e.getDate(),a()[t+16>>2>>>0]=e.getMonth(),e.getTime()/1e3|0},Aa:Bt,Ba:Gt,Sa:function t(e,n,r){t.Ac||(t.Ac=!0,Vt(e,n,r))},y:function(){at(\\\"\\\")},U:function(){if(!_&&!w){var t=\\\"Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread\\\";vt||(vt={}),vt[t]||(vt[t]=1,_&&(t=\\\"warning: \\\"+t),x(t))}},ra:function(){return 4294901760},B:wt,Ia:function(t,e,n){r().copyWithin(t>>>0,e>>>0,e+n>>>0)},F:function(){return _?n(993).cpus().length:navigator.hardwareConcurrency},Da:function(t,e,n){Xt.length=e,n>>=3;for(var r=0;r<e;r++)Xt[r]=o()[n+r>>>0];return(0>t?ut[-t-1]:fe[t]).apply(null,Xt)},qa:function(t){var e=r().length;if((t>>>=0)<=e||4294901760<t)return!1;for(var n=1;4>=n;n*=2){var a=e*(1+.2/n);a=Math.min(a,t+100663296);var i=Math;a=Math.max(t,a),i=i.min.call(i,4294901760,a+(65536-a%65536)%65536);t:{try{j.grow(i-D.byteLength+65535>>>16),N(j.buffer);var o=1;break t}catch(t){}o=void 0}if(o)return!0}return!1},Na:function(){throw\\\"unwind\\\"},Ga:Qt,Ha:Kt,J:pt,I:te,S:ee,ga:ne,R:ie,d:function(){return oe},na:function t(r,a){t.lc||(t.lc=function(){if(\\\"object\\\"==typeof crypto&&\\\"function\\\"==typeof crypto.getRandomValues){var t=new Uint8Array(1);return()=>(crypto.getRandomValues(t),t[0])}if(_)try{var e=n(Object(function(){var t=new Error(\\\"Cannot find module 'crypto'\\\");throw t.code=\\\"MODULE_NOT_FOUND\\\",t}()));return()=>e.randomBytes(1)[0]}catch(t){}return()=>at(\\\"randomDevice\\\")}());for(var i=0;i<a;i++)e()[r+i>>0>>>0]=t.lc();return 0},ia:function(t,e,n){var r=Ee();try{return gt(t)(e,n)}catch(t){if(Me(r),t!==t+0)throw t;Se(1,0)}},ja:function(t,e,n){var r=Ee();try{return gt(t)(e,n)}catch(t){if(Me(r),t!==t+0)throw t;Se(1,0)}},K:function(t){var e=Ee();try{return gt(t)()}catch(t){if(Me(e),t!==t+0)throw t;Se(1,0)}},f:function(t,e){var n=Ee();try{return gt(t)(e)}catch(t){if(Me(n),t!==t+0)throw t;Se(1,0)}},P:function(t,e,n){var r=Ee();try{return gt(t)(e,n)}catch(t){if(Me(r),t!==t+0)throw t;Se(1,0)}},Q:function(t,e,n){var r=Ee();try{return gt(t)(e,n)}catch(t){if(Me(r),t!==t+0)throw t;Se(1,0)}},k:function(t,e,n){var r=Ee();try{return gt(t)(e,n)}catch(t){if(Me(r),t!==t+0)throw t;Se(1,0)}},p:function(t,e,n,r){var a=Ee();try{return gt(t)(e,n,r)}catch(t){if(Me(a),t!==t+0)throw t;Se(1,0)}},q:function(t,e,n,r,a){var i=Ee();try{return gt(t)(e,n,r,a)}catch(t){if(Me(i),t!==t+0)throw t;Se(1,0)}},N:function(t,e,n,r,a,i){var o=Ee();try{return gt(t)(e,n,r,a,i)}catch(t){if(Me(o),t!==t+0)throw t;Se(1,0)}},s:function(t,e,n,r,a,i){var o=Ee();try{return gt(t)(e,n,r,a,i)}catch(t){if(Me(o),t!==t+0)throw t;Se(1,0)}},w:function(t,e,n,r,a,i,o){var u=Ee();try{return gt(t)(e,n,r,a,i,o)}catch(t){if(Me(u),t!==t+0)throw t;Se(1,0)}},L:function(t,e,n,r,a,i,o,u){var c=Ee();try{return gt(t)(e,n,r,a,i,o,u)}catch(t){if(Me(c),t!==t+0)throw t;Se(1,0)}},E:function(t,e,n,r,a,i,o,u,c,s,l,f){var p=Ee();try{return gt(t)(e,n,r,a,i,o,u,c,s,l,f)}catch(t){if(Me(p),t!==t+0)throw t;Se(1,0)}},aa:function(t,e,n,r,a,i,o,u){var c=Ee();try{return He(t,e,n,r,a,i,o,u)}catch(t){if(Me(c),t!==t+0)throw t;Se(1,0)}},_:function(t,e,n,r,a,i,o){var u=Ee();try{return ke(t,e,n,r,a,i,o)}catch(t){if(Me(u),t!==t+0)throw t;Se(1,0)}},Z:function(t,e,n,r,a){var i=Ee();try{return Le(t,e,n,r,a)}catch(t){if(Me(i),t!==t+0)throw t;Se(1,0)}},ca:function(t,e,n,r){var a=Ee();try{return Ie(t,e,n,r)}catch(t){if(Me(a),t!==t+0)throw t;Se(1,0)}},$:function(t){var e=Ee();try{return je(t)}catch(t){if(Me(e),t!==t+0)throw t;Se(1,0)}},ba:function(t,e){var n=Ee();try{return We(t,e)}catch(t){if(Me(n),t!==t+0)throw t;Se(1,0)}},Y:function(t,e,n){var r=Ee();try{return De(t,e,n)}catch(t){if(Me(r),t!==t+0)throw t;Se(1,0)}},g:function(t){var e=Ee();try{gt(t)()}catch(t){if(Me(e),t!==t+0)throw t;Se(1,0)}},r:function(t,e){var n=Ee();try{gt(t)(e)}catch(t){if(Me(n),t!==t+0)throw t;Se(1,0)}},i:function(t,e,n){var r=Ee();try{gt(t)(e,n)}catch(t){if(Me(r),t!==t+0)throw t;Se(1,0)}},ha:function(t,e,n,r){var a=Ee();try{gt(t)(e,n,r)}catch(t){if(Me(a),t!==t+0)throw t;Se(1,0)}},m:function(t,e,n,r){var a=Ee();try{gt(t)(e,n,r)}catch(t){if(Me(a),t!==t+0)throw t;Se(1,0)}},v:function(t,e,n,r,a){var i=Ee();try{gt(t)(e,n,r,a)}catch(t){if(Me(i),t!==t+0)throw t;Se(1,0)}},u:function(t,e,n,r,a,i){var o=Ee();try{gt(t)(e,n,r,a,i)}catch(t){if(Me(o),t!==t+0)throw t;Se(1,0)}},O:function(t,e,n,r,a,i,o){var u=Ee();try{gt(t)(e,n,r,a,i,o)}catch(t){if(Me(u),t!==t+0)throw t;Se(1,0)}},A:function(t,e,n,r,a,i,o,u){var c=Ee();try{gt(t)(e,n,r,a,i,o,u)}catch(t){if(Me(c),t!==t+0)throw t;Se(1,0)}},ka:function(t,e,n,r,a,i,o,u,c){var s=Ee();try{gt(t)(e,n,r,a,i,o,u,c)}catch(t){if(Me(s),t!==t+0)throw t;Se(1,0)}},C:function(t,e,n,r,a,i,o,u,c,s,l){var f=Ee();try{gt(t)(e,n,r,a,i,o,u,c,s,l)}catch(t){if(Me(f),t!==t+0)throw t;Se(1,0)}},D:function(t,e,n,r,a,i,o,u,c,s,l,f,p,h,d,y){var b=Ee();try{gt(t)(e,n,r,a,i,o,u,c,s,l,f,p,h,d,y)}catch(t){if(Me(b),t!==t+0)throw t;Se(1,0)}},fa:function(t,e,n,r,a,i,o,u){var c=Ee();try{Pe(t,e,n,r,a,i,o,u)}catch(t){if(Me(c),t!==t+0)throw t;Se(1,0)}},da:function(t,e,n,r,a,i,o,u,c,s,l,f){var p=Ee();try{Fe(t,e,n,r,a,i,o,u,c,s,l,f)}catch(t){if(Me(p),t!==t+0)throw t;Se(1,0)}},ea:function(t,e,n,r,a,i){var o=Ee();try{Ue(t,e,n,r,a,i)}catch(t){if(Me(o),t!==t+0)throw t;Se(1,0)}},o:function(t){return t},a:j||u.wasmMemory,G:function(t){oe=t},la:le,z:function(t,e,n,r){return le(t,e,n,r)}};!function(){function t(t,e){u.asm=t.exports,ht.qc.push(u.asm.sb),$=u.asm.ub,X.unshift(u.asm.Va),k=e,O||(et--,u.monitorRunDependencies&&u.monitorRunDependencies(et),0==et&&(null!==nt&&(clearInterval(nt),nt=null),rt&&(t=rt,rt=null,t())))}function e(e){t(e.instance,e.module)}function n(t){return function(){if(!M&&(v||w)){if(\\\"function\\\"==typeof fetch&&!tt.startsWith(\\\"file://\\\"))return fetch(tt,{credentials:\\\"same-origin\\\"}).then((function(t){if(!t.ok)throw\\\"failed to load wasm binary file at '\\\"+tt+\\\"'\\\";return t.arrayBuffer()})).catch((function(){return ot()}));if(f)return new Promise((function(t,e){f(tt,(function(e){t(new Uint8Array(e))}),e)}))}return Promise.resolve().then((function(){return ot()}))}().then((function(t){return WebAssembly.instantiate(t,r)})).then((function(t){return t})).then(t,(function(t){x(\\\"failed to asynchronously prepare wasm: \\\"+t),at(t)}))}var r={a:pe};if(O||(et++,u.monitorRunDependencies&&u.monitorRunDependencies(et)),u.instantiateWasm)try{return u.instantiateWasm(r,t)}catch(t){return x(\\\"Module.instantiateWasm callback failed with error: \\\"+t),!1}(M||\\\"function\\\"!=typeof WebAssembly.instantiateStreaming||it()||tt.startsWith(\\\"file://\\\")||_||\\\"function\\\"!=typeof fetch?n(e):fetch(tt,{credentials:\\\"same-origin\\\"}).then((function(t){return WebAssembly.instantiateStreaming(t,r).then(e,(function(t){return x(\\\"wasm streaming compile failed: \\\"+t),x(\\\"falling back to ArrayBuffer instantiation\\\"),n(e)}))}))).catch(s)}(),u.___wasm_call_ctors=function(){return(u.___wasm_call_ctors=u.asm.Va).apply(null,arguments)},u._OrtInit=function(){return(u._OrtInit=u.asm.Wa).apply(null,arguments)},u._OrtCreateSessionOptions=function(){return(u._OrtCreateSessionOptions=u.asm.Xa).apply(null,arguments)},u._OrtAppendExecutionProvider=function(){return(u._OrtAppendExecutionProvider=u.asm.Ya).apply(null,arguments)},u._OrtAddSessionConfigEntry=function(){return(u._OrtAddSessionConfigEntry=u.asm.Za).apply(null,arguments)},u._OrtReleaseSessionOptions=function(){return(u._OrtReleaseSessionOptions=u.asm._a).apply(null,arguments)},u._OrtCreateSession=function(){return(u._OrtCreateSession=u.asm.$a).apply(null,arguments)},u._OrtReleaseSession=function(){return(u._OrtReleaseSession=u.asm.ab).apply(null,arguments)},u._OrtGetInputCount=function(){return(u._OrtGetInputCount=u.asm.bb).apply(null,arguments)},u._OrtGetOutputCount=function(){return(u._OrtGetOutputCount=u.asm.cb).apply(null,arguments)},u._OrtGetInputName=function(){return(u._OrtGetInputName=u.asm.db).apply(null,arguments)},u._OrtGetOutputName=function(){return(u._OrtGetOutputName=u.asm.eb).apply(null,arguments)},u._OrtFree=function(){return(u._OrtFree=u.asm.fb).apply(null,arguments)},u._OrtCreateTensor=function(){return(u._OrtCreateTensor=u.asm.gb).apply(null,arguments)},u._OrtGetTensorData=function(){return(u._OrtGetTensorData=u.asm.hb).apply(null,arguments)},u._OrtReleaseTensor=function(){return(u._OrtReleaseTensor=u.asm.ib).apply(null,arguments)},u._OrtCreateRunOptions=function(){return(u._OrtCreateRunOptions=u.asm.jb).apply(null,arguments)},u._OrtAddRunConfigEntry=function(){return(u._OrtAddRunConfigEntry=u.asm.kb).apply(null,arguments)},u._OrtReleaseRunOptions=function(){return(u._OrtReleaseRunOptions=u.asm.lb).apply(null,arguments)},u._OrtRun=function(){return(u._OrtRun=u.asm.mb).apply(null,arguments)},u._OrtEndProfiling=function(){return(u._OrtEndProfiling=u.asm.nb).apply(null,arguments)};var he=u._pthread_self=function(){return(he=u._pthread_self=u.asm.ob).apply(null,arguments)},de=u._malloc=function(){return(de=u._malloc=u.asm.pb).apply(null,arguments)},ye=u._free=function(){return(ye=u._free=u.asm.qb).apply(null,arguments)},be=u._fflush=function(){return(be=u._fflush=u.asm.rb).apply(null,arguments)};u.__emscripten_tls_init=function(){return(u.__emscripten_tls_init=u.asm.sb).apply(null,arguments)};var me=u.___funcs_on_exit=function(){return(me=u.___funcs_on_exit=u.asm.tb).apply(null,arguments)},ge=u.__emscripten_thread_init=function(){return(ge=u.__emscripten_thread_init=u.asm.vb).apply(null,arguments)};u.__emscripten_thread_crashed=function(){return(u.__emscripten_thread_crashed=u.asm.wb).apply(null,arguments)};var ve,we=u._emscripten_run_in_main_runtime_thread_js=function(){return(we=u._emscripten_run_in_main_runtime_thread_js=u.asm.xb).apply(null,arguments)},_e=u.__emscripten_proxy_execute_task_queue=function(){return(_e=u.__emscripten_proxy_execute_task_queue=u.asm.yb).apply(null,arguments)},Oe=u.__emscripten_thread_free_data=function(){return(Oe=u.__emscripten_thread_free_data=u.asm.zb).apply(null,arguments)},Ae=u.__emscripten_thread_exit=function(){return(Ae=u.__emscripten_thread_exit=u.asm.Ab).apply(null,arguments)},Se=u._setThrew=function(){return(Se=u._setThrew=u.asm.Bb).apply(null,arguments)},Te=u._emscripten_stack_set_limits=function(){return(Te=u._emscripten_stack_set_limits=u.asm.Cb).apply(null,arguments)},Ee=u.stackSave=function(){return(Ee=u.stackSave=u.asm.Db).apply(null,arguments)},Me=u.stackRestore=function(){return(Me=u.stackRestore=u.asm.Eb).apply(null,arguments)},Ce=u.stackAlloc=function(){return(Ce=u.stackAlloc=u.asm.Fb).apply(null,arguments)},xe=u.___cxa_can_catch=function(){return(xe=u.___cxa_can_catch=u.asm.Gb).apply(null,arguments)},Re=u.___cxa_is_pointer_type=function(){return(Re=u.___cxa_is_pointer_type=u.asm.Hb).apply(null,arguments)},je=u.dynCall_j=function(){return(je=u.dynCall_j=u.asm.Ib).apply(null,arguments)},ke=u.dynCall_iiiiij=function(){return(ke=u.dynCall_iiiiij=u.asm.Jb).apply(null,arguments)},De=u.dynCall_jii=function(){return(De=u.dynCall_jii=u.asm.Kb).apply(null,arguments)},Pe=u.dynCall_viiiiij=function(){return(Pe=u.dynCall_viiiiij=u.asm.Lb).apply(null,arguments)},Ue=u.dynCall_vjji=function(){return(Ue=u.dynCall_vjji=u.asm.Mb).apply(null,arguments)},Fe=u.dynCall_viiijjjii=function(){return(Fe=u.dynCall_viiijjjii=u.asm.Nb).apply(null,arguments)},Ie=u.dynCall_iij=function(){return(Ie=u.dynCall_iij=u.asm.Ob).apply(null,arguments)},We=u.dynCall_ji=function(){return(We=u.dynCall_ji=u.asm.Pb).apply(null,arguments)},He=u.dynCall_iiiiiij=function(){return(He=u.dynCall_iiiiiij=u.asm.Qb).apply(null,arguments)},Le=u.dynCall_iiij=function(){return(Le=u.dynCall_iiij=u.asm.Rb).apply(null,arguments)};function ze(){function t(){if(!ve&&(ve=!0,u.calledRun=!0,!H)&&(O||dt(X),c(u),u.onRuntimeInitialized&&u.onRuntimeInitialized(),!O)){if(u.postRun)for(\\\"function\\\"==typeof u.postRun&&(u.postRun=[u.postRun]);u.postRun.length;){var t=u.postRun.shift();Z.unshift(t)}dt(Z)}}if(!(0<et))if(O)c(u),O||dt(X),postMessage({cmd:\\\"loaded\\\"});else{if(u.preRun)for(\\\"function\\\"==typeof u.preRun&&(u.preRun=[u.preRun]);u.preRun.length;)K();dt(q),0<et||(u.setStatus?(u.setStatus(\\\"Running...\\\"),setTimeout((function(){setTimeout((function(){u.setStatus(\\\"\\\")}),1),t()}),1)):t())}}if(u.UTF8ToString=Y,u.stringToUTF8=function(t,e,n){return B(t,r(),e,n)},u.lengthBytesUTF8=G,u.keepRuntimeAlive=Q,u.wasmMemory=j,u.stackSave=Ee,u.stackRestore=Me,u.stackAlloc=Ce,u.ExitStatus=ct,u.PThread=ht,rt=function t(){ve||ze(),ve||(rt=t)},u.preInit)for(\\\"function\\\"==typeof u.preInit&&(u.preInit=[u.preInit]);0<u.preInit.length;)u.preInit.pop()();return ze(),t.ready});t.exports=r},932:(t,e,n)=>{var _scriptDir,r=(_scriptDir=(_scriptDir=\\\"undefined\\\"!=typeof document&&document.currentScript?document.currentScript.src:void 0)||\\\"/index.js\\\",function(t){var e,r,a;t=t||{},e||(e=void 0!==t?t:{}),e.ready=new Promise((function(t,e){r=t,a=e}));var i,o,u,c,s,l,f=Object.assign({},e),p=\\\"./this.program\\\",h=(t,e)=>{throw e},d=\\\"object\\\"==typeof window,y=\\\"function\\\"==typeof importScripts,b=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node,m=\\\"\\\";b?(m=y?n(908).dirname(m)+\\\"/\\\":\\\"//\\\",l=()=>{s||(c=n(384),s=n(908))},i=function(t,e){return l(),t=s.normalize(t),c.readFileSync(t,e?void 0:\\\"utf8\\\")},u=t=>((t=i(t,!0)).buffer||(t=new Uint8Array(t)),t),o=(t,e,n)=>{l(),t=s.normalize(t),c.readFile(t,(function(t,r){t?n(t):e(r.buffer)}))},1<process.argv.length&&(p=process.argv[1].replace(/\\\\\\\\/g,\\\"/\\\")),process.argv.slice(2),process.on(\\\"uncaughtException\\\",(function(t){if(!(t instanceof J))throw t})),process.on(\\\"unhandledRejection\\\",(function(t){throw t})),h=(t,e)=>{if(_||0<L)throw process.exitCode=t,e;e instanceof J||w(\\\"exiting due to exception: \\\"+e),process.exit(t)},e.inspect=function(){return\\\"[Emscripten Module object]\\\"}):(d||y)&&(y?m=self.location.href:\\\"undefined\\\"!=typeof document&&document.currentScript&&(m=document.currentScript.src),_scriptDir&&(m=_scriptDir),m=0!==m.indexOf(\\\"blob:\\\")?m.substr(0,m.replace(/[?#].*/,\\\"\\\").lastIndexOf(\\\"/\\\")+1):\\\"\\\",i=t=>{var e=new XMLHttpRequest;return e.open(\\\"GET\\\",t,!1),e.send(null),e.responseText},y&&(u=t=>{var e=new XMLHttpRequest;return e.open(\\\"GET\\\",t,!1),e.responseType=\\\"arraybuffer\\\",e.send(null),new Uint8Array(e.response)}),o=(t,e,n)=>{var r=new XMLHttpRequest;r.open(\\\"GET\\\",t,!0),r.responseType=\\\"arraybuffer\\\",r.onload=()=>{200==r.status||0==r.status&&r.response?e(r.response):n()},r.onerror=n,r.send(null)});var g,v=e.print||console.log.bind(console),w=e.printErr||console.warn.bind(console);Object.assign(e,f),f=null,e.thisProgram&&(p=e.thisProgram),e.quit&&(h=e.quit),e.wasmBinary&&(g=e.wasmBinary);var _=e.noExitRuntime||!1;\\\"object\\\"!=typeof WebAssembly&&V(\\\"no native wasm support detected\\\");var O,A,S,T,E,M,C=!1,x=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf8\\\"):void 0;function R(t,e,n){var r=(e>>>=0)+n;for(n=e;t[n]&&!(n>=r);)++n;if(16<n-e&&t.buffer&&x)return x.decode(t.subarray(e,n));for(r=\\\"\\\";e<n;){var a=t[e++];if(128&a){var i=63&t[e++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|i);else{var o=63&t[e++];65536>(a=224==(240&a)?(15&a)<<12|i<<6|o:(7&a)<<18|i<<12|o<<6|63&t[e++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r}function j(t,e){return(t>>>=0)?R(T,t,e):\\\"\\\"}function k(t,e,n,r){if(!(0<r))return 0;var a=n>>>=0;r=n+r-1;for(var i=0;i<t.length;++i){var o=t.charCodeAt(i);if(55296<=o&&57343>=o&&(o=65536+((1023&o)<<10)|1023&t.charCodeAt(++i)),127>=o){if(n>=r)break;e[n++>>>0]=o}else{if(2047>=o){if(n+1>=r)break;e[n++>>>0]=192|o>>6}else{if(65535>=o){if(n+2>=r)break;e[n++>>>0]=224|o>>12}else{if(n+3>=r)break;e[n++>>>0]=240|o>>18,e[n++>>>0]=128|o>>12&63}e[n++>>>0]=128|o>>6&63}e[n++>>>0]=128|63&o}}return e[n>>>0]=0,n-a}function D(t){for(var e=0,n=0;n<t.length;++n){var r=t.charCodeAt(n);127>=r?e++:2047>=r?e+=2:55296<=r&&57343>=r?(e+=4,++n):e+=3}return e}function P(){var t=O.buffer;A=t,e.HEAP8=S=new Int8Array(t),e.HEAP16=new Int16Array(t),e.HEAP32=E=new Int32Array(t),e.HEAPU8=T=new Uint8Array(t),e.HEAPU16=new Uint16Array(t),e.HEAPU32=M=new Uint32Array(t),e.HEAPF32=new Float32Array(t),e.HEAPF64=new Float64Array(t)}var U,F=[],I=[],W=[],H=[],L=0;function z(){var t=e.preRun.shift();F.unshift(t)}var Y,B=0,G=null,N=null;function V(t){throw e.onAbort&&e.onAbort(t),w(t=\\\"Aborted(\\\"+t+\\\")\\\"),C=!0,t=new WebAssembly.RuntimeError(t+\\\". Build with -sASSERTIONS for more info.\\\"),a(t),t}function $(){return Y.startsWith(\\\"data:application/octet-stream;base64,\\\")}if(Y=\\\"ort-wasm.wasm\\\",!$()){var q=Y;Y=e.locateFile?e.locateFile(q,m):m+q}function X(){var t=Y;try{if(t==Y&&g)return new Uint8Array(g);if(u)return u(t);throw\\\"both async and sync fetching of the wasm failed\\\"}catch(t){V(t)}}function J(t){this.name=\\\"ExitStatus\\\",this.message=\\\"Program terminated with exit(\\\"+t+\\\")\\\",this.status=t}function Z(t){for(;0<t.length;)t.shift()(e)}var Q=[],K=0,tt=0;function et(t){this.Db=t,this.zb=t-24,this.Ub=function(t){M[this.zb+4>>2>>>0]=t},this.Eb=function(){return M[this.zb+4>>2>>>0]},this.Sb=function(t){M[this.zb+8>>2>>>0]=t},this.Wb=function(){return M[this.zb+8>>2>>>0]},this.Tb=function(){E[this.zb>>2>>>0]=0},this.Ib=function(t){S[this.zb+12>>0>>>0]=t?1:0},this.Pb=function(){return 0!=S[this.zb+12>>0>>>0]},this.Jb=function(t){S[this.zb+13>>0>>>0]=t?1:0},this.Lb=function(){return 0!=S[this.zb+13>>0>>>0]},this.Rb=function(t,e){this.Fb(0),this.Ub(t),this.Sb(e),this.Tb(),this.Ib(!1),this.Jb(!1)},this.Nb=function(){E[this.zb>>2>>>0]+=1},this.Xb=function(){var t=E[this.zb>>2>>>0];return E[this.zb>>2>>>0]=t-1,1===t},this.Fb=function(t){M[this.zb+16>>2>>>0]=t},this.Ob=function(){return M[this.zb+16>>2>>>0]},this.Qb=function(){if(Mt(this.Eb()))return M[this.Db>>2>>>0];var t=this.Ob();return 0!==t?t:this.Db}}function nt(t){return vt(new et(t).zb)}var rt=[];function at(t){var e=rt[t];return e||(t>=rt.length&&(rt.length=t+1),rt[t]=e=U.get(t)),e}function it(t){var e=D(t)+1,n=gt(e);return n&&k(t,S,n,e),n}var ot={};function ut(){if(!ct){var t,e={USER:\\\"web_user\\\",LOGNAME:\\\"web_user\\\",PATH:\\\"/\\\",PWD:\\\"/\\\",HOME:\\\"/home/web_user\\\",LANG:(\\\"object\\\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\\\"C\\\").replace(\\\"-\\\",\\\"_\\\")+\\\".UTF-8\\\",_:p||\\\"./this.program\\\"};for(t in ot)void 0===ot[t]?delete e[t]:e[t]=ot[t];var n=[];for(t in e)n.push(t+\\\"=\\\"+e[t]);ct=n}return ct}var ct,st=[null,[],[]];function lt(t,e){var n=st[t];0===e||10===e?((1===t?v:w)(R(n,0)),n.length=0):n.push(e)}var ft=0;function pt(t){return 0==t%4&&(0!=t%100||0==t%400)}var ht=[31,29,31,30,31,30,31,31,30,31,30,31],dt=[31,28,31,30,31,30,31,31,30,31,30,31];function yt(t,e,n,r){function a(t,e,n){for(t=\\\"number\\\"==typeof t?t.toString():t||\\\"\\\";t.length<e;)t=n[0]+t;return t}function i(t,e){return a(t,e,\\\"0\\\")}function o(t,e){function n(t){return 0>t?-1:0<t?1:0}var r;return 0===(r=n(t.getFullYear()-e.getFullYear()))&&0===(r=n(t.getMonth()-e.getMonth()))&&(r=n(t.getDate()-e.getDate())),r}function u(t){switch(t.getDay()){case 0:return new Date(t.getFullYear()-1,11,29);case 1:return t;case 2:return new Date(t.getFullYear(),0,3);case 3:return new Date(t.getFullYear(),0,2);case 4:return new Date(t.getFullYear(),0,1);case 5:return new Date(t.getFullYear()-1,11,31);case 6:return new Date(t.getFullYear()-1,11,30)}}function c(t){var e=t.Bb;for(t=new Date(new Date(t.Cb+1900,0,1).getTime());0<e;){var n=t.getMonth(),r=(pt(t.getFullYear())?ht:dt)[n];if(!(e>r-t.getDate())){t.setDate(t.getDate()+e);break}e-=r-t.getDate()+1,t.setDate(1),11>n?t.setMonth(n+1):(t.setMonth(0),t.setFullYear(t.getFullYear()+1))}return n=new Date(t.getFullYear()+1,0,4),e=u(new Date(t.getFullYear(),0,4)),n=u(n),0>=o(e,t)?0>=o(n,t)?t.getFullYear()+1:t.getFullYear():t.getFullYear()-1}var s=E[r+40>>2>>>0];for(var l in r={$b:E[r>>2>>>0],Zb:E[r+4>>2>>>0],Gb:E[r+8>>2>>>0],Kb:E[r+12>>2>>>0],Hb:E[r+16>>2>>>0],Cb:E[r+20>>2>>>0],Ab:E[r+24>>2>>>0],Bb:E[r+28>>2>>>0],bc:E[r+32>>2>>>0],Yb:E[r+36>>2>>>0],ac:s?j(s):\\\"\\\"},n=j(n),s={\\\"%c\\\":\\\"%a %b %d %H:%M:%S %Y\\\",\\\"%D\\\":\\\"%m/%d/%y\\\",\\\"%F\\\":\\\"%Y-%m-%d\\\",\\\"%h\\\":\\\"%b\\\",\\\"%r\\\":\\\"%I:%M:%S %p\\\",\\\"%R\\\":\\\"%H:%M\\\",\\\"%T\\\":\\\"%H:%M:%S\\\",\\\"%x\\\":\\\"%m/%d/%y\\\",\\\"%X\\\":\\\"%H:%M:%S\\\",\\\"%Ec\\\":\\\"%c\\\",\\\"%EC\\\":\\\"%C\\\",\\\"%Ex\\\":\\\"%m/%d/%y\\\",\\\"%EX\\\":\\\"%H:%M:%S\\\",\\\"%Ey\\\":\\\"%y\\\",\\\"%EY\\\":\\\"%Y\\\",\\\"%Od\\\":\\\"%d\\\",\\\"%Oe\\\":\\\"%e\\\",\\\"%OH\\\":\\\"%H\\\",\\\"%OI\\\":\\\"%I\\\",\\\"%Om\\\":\\\"%m\\\",\\\"%OM\\\":\\\"%M\\\",\\\"%OS\\\":\\\"%S\\\",\\\"%Ou\\\":\\\"%u\\\",\\\"%OU\\\":\\\"%U\\\",\\\"%OV\\\":\\\"%V\\\",\\\"%Ow\\\":\\\"%w\\\",\\\"%OW\\\":\\\"%W\\\",\\\"%Oy\\\":\\\"%y\\\"})n=n.replace(new RegExp(l,\\\"g\\\"),s[l]);var f=\\\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\\\".split(\\\" \\\"),p=\\\"January February March April May June July August September October November December\\\".split(\\\" \\\");for(l in s={\\\"%a\\\":function(t){return f[t.Ab].substring(0,3)},\\\"%A\\\":function(t){return f[t.Ab]},\\\"%b\\\":function(t){return p[t.Hb].substring(0,3)},\\\"%B\\\":function(t){return p[t.Hb]},\\\"%C\\\":function(t){return i((t.Cb+1900)/100|0,2)},\\\"%d\\\":function(t){return i(t.Kb,2)},\\\"%e\\\":function(t){return a(t.Kb,2,\\\" \\\")},\\\"%g\\\":function(t){return c(t).toString().substring(2)},\\\"%G\\\":function(t){return c(t)},\\\"%H\\\":function(t){return i(t.Gb,2)},\\\"%I\\\":function(t){return 0==(t=t.Gb)?t=12:12<t&&(t-=12),i(t,2)},\\\"%j\\\":function(t){for(var e=0,n=0;n<=t.Hb-1;e+=(pt(t.Cb+1900)?ht:dt)[n++]);return i(t.Kb+e,3)},\\\"%m\\\":function(t){return i(t.Hb+1,2)},\\\"%M\\\":function(t){return i(t.Zb,2)},\\\"%n\\\":function(){return\\\"\\\\n\\\"},\\\"%p\\\":function(t){return 0<=t.Gb&&12>t.Gb?\\\"AM\\\":\\\"PM\\\"},\\\"%S\\\":function(t){return i(t.$b,2)},\\\"%t\\\":function(){return\\\"\\\\t\\\"},\\\"%u\\\":function(t){return t.Ab||7},\\\"%U\\\":function(t){return i(Math.floor((t.Bb+7-t.Ab)/7),2)},\\\"%V\\\":function(t){var e=Math.floor((t.Bb+7-(t.Ab+6)%7)/7);if(2>=(t.Ab+371-t.Bb-2)%7&&e++,e)53==e&&(4==(n=(t.Ab+371-t.Bb)%7)||3==n&&pt(t.Cb)||(e=1));else{e=52;var n=(t.Ab+7-t.Bb-1)%7;(4==n||5==n&&pt(t.Cb%400-1))&&e++}return i(e,2)},\\\"%w\\\":function(t){return t.Ab},\\\"%W\\\":function(t){return i(Math.floor((t.Bb+7-(t.Ab+6)%7)/7),2)},\\\"%y\\\":function(t){return(t.Cb+1900).toString().substring(2)},\\\"%Y\\\":function(t){return t.Cb+1900},\\\"%z\\\":function(t){var e=0<=(t=t.Yb);return t=Math.abs(t)/60,(e?\\\"+\\\":\\\"-\\\")+String(\\\"0000\\\"+(t/60*100+t%60)).slice(-4)},\\\"%Z\\\":function(t){return t.ac},\\\"%%\\\":function(){return\\\"%\\\"}},n=n.replace(/%%/g,\\\"\\\\0\\\\0\\\"),s)n.includes(l)&&(n=n.replace(new RegExp(l,\\\"g\\\"),s[l](r)));return l=function(t){var e=Array(D(t)+1);return k(t,e,0,e.length),e}(n=n.replace(/\\\\0\\\\0/g,\\\"%\\\")),l.length>e?0:(S.set(l,t>>>0),l.length-1)}var bt={a:function(t){return gt(t+24)+24},m:function(t){return(t=new et(t)).Pb()||(t.Ib(!0),K--),t.Jb(!1),Q.push(t),t.Nb(),t.Qb()},ia:function(t){throw w(\\\"Unexpected exception thrown, this is not properly supported - aborting\\\"),C=!0,t},w:function(){Ot(0);var t=Q.pop();if(t.Xb()&&!t.Lb()){var e=t.Wb();e&&at(e)(t.Db),nt(t.Db)}tt=0},d:function(){var t=tt;if(!t)return ft=0;var e=new et(t);e.Fb(t);var n=e.Eb();if(!n)return ft=0,t;for(var r=Array.prototype.slice.call(arguments),a=0;a<r.length;a++){var i=r[a];if(0===i||i===n)break;if(Et(i,n,e.zb+16))return ft=i,t}return ft=n,t},k:function(){var t=tt;if(!t)return ft=0;var e=new et(t);e.Fb(t);var n=e.Eb();if(!n)return ft=0,t;for(var r=Array.prototype.slice.call(arguments),a=0;a<r.length;a++){var i=r[a];if(0===i||i===n)break;if(Et(i,n,e.zb+16))return ft=i,t}return ft=n,t},g:function(){var t=tt;if(!t)return ft=0;var e=new et(t);e.Fb(t);var n=e.Eb();if(!n)return ft=0,t;for(var r=Array.prototype.slice.call(arguments),a=0;a<r.length;a++){var i=r[a];if(0===i||i===n)break;if(Et(i,n,e.zb+16))return ft=i,t}return ft=n,t},s:nt,L:function(){var t=Q.pop();t||V(\\\"no exception to throw\\\");var e=t.Db;throw t.Lb()||(Q.push(t),t.Jb(!0),t.Ib(!1),K++),tt=e,e},b:function(t,e,n){throw new et(t).Rb(e,n),tt=t,K++,t},la:function(){return K},i:function(t){throw tt||(tt=t),t},H:function(){return 0},Ba:function(){},pa:function(){},ra:function(){},ka:function(){return 0},za:function(){},ua:function(){},ya:function(){},R:function(){},qa:function(){},na:function(){},Aa:function(){},oa:function(){},Ha:function(){},Ja:function(){V(\\\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},Ia:function(){V(\\\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},S:function(){return Date.now()},Ca:function(){return!0},Da:function(t,e){t=new Date(1e3*(M[t>>>2]+4294967296*E[t+4>>>2])),E[e>>2>>>0]=t.getUTCSeconds(),E[e+4>>2>>>0]=t.getUTCMinutes(),E[e+8>>2>>>0]=t.getUTCHours(),E[e+12>>2>>>0]=t.getUTCDate(),E[e+16>>2>>>0]=t.getUTCMonth(),E[e+20>>2>>>0]=t.getUTCFullYear()-1900,E[e+24>>2>>>0]=t.getUTCDay(),E[e+28>>2>>>0]=(t.getTime()-Date.UTC(t.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},Ea:function(t,e){t=new Date(1e3*(M[t>>>2]+4294967296*E[t+4>>>2])),E[e>>2>>>0]=t.getSeconds(),E[e+4>>2>>>0]=t.getMinutes(),E[e+8>>2>>>0]=t.getHours(),E[e+12>>2>>>0]=t.getDate(),E[e+16>>2>>>0]=t.getMonth(),E[e+20>>2>>>0]=t.getFullYear()-1900,E[e+24>>2>>>0]=t.getDay();var n=new Date(t.getFullYear(),0,1);E[e+28>>2>>>0]=(t.getTime()-n.getTime())/864e5|0,E[e+36>>2>>>0]=-60*t.getTimezoneOffset();var r=new Date(t.getFullYear(),6,1).getTimezoneOffset();n=n.getTimezoneOffset(),E[e+32>>2>>>0]=0|(r!=n&&t.getTimezoneOffset()==Math.min(n,r))},Fa:function(t){var e=new Date(E[t+20>>2>>>0]+1900,E[t+16>>2>>>0],E[t+12>>2>>>0],E[t+8>>2>>>0],E[t+4>>2>>>0],E[t>>2>>>0],0),n=E[t+32>>2>>>0],r=e.getTimezoneOffset(),a=new Date(e.getFullYear(),0,1),i=new Date(e.getFullYear(),6,1).getTimezoneOffset(),o=a.getTimezoneOffset(),u=Math.min(o,i);return 0>n?E[t+32>>2>>>0]=Number(i!=o&&u==r):0<n!=(u==r)&&(i=Math.max(o,i),e.setTime(e.getTime()+6e4*((0<n?u:i)-r))),E[t+24>>2>>>0]=e.getDay(),E[t+28>>2>>>0]=(e.getTime()-a.getTime())/864e5|0,E[t>>2>>>0]=e.getSeconds(),E[t+4>>2>>>0]=e.getMinutes(),E[t+8>>2>>>0]=e.getHours(),E[t+12>>2>>>0]=e.getDate(),E[t+16>>2>>>0]=e.getMonth(),e.getTime()/1e3|0},sa:function(){return-52},ta:function(){},Ga:function t(e,n,r){t.Vb||(t.Vb=!0,function(t,e,n){function r(t){return(t=t.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?t[1]:\\\"GMT\\\"}var a=(new Date).getFullYear(),i=new Date(a,0,1),o=new Date(a,6,1);a=i.getTimezoneOffset();var u=o.getTimezoneOffset();E[t>>2>>>0]=60*Math.max(a,u),E[e>>2>>>0]=Number(a!=u),t=r(i),e=r(o),t=it(t),e=it(e),u<a?(M[n>>2>>>0]=t,M[n+4>>2>>>0]=e):(M[n>>2>>>0]=e,M[n+4>>2>>>0]=t)}(e,n,r))},B:function(){V(\\\"\\\")},ma:function(){return 4294901760},I:b?()=>{var t=process.hrtime();return 1e3*t[0]+t[1]/1e6}:()=>performance.now(),xa:function(t,e,n){T.copyWithin(t>>>0,e>>>0,e+n>>>0)},G:function(t){var e=T.length;if(4294901760<(t>>>=0))return!1;for(var n=1;4>=n;n*=2){var r=e*(1+.2/n);r=Math.min(r,t+100663296);var a=Math;r=Math.max(t,r),a=a.min.call(a,4294901760,r+(65536-r%65536)%65536);t:{try{O.grow(a-A.byteLength+65535>>>16),P();var i=1;break t}catch(t){}i=void 0}if(i)return!0}return!1},va:function(t,e){var n=0;return ut().forEach((function(r,a){var i=e+n;for(a=M[t+4*a>>2>>>0]=i,i=0;i<r.length;++i)S[a++>>0>>>0]=r.charCodeAt(i);S[a>>0>>>0]=0,n+=r.length+1})),0},wa:function(t,e){var n=ut();M[t>>2>>>0]=n.length;var r=0;return n.forEach((function(t){r+=t.length+1})),M[e>>2>>>0]=r,0},ba:function(t){_||0<L||(_t(),Z(W),wt(0),st[1].length&&lt(1,10),st[2].length&&lt(2,10)),_||0<L||(e.onExit&&e.onExit(t),C=!0),h(t,new J(t))},E:function(){return 52},Q:function(){return 52},ca:function(){return 70},P:function(t,e,n,r){for(var a=0,i=0;i<n;i++){var o=M[e>>2>>>0],u=M[e+4>>2>>>0];e+=8;for(var c=0;c<u;c++)lt(t,T[o+c>>>0]);a+=u}return M[r>>2>>>0]=a,0},c:function(){return ft},ja:function t(e,r){t.Mb||(t.Mb=function(){if(\\\"object\\\"==typeof crypto&&\\\"function\\\"==typeof crypto.getRandomValues){var t=new Uint8Array(1);return()=>(crypto.getRandomValues(t),t[0])}if(b)try{var e=n(Object(function(){var t=new Error(\\\"Cannot find module 'crypto'\\\");throw t.code=\\\"MODULE_NOT_FOUND\\\",t}()));return()=>e.randomBytes(1)[0]}catch(t){}return()=>V(\\\"randomDevice\\\")}());for(var a=0;a<r;a++)S[e+a>>0>>>0]=t.Mb();return 0},ea:function(t,e,n){var r=At();try{return at(t)(e,n)}catch(t){if(St(r),t!==t+0)throw t;Ot(1,0)}},fa:function(t,e,n){var r=At();try{return at(t)(e,n)}catch(t){if(St(r),t!==t+0)throw t;Ot(1,0)}},J:function(t){var e=At();try{return at(t)()}catch(t){if(St(e),t!==t+0)throw t;Ot(1,0)}},e:function(t,e){var n=At();try{return at(t)(e)}catch(t){if(St(n),t!==t+0)throw t;Ot(1,0)}},N:function(t,e,n){var r=At();try{return at(t)(e,n)}catch(t){if(St(r),t!==t+0)throw t;Ot(1,0)}},O:function(t,e,n){var r=At();try{return at(t)(e,n)}catch(t){if(St(r),t!==t+0)throw t;Ot(1,0)}},j:function(t,e,n){var r=At();try{return at(t)(e,n)}catch(t){if(St(r),t!==t+0)throw t;Ot(1,0)}},o:function(t,e,n,r){var a=At();try{return at(t)(e,n,r)}catch(t){if(St(a),t!==t+0)throw t;Ot(1,0)}},p:function(t,e,n,r,a){var i=At();try{return at(t)(e,n,r,a)}catch(t){if(St(i),t!==t+0)throw t;Ot(1,0)}},M:function(t,e,n,r,a,i){var o=At();try{return at(t)(e,n,r,a,i)}catch(t){if(St(o),t!==t+0)throw t;Ot(1,0)}},r:function(t,e,n,r,a,i){var o=At();try{return at(t)(e,n,r,a,i)}catch(t){if(St(o),t!==t+0)throw t;Ot(1,0)}},v:function(t,e,n,r,a,i,o){var u=At();try{return at(t)(e,n,r,a,i,o)}catch(t){if(St(u),t!==t+0)throw t;Ot(1,0)}},K:function(t,e,n,r,a,i,o,u){var c=At();try{return at(t)(e,n,r,a,i,o,u)}catch(t){if(St(c),t!==t+0)throw t;Ot(1,0)}},D:function(t,e,n,r,a,i,o,u,c,s,l,f){var p=At();try{return at(t)(e,n,r,a,i,o,u,c,s,l,f)}catch(t){if(St(p),t!==t+0)throw t;Ot(1,0)}},X:function(t,e,n,r,a,i,o,u){var c=At();try{return Ft(t,e,n,r,a,i,o,u)}catch(t){if(St(c),t!==t+0)throw t;Ot(1,0)}},V:function(t,e,n,r,a,i,o){var u=At();try{return xt(t,e,n,r,a,i,o)}catch(t){if(St(u),t!==t+0)throw t;Ot(1,0)}},U:function(t,e,n,r,a){var i=At();try{return It(t,e,n,r,a)}catch(t){if(St(i),t!==t+0)throw t;Ot(1,0)}},Z:function(t,e,n,r){var a=At();try{return Pt(t,e,n,r)}catch(t){if(St(a),t!==t+0)throw t;Ot(1,0)}},W:function(t){var e=At();try{return Ct(t)}catch(t){if(St(e),t!==t+0)throw t;Ot(1,0)}},Y:function(t,e){var n=At();try{return Ut(t,e)}catch(t){if(St(n),t!==t+0)throw t;Ot(1,0)}},T:function(t,e,n){var r=At();try{return Rt(t,e,n)}catch(t){if(St(r),t!==t+0)throw t;Ot(1,0)}},f:function(t){var e=At();try{at(t)()}catch(t){if(St(e),t!==t+0)throw t;Ot(1,0)}},q:function(t,e){var n=At();try{at(t)(e)}catch(t){if(St(n),t!==t+0)throw t;Ot(1,0)}},h:function(t,e,n){var r=At();try{at(t)(e,n)}catch(t){if(St(r),t!==t+0)throw t;Ot(1,0)}},da:function(t,e,n,r){var a=At();try{at(t)(e,n,r)}catch(t){if(St(a),t!==t+0)throw t;Ot(1,0)}},l:function(t,e,n,r){var a=At();try{at(t)(e,n,r)}catch(t){if(St(a),t!==t+0)throw t;Ot(1,0)}},t:function(t,e,n,r,a){var i=At();try{at(t)(e,n,r,a)}catch(t){if(St(i),t!==t+0)throw t;Ot(1,0)}},u:function(t,e,n,r,a,i){var o=At();try{at(t)(e,n,r,a,i)}catch(t){if(St(o),t!==t+0)throw t;Ot(1,0)}},x:function(t,e,n,r,a,i,o){var u=At();try{at(t)(e,n,r,a,i,o)}catch(t){if(St(u),t!==t+0)throw t;Ot(1,0)}},z:function(t,e,n,r,a,i,o,u){var c=At();try{at(t)(e,n,r,a,i,o,u)}catch(t){if(St(c),t!==t+0)throw t;Ot(1,0)}},ga:function(t,e,n,r,a,i,o,u,c){var s=At();try{at(t)(e,n,r,a,i,o,u,c)}catch(t){if(St(s),t!==t+0)throw t;Ot(1,0)}},A:function(t,e,n,r,a,i,o,u,c,s,l){var f=At();try{at(t)(e,n,r,a,i,o,u,c,s,l)}catch(t){if(St(f),t!==t+0)throw t;Ot(1,0)}},C:function(t,e,n,r,a,i,o,u,c,s,l,f,p,h,d,y){var b=At();try{at(t)(e,n,r,a,i,o,u,c,s,l,f,p,h,d,y)}catch(t){if(St(b),t!==t+0)throw t;Ot(1,0)}},aa:function(t,e,n,r,a,i,o,u){var c=At();try{jt(t,e,n,r,a,i,o,u)}catch(t){if(St(c),t!==t+0)throw t;Ot(1,0)}},_:function(t,e,n,r,a,i,o,u,c,s,l,f){var p=At();try{Dt(t,e,n,r,a,i,o,u,c,s,l,f)}catch(t){if(St(p),t!==t+0)throw t;Ot(1,0)}},$:function(t,e,n,r,a,i){var o=At();try{kt(t,e,n,r,a,i)}catch(t){if(St(o),t!==t+0)throw t;Ot(1,0)}},n:function(t){return t},F:function(t){ft=t},ha:yt,y:function(t,e,n,r){return yt(t,e,n,r)}};!function(){function t(t){e.asm=t.exports,O=e.asm.Ka,P(),U=e.asm.ib,I.unshift(e.asm.La),B--,e.monitorRunDependencies&&e.monitorRunDependencies(B),0==B&&(null!==G&&(clearInterval(G),G=null),N&&(t=N,N=null,t()))}function n(e){t(e.instance)}function r(t){return function(){if(!g&&(d||y)){if(\\\"function\\\"==typeof fetch&&!Y.startsWith(\\\"file://\\\"))return fetch(Y,{credentials:\\\"same-origin\\\"}).then((function(t){if(!t.ok)throw\\\"failed to load wasm binary file at '\\\"+Y+\\\"'\\\";return t.arrayBuffer()})).catch((function(){return X()}));if(o)return new Promise((function(t,e){o(Y,(function(e){t(new Uint8Array(e))}),e)}))}return Promise.resolve().then((function(){return X()}))}().then((function(t){return WebAssembly.instantiate(t,i)})).then((function(t){return t})).then(t,(function(t){w(\\\"failed to asynchronously prepare wasm: \\\"+t),V(t)}))}var i={a:bt};if(B++,e.monitorRunDependencies&&e.monitorRunDependencies(B),e.instantiateWasm)try{return e.instantiateWasm(i,t)}catch(t){return w(\\\"Module.instantiateWasm callback failed with error: \\\"+t),!1}(g||\\\"function\\\"!=typeof WebAssembly.instantiateStreaming||$()||Y.startsWith(\\\"file://\\\")||b||\\\"function\\\"!=typeof fetch?r(n):fetch(Y,{credentials:\\\"same-origin\\\"}).then((function(t){return WebAssembly.instantiateStreaming(t,i).then(n,(function(t){return w(\\\"wasm streaming compile failed: \\\"+t),w(\\\"falling back to ArrayBuffer instantiation\\\"),r(n)}))}))).catch(a)}(),e.___wasm_call_ctors=function(){return(e.___wasm_call_ctors=e.asm.La).apply(null,arguments)},e._OrtInit=function(){return(e._OrtInit=e.asm.Ma).apply(null,arguments)},e._OrtCreateSessionOptions=function(){return(e._OrtCreateSessionOptions=e.asm.Na).apply(null,arguments)},e._OrtAppendExecutionProvider=function(){return(e._OrtAppendExecutionProvider=e.asm.Oa).apply(null,arguments)},e._OrtAddSessionConfigEntry=function(){return(e._OrtAddSessionConfigEntry=e.asm.Pa).apply(null,arguments)},e._OrtReleaseSessionOptions=function(){return(e._OrtReleaseSessionOptions=e.asm.Qa).apply(null,arguments)},e._OrtCreateSession=function(){return(e._OrtCreateSession=e.asm.Ra).apply(null,arguments)},e._OrtReleaseSession=function(){return(e._OrtReleaseSession=e.asm.Sa).apply(null,arguments)},e._OrtGetInputCount=function(){return(e._OrtGetInputCount=e.asm.Ta).apply(null,arguments)},e._OrtGetOutputCount=function(){return(e._OrtGetOutputCount=e.asm.Ua).apply(null,arguments)},e._OrtGetInputName=function(){return(e._OrtGetInputName=e.asm.Va).apply(null,arguments)},e._OrtGetOutputName=function(){return(e._OrtGetOutputName=e.asm.Wa).apply(null,arguments)},e._OrtFree=function(){return(e._OrtFree=e.asm.Xa).apply(null,arguments)},e._OrtCreateTensor=function(){return(e._OrtCreateTensor=e.asm.Ya).apply(null,arguments)},e._OrtGetTensorData=function(){return(e._OrtGetTensorData=e.asm.Za).apply(null,arguments)},e._OrtReleaseTensor=function(){return(e._OrtReleaseTensor=e.asm._a).apply(null,arguments)},e._OrtCreateRunOptions=function(){return(e._OrtCreateRunOptions=e.asm.$a).apply(null,arguments)},e._OrtAddRunConfigEntry=function(){return(e._OrtAddRunConfigEntry=e.asm.ab).apply(null,arguments)},e._OrtReleaseRunOptions=function(){return(e._OrtReleaseRunOptions=e.asm.bb).apply(null,arguments)},e._OrtRun=function(){return(e._OrtRun=e.asm.cb).apply(null,arguments)},e._OrtEndProfiling=function(){return(e._OrtEndProfiling=e.asm.db).apply(null,arguments)};var mt,gt=e._malloc=function(){return(gt=e._malloc=e.asm.eb).apply(null,arguments)},vt=e._free=function(){return(vt=e._free=e.asm.fb).apply(null,arguments)},wt=e._fflush=function(){return(wt=e._fflush=e.asm.gb).apply(null,arguments)},_t=e.___funcs_on_exit=function(){return(_t=e.___funcs_on_exit=e.asm.hb).apply(null,arguments)},Ot=e._setThrew=function(){return(Ot=e._setThrew=e.asm.jb).apply(null,arguments)},At=e.stackSave=function(){return(At=e.stackSave=e.asm.kb).apply(null,arguments)},St=e.stackRestore=function(){return(St=e.stackRestore=e.asm.lb).apply(null,arguments)},Tt=e.stackAlloc=function(){return(Tt=e.stackAlloc=e.asm.mb).apply(null,arguments)},Et=e.___cxa_can_catch=function(){return(Et=e.___cxa_can_catch=e.asm.nb).apply(null,arguments)},Mt=e.___cxa_is_pointer_type=function(){return(Mt=e.___cxa_is_pointer_type=e.asm.ob).apply(null,arguments)},Ct=e.dynCall_j=function(){return(Ct=e.dynCall_j=e.asm.pb).apply(null,arguments)},xt=e.dynCall_iiiiij=function(){return(xt=e.dynCall_iiiiij=e.asm.qb).apply(null,arguments)},Rt=e.dynCall_jii=function(){return(Rt=e.dynCall_jii=e.asm.rb).apply(null,arguments)},jt=e.dynCall_viiiiij=function(){return(jt=e.dynCall_viiiiij=e.asm.sb).apply(null,arguments)},kt=e.dynCall_vjji=function(){return(kt=e.dynCall_vjji=e.asm.tb).apply(null,arguments)},Dt=e.dynCall_viiijjjii=function(){return(Dt=e.dynCall_viiijjjii=e.asm.ub).apply(null,arguments)},Pt=e.dynCall_iij=function(){return(Pt=e.dynCall_iij=e.asm.vb).apply(null,arguments)},Ut=e.dynCall_ji=function(){return(Ut=e.dynCall_ji=e.asm.wb).apply(null,arguments)},Ft=e.dynCall_iiiiiij=function(){return(Ft=e.dynCall_iiiiiij=e.asm.xb).apply(null,arguments)},It=e.dynCall_iiij=function(){return(It=e.dynCall_iiij=e.asm.yb).apply(null,arguments)};function Wt(){function t(){if(!mt&&(mt=!0,e.calledRun=!0,!C)){if(Z(I),r(e),e.onRuntimeInitialized&&e.onRuntimeInitialized(),e.postRun)for(\\\"function\\\"==typeof e.postRun&&(e.postRun=[e.postRun]);e.postRun.length;){var t=e.postRun.shift();H.unshift(t)}Z(H)}}if(!(0<B)){if(e.preRun)for(\\\"function\\\"==typeof e.preRun&&(e.preRun=[e.preRun]);e.preRun.length;)z();Z(F),0<B||(e.setStatus?(e.setStatus(\\\"Running...\\\"),setTimeout((function(){setTimeout((function(){e.setStatus(\\\"\\\")}),1),t()}),1)):t())}}if(e.UTF8ToString=j,e.stringToUTF8=function(t,e,n){return k(t,T,e,n)},e.lengthBytesUTF8=D,e.stackSave=At,e.stackRestore=St,e.stackAlloc=Tt,N=function t(){mt||Wt(),mt||(N=t)},e.preInit)for(\\\"function\\\"==typeof e.preInit&&(e.preInit=[e.preInit]);0<e.preInit.length;)e.preInit.pop()();return Wt(),t.ready});t.exports=r},967:(t,e)=>{\\\"use strict\\\";Object.defineProperty(e,\\\"__esModule\\\",{value:!0}),e.iterateExtraOptions=void 0,e.iterateExtraOptions=(t,n,r,a)=>{if(\\\"object\\\"==typeof t&&null!==t){if(r.has(t))throw new Error(\\\"Circular reference in options\\\");r.add(t)}Object.entries(t).forEach((([t,i])=>{const o=n?n+t:t;if(\\\"object\\\"==typeof i)(0,e.iterateExtraOptions)(i,o+\\\".\\\",r,a);else if(\\\"string\\\"==typeof i||\\\"number\\\"==typeof i)a(o,i.toString());else{if(\\\"boolean\\\"!=typeof i)throw new Error(\\\"Can't handle extra config type: \\\"+typeof i);a(o,i?\\\"1\\\":\\\"0\\\")}}))}},586:(t,e,n)=>{\\\"use strict\\\";Object.defineProperty(e,\\\"__esModule\\\",{value:!0}),e.setRunOptions=void 0;const r=n(967),a=n(983),i=n(361);e.setRunOptions=t=>{const e=(0,i.getInstance)();let n=0;const o=[],u=t||{};try{if(void 0===(null==t?void 0:t.logSeverityLevel))u.logSeverityLevel=2;else if(\\\"number\\\"!=typeof t.logSeverityLevel||!Number.isInteger(t.logSeverityLevel)||t.logSeverityLevel<0||t.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${t.logSeverityLevel}`);if(void 0===(null==t?void 0:t.logVerbosityLevel))u.logVerbosityLevel=0;else if(\\\"number\\\"!=typeof t.logVerbosityLevel||!Number.isInteger(t.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${t.logVerbosityLevel}`);void 0===(null==t?void 0:t.terminate)&&(u.terminate=!1);let i=0;if(void 0!==(null==t?void 0:t.tag)&&(i=(0,a.allocWasmString)(t.tag,o)),n=e._OrtCreateRunOptions(u.logSeverityLevel,u.logVerbosityLevel,!!u.terminate,i),0===n)throw new Error(\\\"Can't create run options\\\");return void 0!==(null==t?void 0:t.extra)&&(0,r.iterateExtraOptions)(t.extra,\\\"\\\",new WeakSet,((t,r)=>{const i=(0,a.allocWasmString)(t,o),u=(0,a.allocWasmString)(r,o);if(0!==e._OrtAddRunConfigEntry(n,i,u))throw new Error(`Can't set a run config entry: ${t} - ${r}`)})),[n,o]}catch(t){throw 0!==n&&e._OrtReleaseRunOptions(n),o.forEach(e._free),t}}},919:(t,e,n)=>{\\\"use strict\\\";Object.defineProperty(e,\\\"__esModule\\\",{value:!0}),e.setSessionOptions=void 0;const r=n(967),a=n(983),i=n(361);e.setSessionOptions=t=>{const e=(0,i.getInstance)();let n=0;const o=[],u=t||{};(t=>{t.extra||(t.extra={}),t.extra.session||(t.extra.session={});const e=t.extra.session;e.use_ort_model_bytes_directly||(e.use_ort_model_bytes_directly=\\\"1\\\")})(u);try{void 0===(null==t?void 0:t.graphOptimizationLevel)&&(u.graphOptimizationLevel=\\\"all\\\");const c=(t=>{switch(t){case\\\"disabled\\\":return 0;case\\\"basic\\\":return 1;case\\\"extended\\\":return 2;case\\\"all\\\":return 99;default:throw new Error(`unsupported graph optimization level: ${t}`)}})(u.graphOptimizationLevel);void 0===(null==t?void 0:t.enableCpuMemArena)&&(u.enableCpuMemArena=!0),void 0===(null==t?void 0:t.enableMemPattern)&&(u.enableMemPattern=!0),void 0===(null==t?void 0:t.executionMode)&&(u.executionMode=\\\"sequential\\\");const s=(t=>{switch(t){case\\\"sequential\\\":return 0;case\\\"parallel\\\":return 1;default:throw new Error(`unsupported execution mode: ${t}`)}})(u.executionMode);let l=0;if(void 0!==(null==t?void 0:t.logId)&&(l=(0,a.allocWasmString)(t.logId,o)),void 0===(null==t?void 0:t.logSeverityLevel))u.logSeverityLevel=2;else if(\\\"number\\\"!=typeof t.logSeverityLevel||!Number.isInteger(t.logSeverityLevel)||t.logSeverityLevel<0||t.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${t.logSeverityLevel}`);if(void 0===(null==t?void 0:t.logVerbosityLevel))u.logVerbosityLevel=0;else if(\\\"number\\\"!=typeof t.logVerbosityLevel||!Number.isInteger(t.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${t.logVerbosityLevel}`);if(void 0===(null==t?void 0:t.enableProfiling)&&(u.enableProfiling=!1),n=e._OrtCreateSessionOptions(c,!!u.enableCpuMemArena,!!u.enableMemPattern,s,!!u.enableProfiling,0,l,u.logSeverityLevel,u.logVerbosityLevel),0===n)throw new Error(\\\"Can't create session options\\\");return(null==t?void 0:t.executionProviders)&&((t,e,n)=>{for(const r of e){let e=\\\"string\\\"==typeof r?r:r.name;switch(e){case\\\"xnnpack\\\":e=\\\"XNNPACK\\\";break;case\\\"wasm\\\":case\\\"cpu\\\":continue;default:throw new Error(`not supported EP: ${e}`)}const o=(0,a.allocWasmString)(e,n);if(0!==(0,i.getInstance)()._OrtAppendExecutionProvider(t,o))throw new Error(`Can't append execution provider: ${e}`)}})(n,t.executionProviders,o),void 0!==(null==t?void 0:t.extra)&&(0,r.iterateExtraOptions)(t.extra,\\\"\\\",new WeakSet,((t,r)=>{const i=(0,a.allocWasmString)(t,o),u=(0,a.allocWasmString)(r,o);if(0!==e._OrtAddSessionConfigEntry(n,i,u))throw new Error(`Can't set a session config entry: ${t} - ${r}`)})),[n,o]}catch(t){throw 0!==n&&e._OrtReleaseSessionOptions(n),o.forEach(e._free),t}}},983:(t,e,n)=>{\\\"use strict\\\";Object.defineProperty(e,\\\"__esModule\\\",{value:!0}),e.allocWasmString=void 0;const r=n(361);e.allocWasmString=(t,e)=>{const n=(0,r.getInstance)(),a=n.lengthBytesUTF8(t)+1,i=n._malloc(a);return n.stringToUTF8(t,i,a),e.push(i),i}},349:(t,e,n)=>{\\\"use strict\\\";Object.defineProperty(e,\\\"__esModule\\\",{value:!0}),e.extractTransferableBuffers=e.endProfiling=e.run=e.releaseSession=e.createSession=e.createSessionFinalize=e.createSessionAllocate=e.initOrt=void 0;const r=n(586),a=n(919),i=n(983),o=n(361);e.initOrt=(t,e)=>{const n=(0,o.getInstance)()._OrtInit(t,e);if(0!==n)throw new Error(`Can't initialize onnxruntime. error code = ${n}`)};const u=new Map;e.createSessionAllocate=t=>{const e=(0,o.getInstance)(),n=e._malloc(t.byteLength);return e.HEAPU8.set(t,n),[n,t.byteLength]},e.createSessionFinalize=(t,e)=>{const n=(0,o.getInstance)();let r=0,i=0,c=[];try{if([i,c]=(0,a.setSessionOptions)(e),r=n._OrtCreateSession(t[0],t[1],i),0===r)throw new Error(\\\"Can't create a session\\\")}finally{n._free(t[0]),n._OrtReleaseSessionOptions(i),c.forEach(n._free)}const s=n._OrtGetInputCount(r),l=n._OrtGetOutputCount(r),f=[],p=[],h=[],d=[];for(let t=0;t<s;t++){const e=n._OrtGetInputName(r,t);if(0===e)throw new Error(\\\"Can't get an input name\\\");p.push(e),f.push(n.UTF8ToString(e))}for(let t=0;t<l;t++){const e=n._OrtGetOutputName(r,t);if(0===e)throw new Error(\\\"Can't get an output name\\\");d.push(e),h.push(n.UTF8ToString(e))}return u.set(r,[r,p,d]),[r,f,h]},e.createSession=(t,n)=>{const r=(0,e.createSessionAllocate)(t);return(0,e.createSessionFinalize)(r,n)},e.releaseSession=t=>{const e=(0,o.getInstance)(),n=u.get(t);if(!n)throw new Error(\\\"invalid session id\\\");const r=n[0],a=n[1],i=n[2];a.forEach(e._OrtFree),i.forEach(e._OrtFree),e._OrtReleaseSession(r),u.delete(t)};const c=t=>{switch(t){case\\\"int8\\\":return 3;case\\\"uint8\\\":return 2;case\\\"bool\\\":return 9;case\\\"int16\\\":return 5;case\\\"uint16\\\":return 4;case\\\"int32\\\":return 6;case\\\"uint32\\\":return 12;case\\\"float32\\\":return 1;case\\\"float64\\\":return 11;case\\\"string\\\":return 8;case\\\"int64\\\":return 7;case\\\"uint64\\\":return 13;default:throw new Error(`unsupported data type: ${t}`)}},s=t=>{switch(t){case 3:return\\\"int8\\\";case 2:return\\\"uint8\\\";case 9:return\\\"bool\\\";case 5:return\\\"int16\\\";case 4:return\\\"uint16\\\";case 6:return\\\"int32\\\";case 12:return\\\"uint32\\\";case 1:return\\\"float32\\\";case 11:return\\\"float64\\\";case 8:return\\\"string\\\";case 7:return\\\"int64\\\";case 13:return\\\"uint64\\\";default:throw new Error(`unsupported data type: ${t}`)}},l=t=>{switch(t){case\\\"float32\\\":return Float32Array;case\\\"uint8\\\":case\\\"bool\\\":return Uint8Array;case\\\"int8\\\":return Int8Array;case\\\"uint16\\\":return Uint16Array;case\\\"int16\\\":return Int16Array;case\\\"int32\\\":return Int32Array;case\\\"float64\\\":return Float64Array;case\\\"uint32\\\":return Uint32Array;case\\\"int64\\\":return BigInt64Array;case\\\"uint64\\\":return BigUint64Array;default:throw new Error(`unsupported type: ${t}`)}};e.run=(t,e,n,a,f)=>{const p=(0,o.getInstance)(),h=u.get(t);if(!h)throw new Error(\\\"invalid session id\\\");const d=h[0],y=h[1],b=h[2],m=e.length,g=a.length;let v=0,w=[];const _=[],O=[];try{[v,w]=(0,r.setRunOptions)(f);for(let t=0;t<m;t++){const e=n[t][0],r=n[t][1],a=n[t][2];let o,u;if(Array.isArray(a)){u=4*a.length,o=p._malloc(u),O.push(o);let t=o/4;for(let e=0;e<a.length;e++){if(\\\"string\\\"!=typeof a[e])throw new TypeError(`tensor data at index ${e} is not a string`);p.HEAPU32[t++]=(0,i.allocWasmString)(a[e],O)}}else u=a.byteLength,o=p._malloc(u),O.push(o),p.HEAPU8.set(new Uint8Array(a.buffer,a.byteOffset,u),o);const s=p.stackSave(),l=p.stackAlloc(4*r.length);try{let t=l/4;r.forEach((e=>p.HEAP32[t++]=e));const n=p._OrtCreateTensor(c(e),o,u,l,r.length);if(0===n)throw new Error(\\\"Can't create a tensor\\\");_.push(n)}finally{p.stackRestore(s)}}const t=p.stackSave(),o=p.stackAlloc(4*m),u=p.stackAlloc(4*m),h=p.stackAlloc(4*g),A=p.stackAlloc(4*g);try{let n=o/4,r=u/4,i=h/4,c=A/4;for(let t=0;t<m;t++)p.HEAPU32[n++]=_[t],p.HEAPU32[r++]=y[e[t]];for(let t=0;t<g;t++)p.HEAPU32[i++]=0,p.HEAPU32[c++]=b[a[t]];let f=p._OrtRun(d,u,o,m,A,g,h,v);const w=[];if(0===f)for(let t=0;t<g;t++){const e=p.HEAPU32[h/4+t],n=p.stackSave(),r=p.stackAlloc(16);let a,i=0;try{if(f=p._OrtGetTensorData(e,r,r+4,r+8,r+12),0!==f)throw new Error(`Can't access output tensor data. error code = ${f}`);let t=r/4;const o=p.HEAPU32[t++];i=p.HEAPU32[t++];const u=p.HEAPU32[t++],c=p.HEAPU32[t++],h=[];for(let t=0;t<c;t++)h.push(p.HEAPU32[u/4+t]);p._OrtFree(u);const d=0===h.length?1:h.reduce(((t,e)=>t*e));if(a=s(o),\\\"string\\\"===a){const t=[];let e=i/4;for(let n=0;n<d;n++){const r=p.HEAPU32[e++],a=n===d-1?void 0:p.HEAPU32[e]-r;t.push(p.UTF8ToString(r,a))}w.push([a,h,t])}else{const t=new(l(a))(d);new Uint8Array(t.buffer,t.byteOffset,t.byteLength).set(p.HEAPU8.subarray(i,i+t.byteLength)),w.push([a,h,t])}}finally{p.stackRestore(n),\\\"string\\\"===a&&i&&p._free(i),p._OrtReleaseTensor(e)}}if(0===f)return w;throw new Error(`failed to call OrtRun(). error code = ${f}.`)}finally{p.stackRestore(t)}}finally{_.forEach(p._OrtReleaseTensor),O.forEach(p._free),p._OrtReleaseRunOptions(v),w.forEach(p._free)}},e.endProfiling=t=>{const e=(0,o.getInstance)(),n=u.get(t);if(!n)throw new Error(\\\"invalid session id\\\");const r=n[0],a=e._OrtEndProfiling(r);if(0===a)throw new Error(\\\"Can't get an profile file name\\\");e._OrtFree(a)},e.extractTransferableBuffers=t=>{const e=[];for(const n of t){const t=n[2];!Array.isArray(t)&&t.buffer&&e.push(t.buffer)}return e}},361:function(t,e,n){\\\"use strict\\\";var r=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n);var a=Object.getOwnPropertyDescriptor(e,n);a&&!(\\\"get\\\"in a?!e.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return e[n]}}),Object.defineProperty(t,r,a)}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),a=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,\\\"default\\\",{enumerable:!0,value:e})}:function(t,e){t.default=e}),i=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)\\\"default\\\"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&r(e,t,n);return a(e,t),e},o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,\\\"__esModule\\\",{value:!0}),e.dispose=e.getInstance=e.initializeWebAssembly=void 0;const u=i(n(449)),c=o(n(932)),s=n(474);let l,f=!1,p=!1,h=!1;const d=(t,e)=>e?t?\\\"ort-wasm-simd-threaded.wasm\\\":\\\"ort-wasm-threaded.wasm\\\":t?\\\"ort-wasm-simd.wasm\\\":\\\"ort-wasm.wasm\\\";e.initializeWebAssembly=async t=>{if(f)return Promise.resolve();if(p)throw new Error(\\\"multiple calls to 'initializeWebAssembly()' detected.\\\");if(h)throw new Error(\\\"previous call to 'initializeWebAssembly()' failed.\\\");p=!0;const e=t.initTimeout,r=t.numThreads,a=t.simd,i=r>1&&(()=>{try{return\\\"undefined\\\"!=typeof SharedArrayBuffer&&(\\\"undefined\\\"!=typeof MessageChannel&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])))}catch(t){return!1}})(),o=a&&(()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch(t){return!1}})(),y=\\\"string\\\"==typeof t.wasmPaths?t.wasmPaths:void 0,b=d(!1,i),m=d(o,i),g=\\\"object\\\"==typeof t.wasmPaths?t.wasmPaths[m]:void 0;let v=!1;const w=[];if(e>0&&w.push(new Promise((t=>{setTimeout((()=>{v=!0,t()}),e)}))),w.push(new Promise(((t,e)=>{const r=i?s:c.default,a={locateFile:(t,e)=>i&&t.endsWith(\\\".worker.js\\\")&&\\\"undefined\\\"!=typeof Blob?URL.createObjectURL(new Blob([n(154)],{type:\\\"text/javascript\\\"})):t===b?null!=g?g:(null!=y?y:e)+m:e+t};if(i)if(\\\"undefined\\\"==typeof Blob)a.mainScriptUrlOrBlob=u.join(\\\"/\\\",\\\"ort-wasm-threaded.js\\\");else{const t=`var ortWasmThreaded=(function(){var _scriptDir;return ${r.toString()}})();`;a.mainScriptUrlOrBlob=new Blob([t],{type:\\\"text/javascript\\\"})}r(a).then((e=>{p=!1,f=!0,l=e,t()}),(t=>{p=!1,h=!0,e(t)}))}))),await Promise.race(w),v)throw new Error(`WebAssembly backend initializing failed due to timeout: ${e}ms`)},e.getInstance=()=>{if(f&&l)return l;throw new Error(\\\"WebAssembly is not initialized yet.\\\")},e.dispose=()=>{var t;!f||p||h||(p=!0,null===(t=l.PThread)||void 0===t||t.terminateAllThreads(),l=void 0,p=!1,f=!1,h=!0)}},154:t=>{\\\"use strict\\\";t.exports='\\\"use strict\\\";var e={},t=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node;if(t){var r=require(\\\"worker_threads\\\"),a=r.parentPort;a.on(\\\"message\\\",(e=>onmessage({data:e})));var o=require(\\\"fs\\\");Object.assign(global,{self:global,require:require,Module:e,location:{href:__filename},Worker:r.Worker,importScripts:function(e){(0,eval)(o.readFileSync(e,\\\"utf8\\\"))},postMessage:function(e){a.postMessage(e)},performance:global.performance||{now:function(){return Date.now()}}})}var s=!1,n=[],i=function(){var e=Array.prototype.slice.call(arguments).join(\\\" \\\");t?o.writeSync(2,e+\\\"\\\\\\\\n\\\"):console.error(e)};self.alert=function(){var t=Array.prototype.slice.call(arguments).join(\\\" \\\");postMessage({cmd:\\\"alert\\\",text:t,threadId:e._pthread_self()})},e.instantiateWasm=(t,r)=>{var a=new WebAssembly.Instance(e.wasmModule,t);return r(a),e.wasmModule=null,a.exports},self.onunhandledrejection=e=>{throw e.reason??e},self.onmessage=t=>{try{if(\\\"load\\\"===t.data.cmd){if(e.wasmModule=t.data.wasmModule,e.wasmMemory=t.data.wasmMemory,e.buffer=e.wasmMemory.buffer,e.ENVIRONMENT_IS_PTHREAD=!0,\\\"string\\\"==typeof t.data.urlOrBlob)importScripts(t.data.urlOrBlob);else{var r=URL.createObjectURL(t.data.urlOrBlob);importScripts(r),URL.revokeObjectURL(r)}ortWasmThreaded(e).then((function(t){e=t}))}else if(\\\"run\\\"===t.data.cmd){e.__performance_now_clock_drift=performance.now()-t.data.time,e.__emscripten_thread_init(t.data.pthread_ptr,0,0,1),e.establishStackSpace(),e.PThread.receiveObjectTransfer(t.data),e.PThread.threadInitTLS(),s||(n.forEach((t=>{e.executeNotifiedProxyingQueue(t)})),n=[],s=!0);try{e.invokeEntryPoint(t.data.start_routine,t.data.arg)}catch(t){if(\\\"unwind\\\"!=t){if(!(t instanceof e.ExitStatus))throw t;e.keepRuntimeAlive()||e.__emscripten_thread_exit(t.status)}}}else\\\"cancel\\\"===t.data.cmd?e._pthread_self()&&e.__emscripten_thread_exit(-1):\\\"setimmediate\\\"===t.data.target||(\\\"processProxyingQueue\\\"===t.data.cmd?s?e.executeNotifiedProxyingQueue(t.data.queue):n.push(t.data.queue):(i(\\\"worker.js received unknown command \\\"+t.data.cmd),i(t.data)))}catch(t){throw i(\\\"worker.js onmessage() captured an uncaught exception: \\\"+t),t&&t.stack&&i(t.stack),e.__emscripten_thread_crashed&&e.__emscripten_thread_crashed(),t}};\\\\n'},384:()=>{},993:()=>{},908:()=>{},953:()=>{},925:()=>{},449:()=>{}},e={};function n(r){var a=e[r];if(void 0!==a)return a.exports;var i=e[r]={exports:{}};return t[r].call(i.exports,i,i.exports,n),i.exports}n.g=function(){if(\\\"object\\\"==typeof globalThis)return globalThis;try{return this||new Function(\\\"return this\\\")()}catch(t){if(\\\"object\\\"==typeof window)return window}}(),(()=>{\\\"use strict\\\";const t=n(349),e=n(361);self.onmessage=n=>{switch(n.data.type){case\\\"init-wasm\\\":(0,e.initializeWebAssembly)(n.data.in).then((()=>postMessage({type:\\\"init-wasm\\\"})),(t=>postMessage({type:\\\"init-wasm\\\",err:t})));break;case\\\"init-ort\\\":try{const{numThreads:e,loggingLevel:r}=n.data.in;(0,t.initOrt)(e,r),postMessage({type:\\\"init-ort\\\"})}catch(t){postMessage({type:\\\"init-ort\\\",err:t})}break;case\\\"create_allocate\\\":try{const{model:e}=n.data.in,r=(0,t.createSessionAllocate)(e);postMessage({type:\\\"create_allocate\\\",out:r})}catch(t){postMessage({type:\\\"create_allocate\\\",err:t})}break;case\\\"create_finalize\\\":try{const{modeldata:e,options:r}=n.data.in,a=(0,t.createSessionFinalize)(e,r);postMessage({type:\\\"create_finalize\\\",out:a})}catch(t){postMessage({type:\\\"create_finalize\\\",err:t})}break;case\\\"create\\\":try{const{model:e,options:r}=n.data.in,a=(0,t.createSession)(e,r);postMessage({type:\\\"create\\\",out:a})}catch(t){postMessage({type:\\\"create\\\",err:t})}break;case\\\"release\\\":try{const e=n.data.in;(0,t.releaseSession)(e),postMessage({type:\\\"release\\\"})}catch(t){postMessage({type:\\\"release\\\",err:t})}break;case\\\"run\\\":try{const{sessionId:e,inputIndices:r,inputs:a,outputIndices:i,options:o}=n.data.in,u=(0,t.run)(e,r,a,i,o);postMessage({type:\\\"run\\\",out:u},(0,t.extractTransferableBuffers)(u))}catch(t){postMessage({type:\\\"run\\\",err:t})}break;case\\\"end-profiling\\\":try{const e=n.data.in;(0,t.endProfiling)(e),postMessage({type:\\\"end-profiling\\\"})}catch(t){postMessage({type:\\\"end-profiling\\\",err:t})}}}})()})();\\n\", \"Worker\", undefined, undefined);\n}\n","\"use strict\";\n\n/* eslint-env browser */\n\n/* eslint-disable no-undef, no-use-before-define, new-cap */\nmodule.exports = function (content, workerConstructor, workerOptions, url) {\n  var globalScope = self || window;\n\n  try {\n    try {\n      var blob;\n\n      try {\n        // New API\n        blob = new globalScope.Blob([content]);\n      } catch (e) {\n        // BlobBuilder = Deprecated, but widely implemented\n        var BlobBuilder = globalScope.BlobBuilder || globalScope.WebKitBlobBuilder || globalScope.MozBlobBuilder || globalScope.MSBlobBuilder;\n        blob = new BlobBuilder();\n        blob.append(content);\n        blob = blob.getBlob();\n      }\n\n      var URL = globalScope.URL || globalScope.webkitURL;\n      var objectURL = URL.createObjectURL(blob);\n      var worker = new globalScope[workerConstructor](objectURL, workerOptions);\n      URL.revokeObjectURL(objectURL);\n      return worker;\n    } catch (e) {\n      return new globalScope[workerConstructor](\"data:application/javascript,\".concat(encodeURIComponent(content)), workerOptions);\n    }\n  } catch (e) {\n    if (!url) {\n      throw Error(\"Inline worker is not supported\");\n    }\n\n    return new globalScope[workerConstructor](url, workerOptions);\n  }\n};","module.exports = __WEBPACK_EXTERNAL_MODULE__1670__;","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZE_PREFIX_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {!flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\nflatbuffers.Builder.prototype.clear = function() {\n  this.bb.clear();\n  this.space = this.bb.capacity();\n  this.minalign = 1;\n  this.vtable = null;\n  this.vtable_in_use = 0;\n  this.isNested = false;\n  this.object_start = 0;\n  this.vtables = [];\n  this.vector_num_elems = 0;\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {!Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {!flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n * @param {boolean=} opt_size_prefix\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier, opt_size_prefix) {\n  var size_prefix = opt_size_prefix ? flatbuffers.SIZE_PREFIX_LENGTH : 0;\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH + size_prefix);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT + size_prefix);\n  this.addOffset(root_table);\n  if (size_prefix) {\n    this.addInt32(this.bb.capacity() - this.space);\n  }\n  this.bb.setPosition(this.space);\n};\n\n/**\n * Finalize a size prefixed buffer, pointing to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finishSizePrefixed = function (root_table, opt_file_identifier) {\n  this.finish(root_table, opt_file_identifier, true);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {!flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\nflatbuffers.ByteBuffer.prototype.clear = function() {\n  this.position_ = 0;\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|!Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(6018);\n"],"names":["root","factory","exports","module","require","define","amd","a","i","self","__WEBPACK_EXTERNAL_MODULE__1670__","_scriptDir","t","document","currentScript","src","n","E","buffer","D","z","j","e","F","r","U","Y","I","u","o","c","ready","Promise","f","s","l","p","h","m","d","Object","assign","y","b","g","window","_","importScripts","v","process","versions","node","w","ENVIRONMENT_IS_PTHREAD","T","O","locateFile","__dirname","normalize","readFileSync","Uint8Array","readFile","argv","length","replace","slice","on","ot","J","exitCode","x","exit","inspect","console","error","Worker","location","href","indexOf","substr","lastIndexOf","XMLHttpRequest","open","send","responseText","responseType","response","onload","status","onerror","performance","S","log","bind","A","warn","writeSync","M","C","print","printErr","thisProgram","quit","wasmBinary","R","noExitRuntime","WebAssembly","rt","k","W","P","TextDecoder","H","decode","SharedArrayBuffer","subarray","String","fromCharCode","q","B","charCodeAt","G","HEAP8","Int8Array","HEAP16","Int16Array","HEAP32","Int32Array","HEAPU8","HEAPU16","Uint16Array","HEAPU32","Uint32Array","HEAPF32","Float32Array","HEAPF64","Float64Array","N","INITIAL_MEMORY","wasmMemory","Memory","initial","maximum","shared","Error","byteLength","V","L","X","Z","$","Q","preRun","shift","unshift","K","tt","nt","et","postMessage","cmd","arg","onAbort","RuntimeError","it","startsWith","at","ut","this","name","message","ct","pt","Vb","mc","ft","Cc","ac","push","Ub","start_routine","Ic","zc","pthread_ptr","$b","time","now","Nc","loaded","st","Vt","oc","onExit","lt","dt","bn","ht","yn","en","rn","Yb","qc","fc","Ec","Pc","receiveObjectTransfer","Gc","threadInitTLS","pc","setExitStatus","nc","values","terminate","splice","Tn","forEach","Fc","onmessage","data","Bc","targetThread","hn","Qc","transferList","Ht","queue","thread","threadId","text","alert","target","filename","lineno","urlOrBlob","mainScriptUrlOrBlob","wasmModule","yc","pop","mt","Mn","Cn","PThread","establishStackSpace","An","yt","bt","get","invokeEntryPoint","On","gt","_t","vt","wt","Tt","Ot","Zb","Sb","xc","bc","wc","Dc","rc","hc","uc","ic","kc","cc","sc","Atomics","add","Hc","sub","tc","vc","En","St","dn","At","Mt","Oc","Ct","xt","Rt","Et","kt","Dt","jt","Ft","Ut","Yt","It","Wt","Pt","store","wn","compareExchange","qt","Bt","Gt","zt","mn","Nt","toTimeString","match","Date","getFullYear","getTimezoneOffset","Math","max","Number","arguments","xn","vn","executeNotifiedProxyingQueue","hrtime","__performance_now_clock_drift","Lt","Xt","Zt","$t","USER","LOGNAME","PATH","PWD","HOME","LANG","navigator","languages","Jt","Qt","Kt","tn","nn","an","un","cn","fn","sn","toString","getMonth","getDate","getDay","Wb","Xb","getTime","setDate","setMonth","setFullYear","Lc","Kc","dc","jc","ec","Tb","Rc","Jc","Mc","RegExp","split","substring","floor","abs","includes","Array","set","ln","pn","ma","Sn","prototype","call","Rn","pa","Fa","gn","xa","Ma","ua","wa","oa","Ka","Ca","Ja","va","sa","La","ta","Ta","Ua","ya","Oa","za","setTimeout","Ea","Pa","getUTCSeconds","getUTCMinutes","getUTCHours","getUTCDate","getUTCMonth","getUTCFullYear","getUTCDay","UTC","Qa","getSeconds","getMinutes","getHours","min","Ra","setTime","Aa","Ba","Sa","Ac","ra","Ia","copyWithin","hardwareConcurrency","Da","apply","qa","grow","Na","Ga","Ha","ga","na","lc","crypto","getRandomValues","randomBytes","ia","ja","aa","Pn","Dn","Hn","ca","In","kn","ba","Wn","jn","ha","ka","fa","Fn","da","Yn","ea","Un","la","asm","sb","ub","Va","monitorRunDependencies","clearInterval","instance","fetch","credentials","then","ok","arrayBuffer","catch","resolve","instantiate","instantiateWasm","instantiateStreaming","___wasm_call_ctors","_OrtInit","Wa","_OrtCreateSessionOptions","Xa","_OrtAppendExecutionProvider","Ya","_OrtAddSessionConfigEntry","Za","_OrtReleaseSessionOptions","_a","_OrtCreateSession","$a","_OrtReleaseSession","ab","_OrtGetInputCount","bb","_OrtGetOutputCount","cb","_OrtGetInputName","db","_OrtGetOutputName","eb","_OrtFree","fb","_OrtCreateTensor","gb","_OrtGetTensorData","hb","_OrtReleaseTensor","ib","_OrtCreateRunOptions","jb","_OrtAddRunConfigEntry","kb","_OrtReleaseRunOptions","lb","_OrtRun","mb","_OrtEndProfiling","nb","_pthread_self","ob","_malloc","pb","_free","qb","_fflush","rb","__emscripten_tls_init","___funcs_on_exit","tb","__emscripten_thread_init","vb","__emscripten_thread_crashed","wb","_n","_emscripten_run_in_main_runtime_thread_js","xb","__emscripten_proxy_execute_task_queue","yb","__emscripten_thread_free_data","zb","__emscripten_thread_exit","Ab","_setThrew","Bb","_emscripten_stack_set_limits","Cb","stackSave","Db","stackRestore","Eb","stackAlloc","Fb","___cxa_can_catch","Gb","___cxa_is_pointer_type","Hb","dynCall_j","Ib","dynCall_iiiiij","Jb","dynCall_jii","Kb","dynCall_viiiiij","Lb","dynCall_vjji","Mb","dynCall_viiijjjii","Nb","dynCall_iij","Ob","dynCall_ji","Pb","dynCall_iiiiiij","Qb","dynCall_iiij","Rb","qn","calledRun","onRuntimeInitialized","postRun","setStatus","UTF8ToString","stringToUTF8","lengthBytesUTF8","keepRuntimeAlive","ExitStatus","preInit","ortWasm","undefined","fs","ctx","params","offset","index","pending","reject","err","base64","string","charAt","ceil","b64","s64","encode","start","end","parts","chunk","join","invalidEncoding","test","EventEmitter","_listeners","evt","off","listeners","emit","args","f32","f8b","le","writeFloat_f32_cpy","val","buf","pos","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","writeFloat_ieee754","writeUint","sign","isNaN","round","exponent","LN2","pow","readFloat_ieee754","readUint","uint","mantissa","NaN","Infinity","writeUintLE","writeUintBE","readUintLE","readUintBE","f64","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","inquire","moduleName","mod","eval","keys","alloc","size","SIZE","MAX","slab","utf8","len","read","write","c1","c2","__esModule","Guid","guid","TypeError","value","EMPTY","isGuid","validator","create","gen","createEmpty","parse","raw","count","out","random","equals","other","isEmpty","toJSON","Long","wasm","Instance","Module","low","high","unsigned","isLong","obj","__isLong__","defineProperty","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","str","radix","RangeError","radixToPower","result","parseInt","power","mul","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","isZero","isNegative","eq","radixLong","div","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","ne","lessThan","comp","lessThanOrEqual","lte","greaterThan","greaterThanOrEqual","gte","ge","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","toUnsigned","shru","shr","shl","log2","delta","approxRes","approxRem","modulo","rem_u","rem_s","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","bytes","fromBytesLE","fromBytesBE","valuesById","onnx","$protobuf","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","Version","AttributeProto","properties","floats","ints","strings","tensors","graphs","refAttrName","docString","type","newBuffer","emptyArray","writer","hasOwnProperty","uint32","float","int64","TensorProto","fork","ldelim","GraphProto","int32","encodeDelimited","reader","tag","end2","skipType","decodeDelimited","verify","isString","isInteger","isArray","fromObject","object","LongBits","toObject","options","arrays","defaults","long","longs","enums","json","isFinite","AttributeType","constructor","toJSONOptions","ValueInfoProto","TypeProto","NodeProto","input","output","attribute","opType","domain","ModelProto","opsetImport","metadataProps","irVersion","producerName","producerVersion","modelVersion","graph","OperatorSetIdProto","StringStringEntryProto","key","TensorAnnotation","quantParameterTensorNames","tensorName","initializer","valueInfo","quantizationAnnotation","dims","floatData","int32Data","stringData","int64Data","externalData","doubleData","uint64Data","dataType","segment","rawData","dataLocation","Segment","double","uint64","DataLocation","DataType","begin","TensorShapeProto","dim","Dimension","$oneOfFields","dimValue","dimParam","denotation","oneOfGetter","oneOfSetter","oneofs","tensorType","Tensor","elemType","shape","version","protobuf","configure","_configure","BufferWriter","BufferReader","build","rpc","indexOutOfRange","writeLength","create_array","Buffer","isBuffer","readLongVarint","bits","readFixed32_end","readFixed64","_slice","sint32","bool","fixed32","sfixed32","skip","wireType","BufferReader_","merge","sint64","zzDecode","fixed64","sfixed64","utf8Slice","Service","rpcImpl","requestDelimited","responseDelimited","Boolean","rpcCall","method","requestCtor","responseCtor","request","callback","asPromise","finish","endedByRPC","zero","zzEncode","zeroHash","from","toLong","fromHash","hash","toHash","mask","part0","part1","part2","dst","ifNotSet","newError","CustomError","captureStackTrace","stack","pool","isNode","global","freeze","emptyObject","isObject","isset","isSet","prop","utf8Write","_Buffer_from","_Buffer_allocUnsafe","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","lcFirst","toLowerCase","ProtocolError","fieldNames","fieldMap","encoding","allocUnsafe","Op","next","noop","State","head","tail","states","writeByte","VarintOp","writeVarint64","writeFixed32","_push","writeBytes","reset","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","async","pathOrBuffer","session","Session","loadModel","OnnxjsSessionHandler","env","initTimeout","simd","proxy","numThreads","numCpuLogicalCores","cpus","initWasm","handler","OnnxruntimeWebAssemblySessionHandler","onnxjsBackend","registerBackend","wasmBackend","AttributeWithCacheKeyImpl","cacheKey","_cacheKey","getOwnPropertyNames","sort","map","createAttributeWithCacheKey","ortFbs","onnxruntime","experimental","fbs","Attribute","attributes","_attributes","Map","attr","getValue","getType","delete","getFloat","defaultValue","getInt","getString","getTensor","getFloats","getInts","getStrings","getTensors","valueAndType","static","FLOAT","INT","STRING","TENSOR","FLOATS","INTS","STRINGS","TENSORS","attrType","GRAPH","GRAPHS","getValueNoCheck","LongUtil","longToNumber","arr","numberValue","maybeLong","fromProto","fromOrtTensor","utf8String","decodeUtf8String","getValueNoCheckFromOnnxFormat","getValueNoCheckFromOrtFormat","floatsArray","intsLength","stringsLength","tensorsLength","backendsCache","tryLoadBackend","backendHint","backendObj","backend","initialize","createSessionHandler","dispose","isBackend","init","webgl","WebGLBackend","resolveBackend","hint","hints","contextId","matmulMaxBatchSize","textureCacheMode","pack","glContext","createWebGLContext","Logger","setWithEnv","verbose","warning","context","WebGLSessionHandler","CoordsGlslLib","GlslLib","super","getFunctions","offsetToCoords","coordsToOffset","toVec","valueFrom","getCommonUtilFuncs","getInputsSamplingSnippets","getOutputSamplingSnippet","getCustomTypes","GlslLibRoutine","outputLayout","outputTextureLayout","isPacked","getPackedOutputSamplingSnippet","getUnpackedOutputSamplingSnippet","outShape","unpackedShape","outTexShape","width","height","funcName","getOutputScalarCoords","getOutputPacked1DCoords","getOutputPacked2DCoords","getOutputPacked3DCoords","getOutputPackedNDCoords","floatTextureSetRGBASource","getGlsl","getOutputUnpacked1DCoords","getOutputUnpacked2DCoords","getOutputUnpacked3DCoords","getOutputUnpacked4DCoords","getOutputUnpacked5DCoords","getOutputUnpacked6DCoords","floatTextureSetRSource","texShape","packedTexShape","source","ArrayUtil","arraysEqual","texelsInLogicalRow","texelsInBatch","texelsInBatchN","batches","coords","rank","strides","coordsToCompute","coordsFromIndexSnippet","stride","glsl","texture2D","programInfo","inputNames","samplerName","inputLayout","inputTextureLayouts","generateShaderFuncNameFromInputSamplerName","getPackedSamplerFromInput","getUnpackedSamplerFromInput","outCoordFuncName","generateShaderFuncNameFromInputSamplerNameAtOutCoords","getPackedSamplerAtOutputCoords","getUnpackedSamplerAtOutputCoords","inShape","texName","texFuncSnippet","inRank","outRank","broadcastDims","BroadcastUtil","getBroadcastDims","getCoordsDataType","rankDiff","coordsSnippet","fields","getGlChannels","unpackedCoordsSnippet","isInputScalar","ShapeUtil","isOutputScalar","rows","cols","inTexShape","getPackedSamplerScalar","getPackedSampler1D","getPackedSampler2D","getPackedSampler3D","getPackedSamplerND","getUnpackedSamplerScalar","getUnpackedSampler1D","getUnpackedSampler2D","getUnpackedSampler3D","getUnpackedSampler4D","getUnpackedSampler5D","getUnpackedSampler6D","texNumR","texNumC","packedSampler","valuesPerRow","squeezedShape","keptDims","newInputShape","squeezeInputShape","newInputLayout","JSON","stringify","samplerRoutine","routineBody","getSqueezedParams","dependencies","tNumR","tNumC","newShape","squeezeShape","stride0","stride1","routine","revDims","reverse","stride2","stride3","stride4","xScale","yScale","stridesBlock","body","layout","getValueFromSingle","varName","transpose","getPackedValueFrom","FunctionType","addDependency","nodes","cycleCheck","Set","alreadyTraversed","createOrderedNodes","graphNodes","dfsTraverse","has","EncodingGlslLib","encodeFloat32","decodeFloat32","encodeUint8","endianness","isLittleEndian","decodeUint8","ArrayBuffer","FragColorGlslLib","setFragColor","getColorAsFloat","INLINE_FUNC_DEF_REGEX","script","inlineDefs","exec","tokens","trim","filter","regexString","regex","variable","declLine","newBody","paramRedecLine","replacement","libs","glslLibRoutineDependencyGraph","GlslContext","glslRegistry","lib","libName","routinesInLib","currentNode","GlslLibRoutineNode","preprocess","shaderSource","hasMain","getDefaultFragShaderMain","replaceInlines","getFragShaderPreamble","getUniforms","variables","getImports","routinesIncluded","selectGlslLibRoutinesToBeIncluded","routines","classAndRoutine","TopologicalSortGlslRoutines","returnOrderedNodes","samplers","uniformLines","sampler","arrayLength","VecGlslLib","ShapeUtilsGlslLib","bcastIndex","bcastMatmulIndex","offsetToIndices","indicesToOffset","incrementIndices","outputRank","dimOffset","block","indexToOffsetSingle","offsetToIndicesSingle","shapeInit","GLSL_ES_2_0","varyingVertex","varyingFrag","outputDeclaration","GLSL_ES_3_0","outputShapeLength","binaryVecFunctions","copyVec","setVecItem","getVecItem","nameOp","fname","assignmentBlock","packedTextureDataCache","unpackedTextureDataCache","calculateTextureWidthAndHeight","textureType","layoutStrategy","executeProgram","program","inputs","inputTypes","inputTextureDatas","getOrCreateTextureData","texture","cacheHint","getProgramInfoUniqueKey","artifact","programManager","getArtifact","createTextureLayoutFromTextureType","outputTextureData","createTextureData","setArtifact","runProgram","run","tensor","TextureType","packed","td","getTextureData","dataId","unpack","packedLastDimension","group","channels","adjustedKernelShape","adjustedLayout","numberData","numFeatureMaps","oldRowSize","newRowSize","oldOffset","newOffset","unpackedTextureLayout","createTextureLayoutFromShape","reverseWH","unpackedTextureData","createTextureDataFromLayoutBindTensor","usage","textureManager","createTextureFromLayout","createTextureDataFromTexture","reshapeUnpacked","reshapedDims","inputTD","unpacked","newTextureLayout","computeStrides","reshapePacked","isReshapeCheap","squeezedInputShape","processDims3D","squeezedOutputShape","squeezedInputTensor","squeezedOutputTensor","createPackedReshape3DProgramInfoLoader","cast","tensorId","textureData","_id","readTexture","readTextureAsync","setTextureData","isInitializer","isTextureLayoutCached","clearActiveTextures","releaseTexture","isFloat32DownloadSupported","readUint8TextureAsFloat","encodeAsUint8","createPackProgramInfoLoader","createUnpackProgramInfoLoader","WEBGL_OP_RESOLVE_RULES","unaryOps","acos","binaryOps","asin","atan","averagePool","parseAveragePoolAttributes","batchNormalization","parseBatchNormalizationAttributes","parseCastAttributes","clip","parseClipAttributes","clipV11","concat","parseConcatAttributes","conv","parseConvAttributes","convTranspose","parseConvTransposeAttributes","cos","identity","depthToSpace","parseDepthToSpaceAttributes","equal","elu","parseEluAttributes","exp","flatten","parseFlattenAttributes","gather","parseGatherAttributes","gemm","parseGemmAttributesV7","parseGemmAttributesV11","globalAveragePool","parseGlobalAveragePoolAttributes","globalMaxPool","greater","imageScaler","parseImageScalerAttributes","instanceNormalization","parseInstanceNormalizationAttributes","leakyRelu","parseLeakyReluAttributes","less","matMul","parseMatMulAttributes","maxPool","parseMaxPoolAttributes","padV2","parsePadAttributesV2","padV11","parsePadAttributesV11","pRelu","reduceLogSum","parseReduceAttributes","reduceMax","reduceMean","reduceMin","reduceProd","reduceSum","reduceLogSumSquare","relu","reshape","resize","parseResizeAttributesV10","parseResizeAttributesV11","sigmoid","sin","sliceV10","parseSliceAttributes","softmax","parseSoftmaxAttributes","softmaxV13","parseSoftmaxAttributesV13","parseSplitAttributes","sqrt","squeeze","parseSqueezeAttributes","squeezeV13","sum","tan","tanh","tile","parseTransposeAttributes","upsample","parseUpsampleAttributesV7","parseUpsampleAttributesV9","unsqueeze","parseUnsqueezeAttributes","unsqueezeV13","batchNormalizationProgramMetadata","inferenceHandler","validateInputs","createBatchNormalizationProgramInfo","epsilon","momentum","spatial","scaleWidth","scaleHeight","scale","mean","var_","glslAdd","ValueBased","glslDiv","glslMul","glslSub","glslEqual","glslGreater","glslLess","glslAnd","glslOr","glslXor","glslPow","glslBuiltinBinary","glslPRelu","createBinaryProgramInfoLoader","glslFunc","outputTensorType","createBinaryProgramInfo","isBroadcast","areEqual","outputShape","usePackedTexture","calculatedShape","calcShape","aRank","bRank","aBcast","bBcast","to","ProtoUtil","tensorDataTypeFromProto","createPackedConcatProgramInfoLoader","metadata","inputCount","fill","axis","inputShape","dataNShape","axisIndex","getChannels","dtype","unpackChannel","unpackFromChannel","shapes","offsets","channel","lastChannels","allChannels","getValueSnippet","getShiftedChannelsSnippet","lastIndex","createPackedConcatProgramInfo","channelIdx","idx","createUnpackedConcatProgramInfoLoader","sizeInConcatAxis","previousSum","getTextureIndexWhereDataResidesMethod","getTextureIndexWhereDataResidesLinearSearch","getTextureIndexWhereDataResidesBinarySearch","getFetchDataFromCorrectTextureMethod","getGetSizeInConcatAxisValueFromIndexMethod","createUnpackedConcatProgramInfo","numberOfTensors","tensorRank","codeLines","inputType","inputDimensionality","createUnpackedGroupedConvProgramInfoLoader","hasBias","processBias","xShape","wShape","outputChannelsPerGroup","autoPad","dilations","kernelShape","pads","calculateOutputShape","activationFunction","applyActivation","getActivationSnippet","createUnpackedGroupedConvProgramInfo","conv2DPackedPointwise","xshape","kshape","reshapedX","reshapedK","matmulInputs","matmulOutput","createPackedMatmulProgramInfoLoader","conv2DPacked","im2colOutput","createPackedIm2ColProgramInfoLoader","kernelReshaped","computeTotalPad","inDim","adj","kernel","dilation","outSize","distributePadding","totalPad","smallPad","convTranspose2d","adjustedAttributes","getAdjustedConvTransposeAttributes","convTranspose2DUnpacked","valueInit","inputChannelsPerGroup","createUnpackedConvTransposeProgramInfo","createUnpackedConvTransposeProgramInfoLoader","outputPadding","spatialRank","updateShape","calculateOutputShapeAndPads","newAttributes","activationAttributes","parseInternalActivationAttributes","featureMaps","adjustPads","batchSize","inputSpatialShape","outChannels","dilatedKernelShape","outputSpatialShape","conv2d","getAdjustedConvAttributes","packMode","isPointwise","conv2DUnpackedPointwise","conv2DUnpacked","createMatmulProgramInfoLoader","xIm2Col","createIm2ColProgramInfoLoader","dotProductInputs","createDotProductProgramInfoLoader","PoolConvUtil","adjustPadsBasedOnAutoPad","blocksize","blocksizeSqr","transposePerm","mode","firstReshapeShape","firstReshapedTensor","transposeAttributes","perm","transposeOutput","secondReshapeShape","activationCacheKey","createDotProductProgramMetadata","im2colShape","calculateIm2ColDims","kWidth","kHeight","im2colStrides","im2colWidth","im2colHeight","initValue","sharedDim","createDotProductProgramInfo","outputDims","flattenShape","func","activation","glslRelu","glslSigmoid","glslClip","clipMin","clipMax","activationName","MIN_CLIP","MAX_CLIP","createGatherProgramInfoLoader","gatherProgramMetadata","indexDataShape","normalizeAxis","indexCopyOps","createGatherProgramInfo","NUMBER_TYPES","createGemmProgramInfoLoader","parseGemmAttributes","isOptionalC","transA","transB","alpha","beta","createGemmProgramInfo","aShape","bShape","GemmUtil","getShapeOfGemmResult","line","wshape","kernelSize","unrolled","row","col","createPackedIm2ColProgramInfo","im2colDims","createIm2ColProgramInfo","createImageScalerProgramInfoLoader","bias","imageScalerProgramMetadata","createGetBiasMethod","createImageScalerProgramInfo","numChannels","meanAndVariance","createMeanAndVarianceProgramInfoLoader","createComputeOutputProgramInfoLoader","meanAndVarianceProgramMetadata","xDims","channelSize","createMeanAndVarianceProgramInfo","computeOutputProgramMetadata","meanAndVarianceShape","textureWidth","textureHeight","meanAndVarianceWidth","meanAndVarianceHeight","createComputeOutputProgramInfo","sharedDimIndex","coordsDataType","allGlChannels","getBiasForMatmulSnippet","getBiasForMatmul","getBcastedSamplerForMatmulSnippet","unpackedACoordsSnippet","unpackedBCoordsSnippet","inAShape","inBShape","inARank","inBRank","rankADiff","rankBDiff","broadcastADims","broadcastBDims","coordsASnippet","coordsBSnippet","swapDimSnippet","getBcastSamplerForMatmul","getSamplerAInLoopSnippet","getA","getSamplerBInLoopSnippet","getB","createPackedMatmulProgramInfo","arank","brank","createMatmulProgramInfo","packProgramMetadata","unpackedReversed","inputRank","setup","reversedInputWH","outOfBoundsCondition","cond","getOutOfBoundsCondition","getOutput","createPackProgramInfo","getVecChannels","padProgramMetadata","validateInputsV2","createPadProgramInfo","validateInputsV11","attrubutes","generatePadAttributesFromInputs","integerData","padShape","getPadFunction","getPadConstant","getPadReflect","getPadEdge","createAveragePoolProgramInfo","ceilMode","countIncludePad","isGlobalOperator","getAdjustedPoolAttributesAndOutputShape","op2","generatePoolingCode","createMaxPoolProgramInfo","storageOrder","hasDilations","adjustPoolAttributes","computePoolOutputShape","globalMaxPoolAttributes","globalMaxPoolMetadata","inputDims","op1","kw","sw","pwStart","pwEnd","dimW","codeW","codeH","codeHEnd","kh","sh","phStart","phEnd","dimH","kernelStrides","stridesRank","padsRank","offsetToIndicesFunction","copyInputDims","copyArray","copyPads","copyKernelStrides","copyStrides","padCode","reduce","cur","array","arrayName","reduceOp","reduceProgramMetadata","createReduceProgramInfo","axes","keepDims","iRank","idxCopy","normalizeAxes","ops","reduceOps","idxZero","input3D","outputShape3D","createPackedReshape3DProgramMetadata","inputShape3D","mainLoop","outputCoords","getReshapedInputCoords","getFlattenedIndexFrom3D","createPackedReshape3DProgramInfo","batch","isCheapReshape","calculateReshapedDims","resizeProgramMetadata","createPackedResizeProgramInfo","parseUpsampleAttributes","scales","prepareInputs","every","coordinateTransformMode","outputHeight","outputWidth","inputHeight","inputWidth","scalesHeight","scalesWidth","getSourceFracIndex","outputSizes","scalesTensor","scalesInputIdx","sizesInputIdx","parseScalesData","isResize","sizesTensor","parseScalesDataFromOutputSize","yDims","scalesValidation","sliceProgramMetadata","createSliceProgramInfo","starts","ends","normalizedAxes","sliceOps","validateInputsV10","generateSliceAttributesFromInputs","some","softmaxComputeMaxProgramMetadata","softmaxComputeScaleProgramMetadata","softmaxProgramMetadata","logicalRowCount","sizeToDimension","featureCount","sizeFromDimension","computeSoftmax","isTransposeRequired","transposedInputShape","transposeAttribute","transposedInputs","computeMaxProgramInfo","createComputeMaxProgramInfo","computeScaleProgramInfo","createComputScaleProgramInfo","softMaxProgramInfo","createSoftMaxProgramInfo","maxElementPerLogicalRow","normalizationPerLogicalRow","splitProgramMetadata","getProgramCount","createSplitProgramInfo","numOutputs","outputs","SplitUtil","splitShape","validateInputsV13","sumProgramMetadata","createSumProgramInfo","tileProgramMetadata","createTileProgramInfo","tileOps","transposeProgramMetadata","createTransposeProgramInfo","getAdjustedPerm","unpackedOutputShape","getOutputShape","getPermFunctionBody","sortBasedOnPerm","reverseFunc","downloadUint8AsFloat","glslAbs","glslBuiltinUnary","glslAcos","glslAsin","glslAtan","glslCeil","glslCos","glslElu","glslExp","glslFloor","glslIdentity","glslLeakyRelu","glslLog","glslNeg","glslNot","glslSin","glslSqrt","glslTan","glslTanh","createElementwiseProgramInfoLoader","createElementwiseProgramInfo","generateClipAttributesFromInputs","unpackProgramMetadata","createUnpackProgramInfo","innerDims","sourceCoords","getSourceCoords","unsqueezeShape","upsampleProgramMetadata","createUpsampleProgramInfo","opset","extrapolationValue","needRoiInput","useExtrapolation","nearestMode","cubicCoefficientA","excludeOutside","useNearest2xOptimization","roiInputIdx","outputPitches","inputPitches","precalculatedPitches","getInputFloatFunction","profiler","textureLayoutStrategy","repo","attributesBound","buildArtifact","event","gl","useProgram","bindOutput","bindAttributes","attribLocations","bindUniforms","uniformLocations","draw","vertexShader","deleteShader","deleteProgram","preprocessor","GlslPreprocessor","fragScript","compile","getUniformLocations","getAttribLocations","fragShaderScript","vertexShaderScript","getVertexShaderSource","compileShader","VERTEX_SHADER","debug","fragShader","FRAGMENT_SHADER","createProgram","attachFramebuffer","positionHandle","position","textureCoordHandle","textureCoord","setVertexAttributes","textures","texturePosition","find","bindTexture","uniform1fv","uniform1f","uniform1iv","uniform1i","uniformHandle","bindTextureToUniform","getAttribLocation","getUniformLocation","reference","PreferLogicalStrategy","maxTextureSize","ProgramManager","TextureManager","reuseTextures","pack2unpackMap","unpack2packMap","createInferenceHandler","WebGLInferenceHandler","onGraphInitialized","initializers","getValues","addInitializer","opsets","op","resolveOperator","impl","opImpl","opInit","internalFormat","R32F","format","RED","RGBA32F","RGBA","textureSize","allocate","dataSize","dest","ALPHA","UNSIGNED_BYTE","_textureSize","byteOffset","isEmptyArray","parseAxisParam","assert","ax","isInt","sizeFromShape","sizeToSquarishShape","computeTextureWH","prefs","breakAxis","wsize","hsize","totalSize","wh","computeTexture","logShape","squeezeResult","dimsToSkip","inferredDims","reversedWH","config","pendingRead","inUseTextures","idleTextures","textureLookup","textureDataType","toEncoderType","encoder","getEncoder","updateTexture","toTextureData","allocateTexture","toTensorData","subscribers","createAndWaitForFence","tensorData","deleteTexture","_dataType","checkFn","delayFn","_counter","maxCounter","tryCount","tryFn","nextBackoff","toUpperCase","createNewWebGLContext","canvas","OffscreenCanvas","createElement","createCanvas","depth","antialias","stencil","preserveDrawingBuffer","premultipliedAlpha","failIfMajorPerformanceCaveat","getContext","WebGLContext","webgl2","isContextLost","disable","DEPTH_TEST","STENCIL_TEST","BLEND","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","enable","SCISSOR_TEST","CULL_FACE","cullFace","BACK","linearSearchLastTrue","frameBufferBound","itemsToPoll","getExtensions","vertexbuffer","createVertexbuffer","framebuffer","createFramebuffer","queryVitalParameters","createTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","checkError","texSubImage2D","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","viewport","scissor","readPixels","isFramebufferReady","getActiveTexture","getParameter","ACTIVE_TEXTURE","TEXTURE0","getTextureBinding","TEXTURE_BINDING_2D","getFramebufferBinding","FRAMEBUFFER_BINDING","vertexAttribPointer","enableVertexAttribArray","attachShader","linkProgram","shaderType","shader","createShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","activeTexture","drawArrays","TRIANGLE_STRIP","getError","label","DataEncoders","RedFloat32DataEncoder","isRenderFloat32Supported","RGBAFloatDataEncoder","textureHalfFloatExtension","HALF_FLOAT_OES","Uint8DataEncoder","unit","maxTextureImageUnits","disposed","deleteFramebuffer","bindBuffer","ARRAY_BUFFER","deleteBuffer","ELEMENT_ARRAY_BUFFER","createDefaultGeometry","createBuffer","geometry","bufferData","STATIC_DRAW","isFloatTextureAttachableToFrameBuffer","checkFloatTextureAttachableToFrameBuffer","checkRenderFloat32","checkFloat32Download","isBlendSupported","checkFloat32Blend","MAX_TEXTURE_SIZE","MAX_TEXTURE_IMAGE_UNITS","colorBufferFloatExtension","getExtension","disjointTimerQueryWebgl2Extension","textureFloatExtension","frameBuffer","isComplete","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","fragmentShader","POINTS","NO_ERROR","beginTimer","gl2","ext","query","createQuery","beginQuery","TIME_ELAPSED_EXT","endTimer","endQuery","isTimerResultAvailable","available","disjoint","getQueryParameter","QUERY_RESULT_AVAILABLE","GPU_DISJOINT_EXT","getTimerResult","timeElapsed","QUERY_RESULT","deleteQuery","repeatedTry","fenceContext","createFence","pollFence","isFencePassed","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","clientWaitSync","ALREADY_SIGNALED","CONDITION_SATISFIED","addItemToPoll","pollItems","isDoneFn","resolveFn","KernelOp","getNodes","_ops","_starter","resolved","_values","getInputIndices","sessionHandler","modelInputs","graphInputs","sequence","graphValues","rear","thisOpIndex","thisOp","inputList","inputTensors","outputList","downstreamNodes","currentDownstreamNodeIndex","currentDownstreamNode","getOutputIndices","outputIndex","outputTensor","getData","Graph","graphProto","GraphImpl","Value","_from","_to","tensorValueTypeFromProto","Node","_nodeProto","tensorAttributesFromORTFormat","executeNode","graphInitializer","buildGraph","transformGraph","checkIsAcyclic","_allInputIndices","getInputNames","_allInputNames","_allOutputIndices","getOutputNames","_allOutputNames","_allData","_nodes","buildGraphFromOnnxFormat","buildGraphFromOrtFormat","dataIndices","nodesIndices","inputValueNames","currentIndex","tensorDimsFromProto","nodeProto","pick","dataIndex","inputsLength","inputName","nodeArgsLength","nodeArgs","valueType","TypeInfoValue","tensor_type","TensorTypeAndShape","dimLength","initializersLength","tensorDimsFromORTFormat","outputsLength","outputName","nodesLength","attributesLength","starters","nodesStack","nodesState","nodeIndex","outgoingEdgeIndex","downstreamNodeIndex","removeAllIdentityNodes","removeAllDropoutNodes","fuseConvActivationNodes","finalizeGraph","ind","deleteNode","inputValueIndex","outputValueIndex","nodesConsumingOutput","delIndex","replaceIndex","isActivation","child","SEVERITY_VALUE","info","fatal","LOGGER_PROVIDER_MAP","_severity","_content","_category","severity","content","category","color","LOGGER_DEFAULT_CONFIG","provider","minimalSeverity","logDateTime","logSourceLocation","LOGGER_CONFIG_MAP","arg0","arg1","arg2","arg3","logInternal","toISOString","previousConfig","logLevel","Event","startTime","endCallback","timer","waitForQueryAndGetTime","EventRecord","endTime","maxNumberEvents","flushBatchSize","flushIntervalInMilliseconds","_started","_flushPointer","_maxNumberEvents","_flushBatchSize","_flushIntervalInMilliseconds","_timingEvents","_flushTime","stop","logOneEvent","isPromise","reason","eventRes","endSync","checkTimer","toFixed","currentTime","previousPointer","started","load","isOrtFormat","loadFromOnnxFormat","loadFromOrtFormat","modelProto","_opsets","_graph","flatbuffers","ByteBuffer","ortModel","InferenceSession","getRootAsInferenceSession","model","opsetImportLength","opsetId","INT_TYPES","FLOAT_TYPES","matchSelector","selector","endsWith","rangeStart","pair","rangeEnd","rules","rule","versionSelector","DimensionValueType","TensorDataType","NodeType","Shape","bb_pos","__init","readInt32","setPosition","SIZE_PREFIX_LENGTH","__offset","__indirect","__vector","__vector_len","builder","startObject","addFieldOffset","startVector","addOffset","endVector","numElems","endObject","startShape","addDim","endShape","DimensionValue","optionalEncoding","__string","valueOffset","denotationOffset","startDimension","addValue","addDenotation","endDimension","dimType","readInt8","UNKNOWN","readInt64","createLong","addFieldInt8","addFieldInt64","dimParamOffset","startDimensionValue","addDimType","addDimValue","addDimParam","endDimensionValue","UNDEFINED","addFieldInt32","shapeOffset","startTensorTypeAndShape","addElemType","addShape","endTensorTypeAndShape","MapType","keyType","TypeInfo","valueTypeOffset","startMapType","addKeyType","addValueType","endMapType","SequenceType","elemTypeOffset","startSequenceType","endSequenceType","EdgeEnd","readUint32","srcArgIndex","dstArgIndex","node_index","src_arg_index","dst_arg_index","prep","writeInt32","NodeEdge","inputEdges","inputEdgesLength","outputEdges","outputEdgesLength","inputEdgesOffset","outputEdgesOffset","startNodeEdge","addNodeIndex","addInputEdges","addOutputEdges","endNodeEdge","sinceVersion","Primitive","executionProviderType","inputArgCounts","inputArgCountsLength","inputArgCountsArray","implicitInputs","implicitInputsLength","nameOffset","docStringOffset","domainOffset","opTypeOffset","executionProviderTypeOffset","inputsOffset","outputsOffset","attributesOffset","inputArgCountsOffset","addInt32","implicitInputsOffset","startNode","addName","addDocString","addDomain","addSinceVersion","addIndex","addOpType","addType","addExecutionProviderType","addInputs","addOutputs","addAttributes","addInputArgCounts","addImplicitInputs","endNode","ValueInfo","typeOffset","startValueInfo","endValueInfo","readUint8","NONE","__union","startTypeInfo","endTypeInfo","OperatorSetId","startOperatorSetId","addVersion","endOperatorSetId","dimsLength","rawDataLength","rawDataArray","stringDataLength","dimsOffset","addInt64","rawDataOffset","addInt8","stringDataOffset","startTensor","addDims","addDataType","addRawData","addStringData","endTensor","SparseTensor","indices","valuesOffset","indicesOffset","startSparseTensor","addValues","addIndices","endSparseTensor","readFloat32","floatsLength","graphsLength","addFieldFloat32","sOffset","tOffset","gOffset","floatsOffset","addFloat32","intsOffset","stringsOffset","tensorsOffset","graphsOffset","startAttribute","addF","addI","addS","addT","addG","addFloats","addInts","addStrings","addTensors","addGraphs","endAttribute","maxNodeIndex","nodeEdges","nodeEdgesLength","sparseInitializers","sparseInitializersLength","initializersOffset","nodeArgsOffset","nodesOffset","nodeEdgesOffset","sparseInitializersOffset","startGraph","addInitializers","addNodeArgs","addNodes","addMaxNodeIndex","addNodeEdges","addSparseInitializers","endGraph","Model","graphDocString","opsetImportOffset","producerNameOffset","producerVersionOffset","graphOffset","graphDocStringOffset","startModel","addIrVersion","addOpsetImport","addProducerName","addProducerVersion","addModelVersion","addGraph","addGraphDocString","endModel","KernelCreateInfos","nodeIndices","nodeIndicesLength","nodeIndicesArray","kernelDefHashes","readUint64","kernelDefHashesLength","nodeIndicesOffset","kernelDefHashesOffset","startKernelCreateInfos","addNodeIndices","addKernelDefHashes","endKernelCreateInfos","SubGraphSessionState","graphId","sessionState","SessionState","graphIdOffset","sessionStateOffset","requiredField","startSubGraphSessionState","addGraphId","addSessionState","endSubGraphSessionState","kernels","subGraphSessionStates","subGraphSessionStatesLength","kernelsOffset","subGraphSessionStatesOffset","startSessionState","addKernels","addSubGraphSessionStates","endSessionState","__has_identifier","ortVersion","ortVersionOffset","modelOffset","startInferenceSession","addOrtVersion","addModel","endInferenceSession","outputNames","feeds","_fetches","_options","inputMap","feed","outputMap","startProfiling","endProfiling","_initialized","Profiler","graphInputTypes","graphInputDims","_model","promisify","isView","modelProtoBlob","initializeOps","_executionPlan","ExecutionPlan","normalizeAndValidateInputs","outputTensors","execute","createOutput","modelInputNames","sortedInputs","sortedInputsIndex","validateInputTensorDims","modelInputIndices","modelValues","graphInput","validateInputTensorTypes","givenInputs","expectedType","actualType","noneDimSupported","expectedDims","actualDims","compareTensorDims","modelOutputNames","dataProvider","asyncDataProvider","_strides","validateDimsAndCalcSize","empty","dataviewConstructor","sizeof","dataBuffer","createView","tensorProto","dataDest","dataSource","DataView","elementSize","sizeofProto","readProto","INT32","INT16","UINT16","INT8","UINT8","BOOL","INT64","DOUBLE","UINT32","UINT64","element","ortTensor","view","getUint8","getInt8","getUint16","getInt16","getFloat32","getInt32","getUint32","getFloat64","expectedDimensions","expr","msg","n1","n2","MatMulUtil","dimsA","dimsB","adims","bdims","isMatMul","crank","cdims","cShapeMatMul","calcMatMulShape","aLen","bLen","broadcastedIndices","originalShape","originalIndices","fillIndex","inplace","resultType","outputIndices","originalIndicesA","originalIndicesB","rest","valA","valB","isAScalar","isBScalar","finalShape","finalRank","targetIndex","sourceIndex","blockSize","leftShape","transLeft","rightShape","transRight","biasShape","kDim","isValidBroadcast","typeProto","getSizeFromDimensionRange","axisToIncrementOn","originalDims","shapeHints","nDims","unknownDimension","newTensorSize","oldTensorSize","pad","shape1","shape2","total","right","inSqueezeList","inputDimsIterator","determineSplit","numElementsAlongAxis","ReduceUtil","keepdims","calcReduceShape","inputStrides","indicesY","calcReduceByAxis","curAxisInd","step","adjustPadAndReturnShape","computeShapeHelper","filterDims","inSize","padHeadIndex","padTailIndex","dkernel","padNeeded","iterateExtraOptions","prefix","seen","entries","isProxy","proxyWorker","initWasmCallbacks","initOrtCallbacks","initializing","initialized","aborted","createSessionAllocateCallbacks","createSessionFinalizeCallbacks","createSessionCallbacks","releaseSessionCallbacks","runCallbacks","endProfilingCallbacks","ensureWorker","onProxyWorkerMessage","ev","scriptSrc","wasmPaths","in","initializeWebAssembly","initOrt","loggingLevel","core","createSessionAllocate","createSessionFinalize","modeldata","createSession","releaseSession","sessionId","inputIndices","extractTransferableBuffers","setRunOptions","getInstance","runOptionsHandle","allocs","runOptions","logSeverityLevel","logVerbosityLevel","tagDataOffset","allocWasmString","extra","WeakSet","keyDataOffset","valueDataOffset","ortInit","path","getLogLevel","modelData","fetches","inputArray","kvp","setSessionOptions","sessionOptionsHandle","sessionOptions","use_ort_model_bytes_directly","appendDefaultOptions","graphOptimizationLevel","getGraphOptimzationLevel","enableCpuMemArena","enableMemPattern","executionMode","getExecutionMode","logIdDataOffset","logId","enableProfiling","executionProviders","ep","epName","epNameDataOffset","setExecutionProviders","dataLength","dataOffset","errorCode","activeSessions","modelDataOffset","sessionHandle","outputCount","inputNamesUTF8Encoded","outputNamesUTF8Encoded","tensorDataTypeStringToEnum","tensorDataTypeEnumToString","numericTensorTypeToTypedArray","BigInt64Array","BigUint64Array","runOptionsAllocs","inputValues","inputAllocs","dataByteLength","dimIndex","beforeRunStack","inputValuesOffset","inputNamesOffset","outputValuesOffset","outputNamesOffset","inputValuesIndex","inputNamesIndex","outputValuesIndex","outputNamesIndex","beforeGetTensorDataStack","tensorDataOffset","tensorDataIndex","maxBytesToRead","profileFileName","buffers","ortWasmFactoryThreaded","getWasmFileName","useSimd","useThreads","flags","timeout","MessageChannel","port1","validate","isMultiThreadSupported","isSimdSupported","wasmPrefixOverride","wasmFileName","wasmOverrideFileName","wasmPathOverride","isTimeout","tasks","fileName","scriptDirectory","Blob","URL","createObjectURL","scriptSourceCode","what","race","terminateAllThreads","Worker_fn","workerConstructor","workerOptions","url","globalScope","blob","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","append","getBlob","webkitURL","objectURL","worker","revokeObjectURL","encodeURIComponent","Offset","Table","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","Encoding","UTF8_BYTES","UTF16_STRING","float32","float64","toFloat64","Builder","opt_initial_size","initial_size","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","clear","capacity","forceDefaults","asUint8Array","additional_bytes","align_size","old_buf_size","growByteBuffer","byte_size","writeInt8","writeInt16","writeInt64","writeFloat32","writeFloat64","addInt16","addFloat64","voffset","slot","addFieldInt16","addFieldFloat64","addFieldStruct","nested","notNested","new_buf_size","nbb","numfields","vtableloc","trimmed_size","existing_vtable","vt1","outer_loop","vt2","readInt16","root_table","opt_file_identifier","opt_size_prefix","size_prefix","file_identifier","finishSizePrefixed","table","field","table_start","vtable_start","elem_size","num_elems","alignment","createString","codePoint","bytes_","position_","readUint16","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","getBufferIdentifier","vtable_offset","opt_encoding","ident","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","getter","definition","enumerable","globalThis","Function","Symbol","toStringTag","__webpack_exports__"],"mappings":"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AAAA,IAAAA,CAClB,EAAAF,GAAAA,CAAI1W,IAAAA,CAAK4W,IAAAA,GAAAA,CAAO,CAAA,GAGY,aAAA,OAAnB,EAAAF,GAAAA,CAAI1W,IAAAA,CAAK6W,KAAAA,IAAAA,CAClB,EAAAH,GAAAA,CAAI1W,IAAAA,CAAK6W,KAAAA,GAAAA,CAAQ,CAAA,GAGgB,YAAA,OAAxB,EAAAH,GAAAA,CAAI1W,IAAAA,CAAK8W,UAAAA,IAAAA,CAA4B/uB,OAAOgjB,SAAAA,CAAU,EAAA2L,GAAAA,CAAI1W,IAAAA,CAAK8W,UAAAA,KAAe,EAAAJ,GAAAA,CAAI1W,IAAAA,CAAK8W,UAAAA,IAAc,GAAG;wBACjH,MAAMC,IAA0C,eAAA,OAAd/tB,YAAAA,CAA4B,GAAA,EAAAguB,IAAAA,IAAOv+B,MAAAA,GAASuQ,UAAU2F,mBAAAA;wBACxF,EAAA+nB,GAAAA,CAAI1W,IAAAA,CAAK8W,UAAAA,GAAajvB,KAAKoG,GAAAA,CAAI,GAAGpG,KAAK6R,IAAAA,CAAAA,CAAMqd,KAAsB,CAAA,IAAK;oB;gB,GAsB/D,EAAA,EAAA,GAAc,IAlB3B;oBACEX,MAAAA,OAAAA;wBAAAA,CAEE,GAAA,EAAA,EAAA,KAAA,MAAA,CAGM,GAAA,EAAAa,QAAAA;oBACR;oBAGAb,MAAAA,qBAA2BC,CAAAA,EAAiChL,CAAAA,EAAAA;wBAE1D,MAAM6L,IAAU,IAAI,EAAAC,oCAAAA;wBAEpB,OAAA,MADMD,EAAQV,SAAAA,CAAUH,GAAchL,IAC/B30B,QAAQib,OAAAA,CAAQulB;oBACzB;gBAAA;Y;Y,M,S,C,E,C,E,C;gB;gB,I,I,I,I,I,C,e,I,C,O,M,G,S,C,E,C,E,C,E,C;oB,K,M,K,C,I,C;oB,I,I,O,wB,C,G;oB,K,C,C,S,I,C,E,U,G,E,Q,I,E,Y,K,C,I;wB,Y,C;wB,K;4B,O,C,C,E;wB;oB,C,G,O,c,C,G,G;gB,I,S,C,E,C,E,C,E,C;oB,K,M,K,C,I,C,G,C,C,E,G,C,C,E;gB,C,G,I,I,I,I,C,Y,I,S,C,E,C;oB,I,I,K,E,c,K,O,S,C,c,C,I,C,G,M,E,G,G;gB;gB,O,c,C,G,c;oB,O,C;g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,E,Y,K,C,I;wB,Y,C;wB,K;4B,O,C,C,E;wB;oB,C,G,O,c,C,G,G;gB,I,S,C,E,C,E,C,E,C;oB,K,M,K,C,I,C,G,C,C,E,G,C,C,E;gB,C,G,I,I,I,I,C,kB,I,C,O,M,G,S,C,E,C;oB,O,c,C,G,W;wB,Y,C;wB,O;oB;gB,I,S,C,E,C;oB,E,O,G;gB,C,G,I,I,I,I,C,Y,I,S,C;oB,I,K,E,U,E,O;oB,I,I,C;oB,I,Q,G,I,I,K,E,c,K,O,S,C,c,C,I,C,G,M,E,G,G;oB,O,E,G,I;gB;gB,O,c,C,G,c;oB,O,C;gB,I,E,sB,G,K;gBCpTF,MAAA,IAAA,EAAA,OACA,IAAA,EAAA,EAAA,QACA,IAAA,EAAA,OACA,IAAA,EAAA,OACA,IAAA,EAAA,OACA,IAAA,EAAA,OACA,IAAA,EAAA,OACA,IAAA,EAAA,OACA,IAAA,EAAA,OACA,IAAA,EAAA,OACA,IAAA,EAAA,OACA,IAAA,EAAA,OACA,IAAA,EAAA,OACA,IAAA,EAAA,OACA,IAAA,EAAA,OACA,IAAA,EAAA,OACA,IAAA,EAAA,MACA,IAAA,EAAA,OACA,IAAA,EAAA,OACA,IAAA,EAAA,OACA,IAAA,EAAA,OACA,IAAA,EAAA,OACA,IAAA,EAAA,OACA,IAAA,EAAA,OACA,IAAA,EAAA,OACA,IAAA,EAAA,OACA,IAAA,EAAA,EAAA,QACA,IAAA,EAAA,OACA,IAAA,EAAA;gBAEa,EAAAyD,sBAAAA,GAAuD;oBAClE;wBAAC;wBAAO;wBAAI;wBAAMC,EAASzkC,GAAAA;qBAAAA;oBAC3B;wBAAC;wBAAQ;wBAAI;wBAAMykC,EAASC,IAAAA;qBAAAA;oBAC5B;wBAAC;wBAAO;wBAAI;wBAAMC,EAAUvqC,GAAAA;qBAAAA;oBAC5B;wBAAC;wBAAO;wBAAI;wBAAMuqC,EAAUzoB,GAAAA;qBAAAA;oBAC5B;wBAAC;wBAAQ;wBAAI;wBAAMuoB,EAASG,IAAAA;qBAAAA;oBAC5B;wBAAC;wBAAQ;wBAAI;wBAAMH,EAASI,IAAAA;qBAAAA;oBAE5B;wBAAC;wBAAe;wBAAI;wBAAM,EAAAC,WAAAA;wBAAa,EAAAC,0BAAAA;qBAAAA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;Y,M,C,G,G;gB;gB,O,c,C,G,c;oB,O,C;gB,I,E,a,G,K;gBCrFpB,MAAA,IAAA,EAAA,OAEA,IAAA,EAAA;gBAEa,EAAA8xC,aAAAA,GAAgB,CAACgG,GAAyCrpB;oBACrE,MAAMorB,IAAcprB,EAAMqD,KAAAA,EACpBwQ,IAAAA,CAAO,GAAA,EAAAvB,OAAAA,EAAQ+W,EAAiBlf,OAAAA,CAAQ8E,OAAAA,CAAQe,SAAAA,CAAU1M,OAAAA,GAI1DsY,IAAe,CAAA,uoCAAA,EA6CD/H,EAAKC,SAAAA,CAAAA,wBAAAA,EACnBD,EAAK5T,MAAAA,CAAAA,+BAAAA,CAAAA,EAEL8T,IAAc;wBAClB/gC,MAAM;wBACNgsC,YAAY;4BAAC,EAAAgB,WAAAA,CAAY6B,QAAAA;yBAAAA;wBACzB7N,YAAY;4BAAC;yBAAA;wBACb/T,QAAQ;4BAACqB,MAAM8pB;4BAAa7tB,MAAMyC,EAAM+f,MAAAA,CAAOxiB,IAAAA;4BAAMohB,aAAa,EAAAqB,WAAAA,CAAY4jB,oBAAAA;wBAAAA;wBAC9EhoB,cAAAA;wBACAC,SAAAA,CAAS;oBAAA;oBAEX,OAAOwN,EAAiBxK,cAAAA,CAAe9K,GAAa;wBAAC/T,EAAM+f,MAAAA;qBAAAA;gBAAQ;Y;Y,M,C,G,G;gB;gB,O,c,C,G,c;oB,O,C;gB,I,E,I,G,E,G,G,E,I,G,E,G,G,E,O,G,E,I,G,E,G,G,E,G,G,E,G,G,E,wB,G,E,S,G,E,Q,G,E,K,G,E,G,G,E,kB,G,E,G,G,E,G,G,E,I,G,E,O,G,E,mB,G,E,I,G,E,I,G,E,I,G,E,I,G,E,G,G,E,Q,G,E,O,G,E,Q,G,E,W,G,E,Q,G,E,O,G,E,O,G,E,O,G,E,O,G,E,a,G,E,Y,G,E,Q,G,E,S,G,E,O,G,E,O,G,E,O,G,E,Q,G,E,Q,G,E,Q,G,E,Q,G,E,O,G,K;gBClErE,MAAA,IAAA,EAAA,MAGA,IAAA,EAAA,OACA,IAAA,EAAA,OACA,IAAA,EAAA,OAEA,IAAA,EAAA;gBAEA,SAAgB8jB;oBACd,OAAOC,EAAiB;gBAC1B;gBACA,SAAgBC;oBACd,OAAOD,EAAiB;gBAC1B;gBACA,SAAgBE;oBACd,OAA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b,CAAAA,KAAAA,CAC7D2b,IAAU3b,EAAM4a,KAAAA,IAFhBe,IAAU3b,EAAM46C,MAAAA,EAKlBj/B,IAAUA,KAAWo+B,EAAsB9+B,IAC3CA,IAAYA,KAAiC,MAApBU,EAAQhN,OAAAA,GAAgB,UAAU;oBAC3D,MAAMwjC,IAAKx2B,EAAQw2B,EAAAA;oBAInB,OAFAnyC,CAAAA,CAAMib,EAAAA,GAAaU,GAEfw2B,EAAG0I,aAAAA,KAAAA,CAAAA,OACE76C,CAAAA,CAAMib,EAAAA,EACNK,EAAmBL,EAAAA,IAAAA,CAG5Bk3B,EAAG2I,OAAAA,CAAQ3I,EAAG4I,UAAAA,GACd5I,EAAG2I,OAAAA,CAAQ3I,EAAG6I,YAAAA,GACd7I,EAAG2I,OAAAA,CAAQ3I,EAAG8I,KAAAA,GACd9I,EAAG2I,OAAAA,CAAQ3I,EAAG+I,MAAAA,GACd/I,EAAG2I,OAAAA,CAAQ3I,EAAGgJ,mBAAAA,GACdhJ,EAAG2I,OAAAA,CAAQ3I,EAAGiJ,eAAAA,GACdjJ,EAAGkJ,MAAAA,CAAOlJ,EAAGmJ,YAAAA,GACbnJ,EAAGkJ,MAAAA,CAAOlJ,EAAGoJ,SAAAA,GACbpJ,EAAGqJ,QAAAA,CAASrJ,EAAGsJ,IAAAA,GAER9/B,CAAAA;gBACT,GAEA,EAAA,qBAAA,GAAA;Y;Y,M,S,C,E,C,E,C;gB;gB,I,I,I,I,I,C,e,I,C,O,M,G,S,C,E,C,E,C,E,C;oB,K,M,K,C,I,C;oB,I,I,O,wB,C,G;oB,K,C,C,S,I,C,E,U,G,E,Q,I,E,Y,K,C,I;wB,Y,C;wB,K;4B,O,C,C,E;wB;oB,C,G,O,c,C,G,G;gB,I,S,C,E,C,E,C,E,C;oB,K,M,K,C,I,C,G,C,C,E,G,C,C,E;gB,C,G,I,I,I,I,C,kB,I,C,O,M,G,S,C,E,C;oB,O,c,C,G,W;wB,Y,C;wB,O;oB;gB,I,S,C,E,C;oB,E,O,G;gB,C,G,I,I,I,I,C,Y,I,S,C;oB,I,K,E,U,E,O;oB,I,I,C;oB,I,Q,G,I,I,K,E,c,K,O,S,C,c,C,I,C,G,M,E,G,G;oB,O,E,G,I;gB;gB,O,c,C,G,c;oB,O,C;gB,I,E,Y,G,E,oB,G,K;gBC3CA,MAAA,IAAA,EA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,I,C;oB,I,I,O,wB,C,G;oB,K,C,C,S,I,C,E,U,G,E,Q,I,E,Y,K,C,I;wB,Y,C;wB,K;4B,O,C,C,E;wB;oB,C,G,O,c,C,G,G;gB,I,S,C,E,C,E,C,E,C;oB,K,M,K,C,I,C,G,C,C,E,G,C,C,E;gB,C,G,I,I,I,I,C,kB,I,C,O,M,G,S,C,E,C;oB,O,c,C,G,W;wB,Y,C;wB,O;oB;gB,I,S,C,E,C;oB,E,O,G;gB,C,G,I,I,I,I,C,Y,I,S,C;oB,I,K,E,U,E,O;oB,I,I,C;oB,I,Q,G,I,I,K,E,c,K,O,S,C,c,C,I,C,G,M,E,G,G;oB,O,E,G,I;gB;gB,O,c,C,G,c;oB,O,C;gB,I,E,Y,G,E,G,G,E,c,G,E,a,G,E,qB,G,E,qB,G,E,O,G,E,Q,G,K;gBC1BR,MAAA,IAAA,EAAA,OAGA,IAAA,EAAA,EAAA,OACA,IAAA,EAAA,OAEM2pF,IAAU,IAAA,CAAA,CAAiB,EAAApyD,GAAAA,CAAI1W,IAAAA,CAAK6W,KAAAA,IAA6B,eAAA,OAAbthC;gBAC1D,IAAIwzF,GAQAC,GACAC,GARAC,IAAAA,CAAe,GACfC,IAAAA,CAAc,GACdC,IAAAA,CAAU;gBAOd,MAAMC,IAAiF,EAAA,EACjFC,IAAuF,EAAA,EACvFC,IAA+E,EAAA,EAC/EC,IAAyD,EAAA,EACzDC,IAA8D,EAAA,EAC9DC,IAAuD,EAAA,EAEvDC,IAAe;oBACnB,IAAIT,KAAAA,CAAiBC,KAAeC,KAAAA,CAAYL,GAC9C,MAAM,IAAIrrF,MAAM;gB,GAIdksF,KAAwBC;oBAC5B,OAAQA,EAAGznF,IAAAA,CAAKsnB,IAAAA;wBACd,KAAK;4BACHw/D,IAAAA,CAAe,GACXW,EAAGznF,IAAAA,CAAKkX,GAAAA,GAAAA,CACV8vE,IAAAA,CAAU,GACVJ,CAAAA,CAAkB,EAAA,CAAGa,EAAGznF,IAAAA,CAAKkX,GAAAA,CAAAA,IAAAA,CAE7B6vE,IAAAA,CAAc,GACdH,CAAAA,CAAkB,EAAA,EAAA;4BAEpB;wBACF,KAAK;4BACCa,EAAGznF,IAAAA,CAAKkX,GAAAA,GACV2vE,CAAAA,CAAiB,EAAA,CAAGY,EAAGznF,IAA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I,I,I,I,C,e,I,C,O,M,G,S,C,E,C,E,C,E,C;oB,K,M,K,C,I,C;oB,I,I,O,wB,C,G;oB,K,C,C,S,I,C,E,U,G,E,Q,I,E,Y,K,C,I;wB,Y,C;wB,K;4B,O,C,C,E;wB;oB,C,G,O,c,C,G,G;gB,I,S,C,E,C,E,C,E,C;oB,K,M,K,C,I,C,G,C,C,E,G,C,C,E;gB,C,G,I,I,I,I,C,kB,I,C,O,M,G,S,C,E,C;oB,O,c,C,G,W;wB,Y,C;wB,O;oB;gB,I,S,C,E,C;oB,E,O,G;gB,C,G,I,I,I,I,C,Y,I,S,C;oB,I,K,E,U,E,O;oB,I,I,C;oB,I,Q,G,I,I,K,E,c,K,O,S,C,c,C,I,C,G,M,E,G,G;oB,O,E,G,I;gB,G,I,I,I,I,C,e,I,S,C;oB,O,K,E,U,G,I;wB,S;oB;gB;gB,O,c,C,G,c;oB,O,C;gB,I,E,O,G,E,W,G,E,qB,G,K;gBC5ahB,MAAA,IAAA,EAAA,EAAA,QAIA,IAAA,EAAA,EAAA,OAEMC,IAEgC,EAAQ;gBAE9C,IAAItvE,GACAmpE,IAAAA,CAAc,GACdD,IAAAA,CAAe,GACfE,IAAAA,CAAU;gBAEd,MAiDMmG,IAAkB,CAACC,GAAkBC,IACrCA,IACKD,IAAU,gCAAgC,2BAE1CA,IAAU,uBAAuB;gBAI/B,EAAAvF,qBAAAA,GAAwB7zD,OAAMs5D;oBACzC,IAAIvG,GACF,OAAOzyF,QAAQib,OAAAA;oBAEjB,IAAIu3E,GACF,MAAM,IAAIxrF,MAAM;oBAElB,IAAI0rF,GACF,MAAM,IAAI1rF,MAAM;oBAGlBwrF,IAAAA,CAAe;oBAGf,MAAMyG,IAAUD,EAAM/4D,WAAAA,EAChBG,IAAa44D,EAAM54D,UAAAA,EACnBF,IAAO84D,EAAM94D,IAAAA,EAEb64D,IAAa34D,IAAa,KA3EH,CAAA;wBAC7B,IAAA;4BAEE,OAAiC,eAAA,OAAtBl7B,qBAAAA,CAMmB,eAAA,OAAnBg0F,kBAAAA,CACT,IAAIA,cAAAA,EAAiBC,KAAAA,CAAMpxF,WAAAA,CAAY,IAAI7C,kBAAkB,KAKxDR,YAAY00F,QAAAA,CAAS,IAAIx3F,WAAW;gCACzC;gCAAG;gCAAI;gCAAK;gCA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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124],"debugId":null}}]
}